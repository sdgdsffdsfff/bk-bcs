// Code generated by protoc-gen-go. DO NOT EDIT.
// source: cloudnetservice.proto

package cloudnetservice

import (
	context "context"
	fmt "fmt"
	common "github.com/Tencent/bk-bcs/bcs-network/api/protocol/common"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type AddSubnetReq struct {
	Seq                  uint64   `protobuf:"varint,1,opt,name=seq,proto3" json:"seq,omitempty"`
	VpcID                string   `protobuf:"bytes,2,opt,name=vpcID,proto3" json:"vpcID,omitempty"`
	Region               string   `protobuf:"bytes,3,opt,name=region,proto3" json:"region,omitempty"`
	Zone                 string   `protobuf:"bytes,4,opt,name=zone,proto3" json:"zone,omitempty"`
	SubnetID             string   `protobuf:"bytes,5,opt,name=subnetID,proto3" json:"subnetID,omitempty"`
	SubnetCidr           string   `protobuf:"bytes,6,opt,name=subnetCidr,proto3" json:"subnetCidr,omitempty"`
	MinIPNumPerEni       int32    `protobuf:"varint,7,opt,name=minIPNumPerEni,proto3" json:"minIPNumPerEni,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AddSubnetReq) Reset()         { *m = AddSubnetReq{} }
func (m *AddSubnetReq) String() string { return proto.CompactTextString(m) }
func (*AddSubnetReq) ProtoMessage()    {}
func (*AddSubnetReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_967af07f722e7296, []int{0}
}

func (m *AddSubnetReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AddSubnetReq.Unmarshal(m, b)
}
func (m *AddSubnetReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AddSubnetReq.Marshal(b, m, deterministic)
}
func (m *AddSubnetReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddSubnetReq.Merge(m, src)
}
func (m *AddSubnetReq) XXX_Size() int {
	return xxx_messageInfo_AddSubnetReq.Size(m)
}
func (m *AddSubnetReq) XXX_DiscardUnknown() {
	xxx_messageInfo_AddSubnetReq.DiscardUnknown(m)
}

var xxx_messageInfo_AddSubnetReq proto.InternalMessageInfo

func (m *AddSubnetReq) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *AddSubnetReq) GetVpcID() string {
	if m != nil {
		return m.VpcID
	}
	return ""
}

func (m *AddSubnetReq) GetRegion() string {
	if m != nil {
		return m.Region
	}
	return ""
}

func (m *AddSubnetReq) GetZone() string {
	if m != nil {
		return m.Zone
	}
	return ""
}

func (m *AddSubnetReq) GetSubnetID() string {
	if m != nil {
		return m.SubnetID
	}
	return ""
}

func (m *AddSubnetReq) GetSubnetCidr() string {
	if m != nil {
		return m.SubnetCidr
	}
	return ""
}

func (m *AddSubnetReq) GetMinIPNumPerEni() int32 {
	if m != nil {
		return m.MinIPNumPerEni
	}
	return 0
}

type AddSubnetResp struct {
	Seq                  uint64         `protobuf:"varint,1,opt,name=seq,proto3" json:"seq,omitempty"`
	ErrCode              common.ErrCode `protobuf:"varint,2,opt,name=errCode,proto3,enum=common.ErrCode" json:"errCode,omitempty"`
	ErrMsg               string         `protobuf:"bytes,3,opt,name=errMsg,proto3" json:"errMsg,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *AddSubnetResp) Reset()         { *m = AddSubnetResp{} }
func (m *AddSubnetResp) String() string { return proto.CompactTextString(m) }
func (*AddSubnetResp) ProtoMessage()    {}
func (*AddSubnetResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_967af07f722e7296, []int{1}
}

func (m *AddSubnetResp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AddSubnetResp.Unmarshal(m, b)
}
func (m *AddSubnetResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AddSubnetResp.Marshal(b, m, deterministic)
}
func (m *AddSubnetResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddSubnetResp.Merge(m, src)
}
func (m *AddSubnetResp) XXX_Size() int {
	return xxx_messageInfo_AddSubnetResp.Size(m)
}
func (m *AddSubnetResp) XXX_DiscardUnknown() {
	xxx_messageInfo_AddSubnetResp.DiscardUnknown(m)
}

var xxx_messageInfo_AddSubnetResp proto.InternalMessageInfo

func (m *AddSubnetResp) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *AddSubnetResp) GetErrCode() common.ErrCode {
	if m != nil {
		return m.ErrCode
	}
	return common.ErrCode_ERROR_OK
}

func (m *AddSubnetResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

type DeleteSubnetReq struct {
	Seq                  uint64   `protobuf:"varint,1,opt,name=seq,proto3" json:"seq,omitempty"`
	VpcID                string   `protobuf:"bytes,2,opt,name=vpcID,proto3" json:"vpcID,omitempty"`
	Region               string   `protobuf:"bytes,3,opt,name=region,proto3" json:"region,omitempty"`
	Zone                 string   `protobuf:"bytes,4,opt,name=zone,proto3" json:"zone,omitempty"`
	SubnetID             string   `protobuf:"bytes,5,opt,name=subnetID,proto3" json:"subnetID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteSubnetReq) Reset()         { *m = DeleteSubnetReq{} }
func (m *DeleteSubnetReq) String() string { return proto.CompactTextString(m) }
func (*DeleteSubnetReq) ProtoMessage()    {}
func (*DeleteSubnetReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_967af07f722e7296, []int{2}
}

func (m *DeleteSubnetReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteSubnetReq.Unmarshal(m, b)
}
func (m *DeleteSubnetReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteSubnetReq.Marshal(b, m, deterministic)
}
func (m *DeleteSubnetReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteSubnetReq.Merge(m, src)
}
func (m *DeleteSubnetReq) XXX_Size() int {
	return xxx_messageInfo_DeleteSubnetReq.Size(m)
}
func (m *DeleteSubnetReq) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteSubnetReq.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteSubnetReq proto.InternalMessageInfo

func (m *DeleteSubnetReq) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *DeleteSubnetReq) GetVpcID() string {
	if m != nil {
		return m.VpcID
	}
	return ""
}

func (m *DeleteSubnetReq) GetRegion() string {
	if m != nil {
		return m.Region
	}
	return ""
}

func (m *DeleteSubnetReq) GetZone() string {
	if m != nil {
		return m.Zone
	}
	return ""
}

func (m *DeleteSubnetReq) GetSubnetID() string {
	if m != nil {
		return m.SubnetID
	}
	return ""
}

type DeleteSubnetResp struct {
	Seq                  uint64         `protobuf:"varint,1,opt,name=seq,proto3" json:"seq,omitempty"`
	ErrCode              common.ErrCode `protobuf:"varint,2,opt,name=errCode,proto3,enum=common.ErrCode" json:"errCode,omitempty"`
	ErrMsg               string         `protobuf:"bytes,3,opt,name=errMsg,proto3" json:"errMsg,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *DeleteSubnetResp) Reset()         { *m = DeleteSubnetResp{} }
func (m *DeleteSubnetResp) String() string { return proto.CompactTextString(m) }
func (*DeleteSubnetResp) ProtoMessage()    {}
func (*DeleteSubnetResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_967af07f722e7296, []int{3}
}

func (m *DeleteSubnetResp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteSubnetResp.Unmarshal(m, b)
}
func (m *DeleteSubnetResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteSubnetResp.Marshal(b, m, deterministic)
}
func (m *DeleteSubnetResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteSubnetResp.Merge(m, src)
}
func (m *DeleteSubnetResp) XXX_Size() int {
	return xxx_messageInfo_DeleteSubnetResp.Size(m)
}
func (m *DeleteSubnetResp) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteSubnetResp.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteSubnetResp proto.InternalMessageInfo

func (m *DeleteSubnetResp) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *DeleteSubnetResp) GetErrCode() common.ErrCode {
	if m != nil {
		return m.ErrCode
	}
	return common.ErrCode_ERROR_OK
}

func (m *DeleteSubnetResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

type ListSubnetReq struct {
	Seq                  uint64   `protobuf:"varint,1,opt,name=seq,proto3" json:"seq,omitempty"`
	VpcID                string   `protobuf:"bytes,2,opt,name=vpcID,proto3" json:"vpcID,omitempty"`
	Region               string   `protobuf:"bytes,3,opt,name=region,proto3" json:"region,omitempty"`
	SubnetID             string   `protobuf:"bytes,4,opt,name=subnetID,proto3" json:"subnetID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListSubnetReq) Reset()         { *m = ListSubnetReq{} }
func (m *ListSubnetReq) String() string { return proto.CompactTextString(m) }
func (*ListSubnetReq) ProtoMessage()    {}
func (*ListSubnetReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_967af07f722e7296, []int{4}
}

func (m *ListSubnetReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListSubnetReq.Unmarshal(m, b)
}
func (m *ListSubnetReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListSubnetReq.Marshal(b, m, deterministic)
}
func (m *ListSubnetReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListSubnetReq.Merge(m, src)
}
func (m *ListSubnetReq) XXX_Size() int {
	return xxx_messageInfo_ListSubnetReq.Size(m)
}
func (m *ListSubnetReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ListSubnetReq.DiscardUnknown(m)
}

var xxx_messageInfo_ListSubnetReq proto.InternalMessageInfo

func (m *ListSubnetReq) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *ListSubnetReq) GetVpcID() string {
	if m != nil {
		return m.VpcID
	}
	return ""
}

func (m *ListSubnetReq) GetRegion() string {
	if m != nil {
		return m.Region
	}
	return ""
}

func (m *ListSubnetReq) GetSubnetID() string {
	if m != nil {
		return m.SubnetID
	}
	return ""
}

type ListSubnetResp struct {
	Seq                  uint64                `protobuf:"varint,1,opt,name=seq,proto3" json:"seq,omitempty"`
	ErrCode              common.ErrCode        `protobuf:"varint,2,opt,name=errCode,proto3,enum=common.ErrCode" json:"errCode,omitempty"`
	ErrMsg               string                `protobuf:"bytes,3,opt,name=errMsg,proto3" json:"errMsg,omitempty"`
	Subnets              []*common.CloudSubnet `protobuf:"bytes,4,rep,name=subnets,proto3" json:"subnets,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *ListSubnetResp) Reset()         { *m = ListSubnetResp{} }
func (m *ListSubnetResp) String() string { return proto.CompactTextString(m) }
func (*ListSubnetResp) ProtoMessage()    {}
func (*ListSubnetResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_967af07f722e7296, []int{5}
}

func (m *ListSubnetResp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListSubnetResp.Unmarshal(m, b)
}
func (m *ListSubnetResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListSubnetResp.Marshal(b, m, deterministic)
}
func (m *ListSubnetResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListSubnetResp.Merge(m, src)
}
func (m *ListSubnetResp) XXX_Size() int {
	return xxx_messageInfo_ListSubnetResp.Size(m)
}
func (m *ListSubnetResp) XXX_DiscardUnknown() {
	xxx_messageInfo_ListSubnetResp.DiscardUnknown(m)
}

var xxx_messageInfo_ListSubnetResp proto.InternalMessageInfo

func (m *ListSubnetResp) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *ListSubnetResp) GetErrCode() common.ErrCode {
	if m != nil {
		return m.ErrCode
	}
	return common.ErrCode_ERROR_OK
}

func (m *ListSubnetResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

func (m *ListSubnetResp) GetSubnets() []*common.CloudSubnet {
	if m != nil {
		return m.Subnets
	}
	return nil
}

type ChangeSubnetReq struct {
	Seq                  uint64   `protobuf:"varint,1,opt,name=seq,proto3" json:"seq,omitempty"`
	VpcID                string   `protobuf:"bytes,2,opt,name=vpcID,proto3" json:"vpcID,omitempty"`
	SubnetID             string   `protobuf:"bytes,3,opt,name=subnetID,proto3" json:"subnetID,omitempty"`
	State                uint32   `protobuf:"varint,4,opt,name=state,proto3" json:"state,omitempty"`
	MinIPNumPerEni       int32    `protobuf:"varint,5,opt,name=minIPNumPerEni,proto3" json:"minIPNumPerEni,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ChangeSubnetReq) Reset()         { *m = ChangeSubnetReq{} }
func (m *ChangeSubnetReq) String() string { return proto.CompactTextString(m) }
func (*ChangeSubnetReq) ProtoMessage()    {}
func (*ChangeSubnetReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_967af07f722e7296, []int{6}
}

func (m *ChangeSubnetReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChangeSubnetReq.Unmarshal(m, b)
}
func (m *ChangeSubnetReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChangeSubnetReq.Marshal(b, m, deterministic)
}
func (m *ChangeSubnetReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChangeSubnetReq.Merge(m, src)
}
func (m *ChangeSubnetReq) XXX_Size() int {
	return xxx_messageInfo_ChangeSubnetReq.Size(m)
}
func (m *ChangeSubnetReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ChangeSubnetReq.DiscardUnknown(m)
}

var xxx_messageInfo_ChangeSubnetReq proto.InternalMessageInfo

func (m *ChangeSubnetReq) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *ChangeSubnetReq) GetVpcID() string {
	if m != nil {
		return m.VpcID
	}
	return ""
}

func (m *ChangeSubnetReq) GetSubnetID() string {
	if m != nil {
		return m.SubnetID
	}
	return ""
}

func (m *ChangeSubnetReq) GetState() uint32 {
	if m != nil {
		return m.State
	}
	return 0
}

func (m *ChangeSubnetReq) GetMinIPNumPerEni() int32 {
	if m != nil {
		return m.MinIPNumPerEni
	}
	return 0
}

type ChangeSubnetResp struct {
	Seq                  uint64         `protobuf:"varint,1,opt,name=seq,proto3" json:"seq,omitempty"`
	ErrCode              common.ErrCode `protobuf:"varint,2,opt,name=errCode,proto3,enum=common.ErrCode" json:"errCode,omitempty"`
	ErrMsg               string         `protobuf:"bytes,3,opt,name=errMsg,proto3" json:"errMsg,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *ChangeSubnetResp) Reset()         { *m = ChangeSubnetResp{} }
func (m *ChangeSubnetResp) String() string { return proto.CompactTextString(m) }
func (*ChangeSubnetResp) ProtoMessage()    {}
func (*ChangeSubnetResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_967af07f722e7296, []int{7}
}

func (m *ChangeSubnetResp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChangeSubnetResp.Unmarshal(m, b)
}
func (m *ChangeSubnetResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChangeSubnetResp.Marshal(b, m, deterministic)
}
func (m *ChangeSubnetResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChangeSubnetResp.Merge(m, src)
}
func (m *ChangeSubnetResp) XXX_Size() int {
	return xxx_messageInfo_ChangeSubnetResp.Size(m)
}
func (m *ChangeSubnetResp) XXX_DiscardUnknown() {
	xxx_messageInfo_ChangeSubnetResp.DiscardUnknown(m)
}

var xxx_messageInfo_ChangeSubnetResp proto.InternalMessageInfo

func (m *ChangeSubnetResp) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *ChangeSubnetResp) GetErrCode() common.ErrCode {
	if m != nil {
		return m.ErrCode
	}
	return common.ErrCode_ERROR_OK
}

func (m *ChangeSubnetResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

type GetAvailableSubnetReq struct {
	Seq                  uint64   `protobuf:"varint,1,opt,name=seq,proto3" json:"seq,omitempty"`
	VpcID                string   `protobuf:"bytes,2,opt,name=vpcID,proto3" json:"vpcID,omitempty"`
	Region               string   `protobuf:"bytes,3,opt,name=region,proto3" json:"region,omitempty"`
	Zone                 string   `protobuf:"bytes,4,opt,name=zone,proto3" json:"zone,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetAvailableSubnetReq) Reset()         { *m = GetAvailableSubnetReq{} }
func (m *GetAvailableSubnetReq) String() string { return proto.CompactTextString(m) }
func (*GetAvailableSubnetReq) ProtoMessage()    {}
func (*GetAvailableSubnetReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_967af07f722e7296, []int{8}
}

func (m *GetAvailableSubnetReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetAvailableSubnetReq.Unmarshal(m, b)
}
func (m *GetAvailableSubnetReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetAvailableSubnetReq.Marshal(b, m, deterministic)
}
func (m *GetAvailableSubnetReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAvailableSubnetReq.Merge(m, src)
}
func (m *GetAvailableSubnetReq) XXX_Size() int {
	return xxx_messageInfo_GetAvailableSubnetReq.Size(m)
}
func (m *GetAvailableSubnetReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAvailableSubnetReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetAvailableSubnetReq proto.InternalMessageInfo

func (m *GetAvailableSubnetReq) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *GetAvailableSubnetReq) GetVpcID() string {
	if m != nil {
		return m.VpcID
	}
	return ""
}

func (m *GetAvailableSubnetReq) GetRegion() string {
	if m != nil {
		return m.Region
	}
	return ""
}

func (m *GetAvailableSubnetReq) GetZone() string {
	if m != nil {
		return m.Zone
	}
	return ""
}

type GetAvailableSubnetResp struct {
	Seq                  uint64              `protobuf:"varint,1,opt,name=seq,proto3" json:"seq,omitempty"`
	ErrCode              common.ErrCode      `protobuf:"varint,2,opt,name=errCode,proto3,enum=common.ErrCode" json:"errCode,omitempty"`
	ErrMsg               string              `protobuf:"bytes,3,opt,name=errMsg,proto3" json:"errMsg,omitempty"`
	Subnet               *common.CloudSubnet `protobuf:"bytes,4,opt,name=subnet,proto3" json:"subnet,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *GetAvailableSubnetResp) Reset()         { *m = GetAvailableSubnetResp{} }
func (m *GetAvailableSubnetResp) String() string { return proto.CompactTextString(m) }
func (*GetAvailableSubnetResp) ProtoMessage()    {}
func (*GetAvailableSubnetResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_967af07f722e7296, []int{9}
}

func (m *GetAvailableSubnetResp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetAvailableSubnetResp.Unmarshal(m, b)
}
func (m *GetAvailableSubnetResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetAvailableSubnetResp.Marshal(b, m, deterministic)
}
func (m *GetAvailableSubnetResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAvailableSubnetResp.Merge(m, src)
}
func (m *GetAvailableSubnetResp) XXX_Size() int {
	return xxx_messageInfo_GetAvailableSubnetResp.Size(m)
}
func (m *GetAvailableSubnetResp) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAvailableSubnetResp.DiscardUnknown(m)
}

var xxx_messageInfo_GetAvailableSubnetResp proto.InternalMessageInfo

func (m *GetAvailableSubnetResp) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *GetAvailableSubnetResp) GetErrCode() common.ErrCode {
	if m != nil {
		return m.ErrCode
	}
	return common.ErrCode_ERROR_OK
}

func (m *GetAvailableSubnetResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

func (m *GetAvailableSubnetResp) GetSubnet() *common.CloudSubnet {
	if m != nil {
		return m.Subnet
	}
	return nil
}

type AllocateIPReq struct {
	Seq                  uint64   `protobuf:"varint,1,opt,name=seq,proto3" json:"seq,omitempty"`
	SubnetID             string   `protobuf:"bytes,2,opt,name=subnetID,proto3" json:"subnetID,omitempty"`
	Cluster              string   `protobuf:"bytes,3,opt,name=cluster,proto3" json:"cluster,omitempty"`
	Namespace            string   `protobuf:"bytes,4,opt,name=namespace,proto3" json:"namespace,omitempty"`
	PodName              string   `protobuf:"bytes,5,opt,name=podName,proto3" json:"podName,omitempty"`
	ContainerID          string   `protobuf:"bytes,6,opt,name=containerID,proto3" json:"containerID,omitempty"`
	Host                 string   `protobuf:"bytes,7,opt,name=host,proto3" json:"host,omitempty"`
	EniID                string   `protobuf:"bytes,8,opt,name=eniID,proto3" json:"eniID,omitempty"`
	IsFixed              bool     `protobuf:"varint,9,opt,name=isFixed,proto3" json:"isFixed,omitempty"`
	KeepDuration         string   `protobuf:"bytes,10,opt,name=keepDuration,proto3" json:"keepDuration,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AllocateIPReq) Reset()         { *m = AllocateIPReq{} }
func (m *AllocateIPReq) String() string { return proto.CompactTextString(m) }
func (*AllocateIPReq) ProtoMessage()    {}
func (*AllocateIPReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_967af07f722e7296, []int{10}
}

func (m *AllocateIPReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AllocateIPReq.Unmarshal(m, b)
}
func (m *AllocateIPReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AllocateIPReq.Marshal(b, m, deterministic)
}
func (m *AllocateIPReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AllocateIPReq.Merge(m, src)
}
func (m *AllocateIPReq) XXX_Size() int {
	return xxx_messageInfo_AllocateIPReq.Size(m)
}
func (m *AllocateIPReq) XXX_DiscardUnknown() {
	xxx_messageInfo_AllocateIPReq.DiscardUnknown(m)
}

var xxx_messageInfo_AllocateIPReq proto.InternalMessageInfo

func (m *AllocateIPReq) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *AllocateIPReq) GetSubnetID() string {
	if m != nil {
		return m.SubnetID
	}
	return ""
}

func (m *AllocateIPReq) GetCluster() string {
	if m != nil {
		return m.Cluster
	}
	return ""
}

func (m *AllocateIPReq) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *AllocateIPReq) GetPodName() string {
	if m != nil {
		return m.PodName
	}
	return ""
}

func (m *AllocateIPReq) GetContainerID() string {
	if m != nil {
		return m.ContainerID
	}
	return ""
}

func (m *AllocateIPReq) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *AllocateIPReq) GetEniID() string {
	if m != nil {
		return m.EniID
	}
	return ""
}

func (m *AllocateIPReq) GetIsFixed() bool {
	if m != nil {
		return m.IsFixed
	}
	return false
}

func (m *AllocateIPReq) GetKeepDuration() string {
	if m != nil {
		return m.KeepDuration
	}
	return ""
}

type AllocateIPResp struct {
	Seq                  uint64           `protobuf:"varint,1,opt,name=seq,proto3" json:"seq,omitempty"`
	ErrCode              common.ErrCode   `protobuf:"varint,2,opt,name=errCode,proto3,enum=common.ErrCode" json:"errCode,omitempty"`
	ErrMsg               string           `protobuf:"bytes,3,opt,name=errMsg,proto3" json:"errMsg,omitempty"`
	Ip                   *common.IPObject `protobuf:"bytes,4,opt,name=ip,proto3" json:"ip,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *AllocateIPResp) Reset()         { *m = AllocateIPResp{} }
func (m *AllocateIPResp) String() string { return proto.CompactTextString(m) }
func (*AllocateIPResp) ProtoMessage()    {}
func (*AllocateIPResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_967af07f722e7296, []int{11}
}

func (m *AllocateIPResp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AllocateIPResp.Unmarshal(m, b)
}
func (m *AllocateIPResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AllocateIPResp.Marshal(b, m, deterministic)
}
func (m *AllocateIPResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AllocateIPResp.Merge(m, src)
}
func (m *AllocateIPResp) XXX_Size() int {
	return xxx_messageInfo_AllocateIPResp.Size(m)
}
func (m *AllocateIPResp) XXX_DiscardUnknown() {
	xxx_messageInfo_AllocateIPResp.DiscardUnknown(m)
}

var xxx_messageInfo_AllocateIPResp proto.InternalMessageInfo

func (m *AllocateIPResp) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *AllocateIPResp) GetErrCode() common.ErrCode {
	if m != nil {
		return m.ErrCode
	}
	return common.ErrCode_ERROR_OK
}

func (m *AllocateIPResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

func (m *AllocateIPResp) GetIp() *common.IPObject {
	if m != nil {
		return m.Ip
	}
	return nil
}

type ReleaseIPReq struct {
	Seq                  uint64   `protobuf:"varint,1,opt,name=seq,proto3" json:"seq,omitempty"`
	Cluster              string   `protobuf:"bytes,2,opt,name=cluster,proto3" json:"cluster,omitempty"`
	PodName              string   `protobuf:"bytes,3,opt,name=podName,proto3" json:"podName,omitempty"`
	PodNamespace         string   `protobuf:"bytes,4,opt,name=podNamespace,proto3" json:"podNamespace,omitempty"`
	ContainerID          string   `protobuf:"bytes,5,opt,name=containerID,proto3" json:"containerID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReleaseIPReq) Reset()         { *m = ReleaseIPReq{} }
func (m *ReleaseIPReq) String() string { return proto.CompactTextString(m) }
func (*ReleaseIPReq) ProtoMessage()    {}
func (*ReleaseIPReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_967af07f722e7296, []int{12}
}

func (m *ReleaseIPReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReleaseIPReq.Unmarshal(m, b)
}
func (m *ReleaseIPReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReleaseIPReq.Marshal(b, m, deterministic)
}
func (m *ReleaseIPReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReleaseIPReq.Merge(m, src)
}
func (m *ReleaseIPReq) XXX_Size() int {
	return xxx_messageInfo_ReleaseIPReq.Size(m)
}
func (m *ReleaseIPReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ReleaseIPReq.DiscardUnknown(m)
}

var xxx_messageInfo_ReleaseIPReq proto.InternalMessageInfo

func (m *ReleaseIPReq) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *ReleaseIPReq) GetCluster() string {
	if m != nil {
		return m.Cluster
	}
	return ""
}

func (m *ReleaseIPReq) GetPodName() string {
	if m != nil {
		return m.PodName
	}
	return ""
}

func (m *ReleaseIPReq) GetPodNamespace() string {
	if m != nil {
		return m.PodNamespace
	}
	return ""
}

func (m *ReleaseIPReq) GetContainerID() string {
	if m != nil {
		return m.ContainerID
	}
	return ""
}

type ReleaseIPResp struct {
	Seq                  uint64         `protobuf:"varint,1,opt,name=seq,proto3" json:"seq,omitempty"`
	ErrCode              common.ErrCode `protobuf:"varint,2,opt,name=errCode,proto3,enum=common.ErrCode" json:"errCode,omitempty"`
	ErrMsg               string         `protobuf:"bytes,3,opt,name=errMsg,proto3" json:"errMsg,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *ReleaseIPResp) Reset()         { *m = ReleaseIPResp{} }
func (m *ReleaseIPResp) String() string { return proto.CompactTextString(m) }
func (*ReleaseIPResp) ProtoMessage()    {}
func (*ReleaseIPResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_967af07f722e7296, []int{13}
}

func (m *ReleaseIPResp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReleaseIPResp.Unmarshal(m, b)
}
func (m *ReleaseIPResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReleaseIPResp.Marshal(b, m, deterministic)
}
func (m *ReleaseIPResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReleaseIPResp.Merge(m, src)
}
func (m *ReleaseIPResp) XXX_Size() int {
	return xxx_messageInfo_ReleaseIPResp.Size(m)
}
func (m *ReleaseIPResp) XXX_DiscardUnknown() {
	xxx_messageInfo_ReleaseIPResp.DiscardUnknown(m)
}

var xxx_messageInfo_ReleaseIPResp proto.InternalMessageInfo

func (m *ReleaseIPResp) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *ReleaseIPResp) GetErrCode() common.ErrCode {
	if m != nil {
		return m.ErrCode
	}
	return common.ErrCode_ERROR_OK
}

func (m *ReleaseIPResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

type CleanFixedIPReq struct {
	Seq                  uint64   `protobuf:"varint,1,opt,name=seq,proto3" json:"seq,omitempty"`
	Region               string   `protobuf:"bytes,2,opt,name=region,proto3" json:"region,omitempty"`
	Cluster              string   `protobuf:"bytes,3,opt,name=cluster,proto3" json:"cluster,omitempty"`
	Namespace            string   `protobuf:"bytes,4,opt,name=namespace,proto3" json:"namespace,omitempty"`
	WorkloadName         string   `protobuf:"bytes,5,opt,name=workloadName,proto3" json:"workloadName,omitempty"`
	WorkloadKind         string   `protobuf:"bytes,6,opt,name=workloadKind,proto3" json:"workloadKind,omitempty"`
	Address              string   `protobuf:"bytes,7,opt,name=address,proto3" json:"address,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CleanFixedIPReq) Reset()         { *m = CleanFixedIPReq{} }
func (m *CleanFixedIPReq) String() string { return proto.CompactTextString(m) }
func (*CleanFixedIPReq) ProtoMessage()    {}
func (*CleanFixedIPReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_967af07f722e7296, []int{14}
}

func (m *CleanFixedIPReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CleanFixedIPReq.Unmarshal(m, b)
}
func (m *CleanFixedIPReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CleanFixedIPReq.Marshal(b, m, deterministic)
}
func (m *CleanFixedIPReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CleanFixedIPReq.Merge(m, src)
}
func (m *CleanFixedIPReq) XXX_Size() int {
	return xxx_messageInfo_CleanFixedIPReq.Size(m)
}
func (m *CleanFixedIPReq) XXX_DiscardUnknown() {
	xxx_messageInfo_CleanFixedIPReq.DiscardUnknown(m)
}

var xxx_messageInfo_CleanFixedIPReq proto.InternalMessageInfo

func (m *CleanFixedIPReq) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *CleanFixedIPReq) GetRegion() string {
	if m != nil {
		return m.Region
	}
	return ""
}

func (m *CleanFixedIPReq) GetCluster() string {
	if m != nil {
		return m.Cluster
	}
	return ""
}

func (m *CleanFixedIPReq) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *CleanFixedIPReq) GetWorkloadName() string {
	if m != nil {
		return m.WorkloadName
	}
	return ""
}

func (m *CleanFixedIPReq) GetWorkloadKind() string {
	if m != nil {
		return m.WorkloadKind
	}
	return ""
}

func (m *CleanFixedIPReq) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type CleanFixedIPResp struct {
	Seq                  uint64         `protobuf:"varint,1,opt,name=seq,proto3" json:"seq,omitempty"`
	ErrCode              common.ErrCode `protobuf:"varint,2,opt,name=errCode,proto3,enum=common.ErrCode" json:"errCode,omitempty"`
	ErrMsg               string         `protobuf:"bytes,3,opt,name=errMsg,proto3" json:"errMsg,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *CleanFixedIPResp) Reset()         { *m = CleanFixedIPResp{} }
func (m *CleanFixedIPResp) String() string { return proto.CompactTextString(m) }
func (*CleanFixedIPResp) ProtoMessage()    {}
func (*CleanFixedIPResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_967af07f722e7296, []int{15}
}

func (m *CleanFixedIPResp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CleanFixedIPResp.Unmarshal(m, b)
}
func (m *CleanFixedIPResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CleanFixedIPResp.Marshal(b, m, deterministic)
}
func (m *CleanFixedIPResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CleanFixedIPResp.Merge(m, src)
}
func (m *CleanFixedIPResp) XXX_Size() int {
	return xxx_messageInfo_CleanFixedIPResp.Size(m)
}
func (m *CleanFixedIPResp) XXX_DiscardUnknown() {
	xxx_messageInfo_CleanFixedIPResp.DiscardUnknown(m)
}

var xxx_messageInfo_CleanFixedIPResp proto.InternalMessageInfo

func (m *CleanFixedIPResp) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *CleanFixedIPResp) GetErrCode() common.ErrCode {
	if m != nil {
		return m.ErrCode
	}
	return common.ErrCode_ERROR_OK
}

func (m *CleanFixedIPResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

type CleanEniReq struct {
	Seq                  uint64   `protobuf:"varint,1,opt,name=seq,proto3" json:"seq,omitempty"`
	EniID                string   `protobuf:"bytes,2,opt,name=eniID,proto3" json:"eniID,omitempty"`
	IsForce              bool     `protobuf:"varint,3,opt,name=isForce,proto3" json:"isForce,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CleanEniReq) Reset()         { *m = CleanEniReq{} }
func (m *CleanEniReq) String() string { return proto.CompactTextString(m) }
func (*CleanEniReq) ProtoMessage()    {}
func (*CleanEniReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_967af07f722e7296, []int{16}
}

func (m *CleanEniReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CleanEniReq.Unmarshal(m, b)
}
func (m *CleanEniReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CleanEniReq.Marshal(b, m, deterministic)
}
func (m *CleanEniReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CleanEniReq.Merge(m, src)
}
func (m *CleanEniReq) XXX_Size() int {
	return xxx_messageInfo_CleanEniReq.Size(m)
}
func (m *CleanEniReq) XXX_DiscardUnknown() {
	xxx_messageInfo_CleanEniReq.DiscardUnknown(m)
}

var xxx_messageInfo_CleanEniReq proto.InternalMessageInfo

func (m *CleanEniReq) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *CleanEniReq) GetEniID() string {
	if m != nil {
		return m.EniID
	}
	return ""
}

func (m *CleanEniReq) GetIsForce() bool {
	if m != nil {
		return m.IsForce
	}
	return false
}

type CleanEniResp struct {
	Seq                  uint64         `protobuf:"varint,1,opt,name=seq,proto3" json:"seq,omitempty"`
	ErrCode              common.ErrCode `protobuf:"varint,2,opt,name=errCode,proto3,enum=common.ErrCode" json:"errCode,omitempty"`
	ErrMsg               string         `protobuf:"bytes,3,opt,name=errMsg,proto3" json:"errMsg,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *CleanEniResp) Reset()         { *m = CleanEniResp{} }
func (m *CleanEniResp) String() string { return proto.CompactTextString(m) }
func (*CleanEniResp) ProtoMessage()    {}
func (*CleanEniResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_967af07f722e7296, []int{17}
}

func (m *CleanEniResp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CleanEniResp.Unmarshal(m, b)
}
func (m *CleanEniResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CleanEniResp.Marshal(b, m, deterministic)
}
func (m *CleanEniResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CleanEniResp.Merge(m, src)
}
func (m *CleanEniResp) XXX_Size() int {
	return xxx_messageInfo_CleanEniResp.Size(m)
}
func (m *CleanEniResp) XXX_DiscardUnknown() {
	xxx_messageInfo_CleanEniResp.DiscardUnknown(m)
}

var xxx_messageInfo_CleanEniResp proto.InternalMessageInfo

func (m *CleanEniResp) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *CleanEniResp) GetErrCode() common.ErrCode {
	if m != nil {
		return m.ErrCode
	}
	return common.ErrCode_ERROR_OK
}

func (m *CleanEniResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

type ListIPsReq struct {
	Seq                  uint64   `protobuf:"varint,1,opt,name=seq,proto3" json:"seq,omitempty"`
	Offset               int64    `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit                int64    `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	VpcID                string   `protobuf:"bytes,4,opt,name=vpcID,proto3" json:"vpcID,omitempty"`
	Region               string   `protobuf:"bytes,5,opt,name=region,proto3" json:"region,omitempty"`
	SubnetID             string   `protobuf:"bytes,6,opt,name=subnetID,proto3" json:"subnetID,omitempty"`
	Cluster              string   `protobuf:"bytes,7,opt,name=cluster,proto3" json:"cluster,omitempty"`
	PodName              string   `protobuf:"bytes,8,opt,name=podName,proto3" json:"podName,omitempty"`
	Namespace            string   `protobuf:"bytes,9,opt,name=namespace,proto3" json:"namespace,omitempty"`
	EniID                string   `protobuf:"bytes,10,opt,name=eniID,proto3" json:"eniID,omitempty"`
	Host                 string   `protobuf:"bytes,11,opt,name=host,proto3" json:"host,omitempty"`
	Status               string   `protobuf:"bytes,12,opt,name=status,proto3" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListIPsReq) Reset()         { *m = ListIPsReq{} }
func (m *ListIPsReq) String() string { return proto.CompactTextString(m) }
func (*ListIPsReq) ProtoMessage()    {}
func (*ListIPsReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_967af07f722e7296, []int{18}
}

func (m *ListIPsReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListIPsReq.Unmarshal(m, b)
}
func (m *ListIPsReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListIPsReq.Marshal(b, m, deterministic)
}
func (m *ListIPsReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListIPsReq.Merge(m, src)
}
func (m *ListIPsReq) XXX_Size() int {
	return xxx_messageInfo_ListIPsReq.Size(m)
}
func (m *ListIPsReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ListIPsReq.DiscardUnknown(m)
}

var xxx_messageInfo_ListIPsReq proto.InternalMessageInfo

func (m *ListIPsReq) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *ListIPsReq) GetOffset() int64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *ListIPsReq) GetLimit() int64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *ListIPsReq) GetVpcID() string {
	if m != nil {
		return m.VpcID
	}
	return ""
}

func (m *ListIPsReq) GetRegion() string {
	if m != nil {
		return m.Region
	}
	return ""
}

func (m *ListIPsReq) GetSubnetID() string {
	if m != nil {
		return m.SubnetID
	}
	return ""
}

func (m *ListIPsReq) GetCluster() string {
	if m != nil {
		return m.Cluster
	}
	return ""
}

func (m *ListIPsReq) GetPodName() string {
	if m != nil {
		return m.PodName
	}
	return ""
}

func (m *ListIPsReq) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *ListIPsReq) GetEniID() string {
	if m != nil {
		return m.EniID
	}
	return ""
}

func (m *ListIPsReq) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *ListIPsReq) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

type ListIPsResp struct {
	Seq                  uint64             `protobuf:"varint,1,opt,name=seq,proto3" json:"seq,omitempty"`
	ErrCode              common.ErrCode     `protobuf:"varint,2,opt,name=errCode,proto3,enum=common.ErrCode" json:"errCode,omitempty"`
	ErrMsg               string             `protobuf:"bytes,3,opt,name=errMsg,proto3" json:"errMsg,omitempty"`
	Ips                  []*common.IPObject `protobuf:"bytes,4,rep,name=ips,proto3" json:"ips,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *ListIPsResp) Reset()         { *m = ListIPsResp{} }
func (m *ListIPsResp) String() string { return proto.CompactTextString(m) }
func (*ListIPsResp) ProtoMessage()    {}
func (*ListIPsResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_967af07f722e7296, []int{19}
}

func (m *ListIPsResp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListIPsResp.Unmarshal(m, b)
}
func (m *ListIPsResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListIPsResp.Marshal(b, m, deterministic)
}
func (m *ListIPsResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListIPsResp.Merge(m, src)
}
func (m *ListIPsResp) XXX_Size() int {
	return xxx_messageInfo_ListIPsResp.Size(m)
}
func (m *ListIPsResp) XXX_DiscardUnknown() {
	xxx_messageInfo_ListIPsResp.DiscardUnknown(m)
}

var xxx_messageInfo_ListIPsResp proto.InternalMessageInfo

func (m *ListIPsResp) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *ListIPsResp) GetErrCode() common.ErrCode {
	if m != nil {
		return m.ErrCode
	}
	return common.ErrCode_ERROR_OK
}

func (m *ListIPsResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

func (m *ListIPsResp) GetIps() []*common.IPObject {
	if m != nil {
		return m.Ips
	}
	return nil
}

type AllocateEniReq struct {
	Seq                  uint64   `protobuf:"varint,1,opt,name=seq,proto3" json:"seq,omitempty"`
	InstanceID           string   `protobuf:"bytes,2,opt,name=instanceID,proto3" json:"instanceID,omitempty"`
	Zone                 string   `protobuf:"bytes,3,opt,name=zone,proto3" json:"zone,omitempty"`
	Cluster              string   `protobuf:"bytes,4,opt,name=cluster,proto3" json:"cluster,omitempty"`
	Index                uint64   `protobuf:"varint,5,opt,name=index,proto3" json:"index,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AllocateEniReq) Reset()         { *m = AllocateEniReq{} }
func (m *AllocateEniReq) String() string { return proto.CompactTextString(m) }
func (*AllocateEniReq) ProtoMessage()    {}
func (*AllocateEniReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_967af07f722e7296, []int{20}
}

func (m *AllocateEniReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AllocateEniReq.Unmarshal(m, b)
}
func (m *AllocateEniReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AllocateEniReq.Marshal(b, m, deterministic)
}
func (m *AllocateEniReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AllocateEniReq.Merge(m, src)
}
func (m *AllocateEniReq) XXX_Size() int {
	return xxx_messageInfo_AllocateEniReq.Size(m)
}
func (m *AllocateEniReq) XXX_DiscardUnknown() {
	xxx_messageInfo_AllocateEniReq.DiscardUnknown(m)
}

var xxx_messageInfo_AllocateEniReq proto.InternalMessageInfo

func (m *AllocateEniReq) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *AllocateEniReq) GetInstanceID() string {
	if m != nil {
		return m.InstanceID
	}
	return ""
}

func (m *AllocateEniReq) GetZone() string {
	if m != nil {
		return m.Zone
	}
	return ""
}

func (m *AllocateEniReq) GetCluster() string {
	if m != nil {
		return m.Cluster
	}
	return ""
}

func (m *AllocateEniReq) GetIndex() uint64 {
	if m != nil {
		return m.Index
	}
	return 0
}

type AllocateEniResp struct {
	Seq                  uint64           `protobuf:"varint,1,opt,name=seq,proto3" json:"seq,omitempty"`
	ErrCode              common.ErrCode   `protobuf:"varint,2,opt,name=errCode,proto3,enum=common.ErrCode" json:"errCode,omitempty"`
	ErrMsg               string           `protobuf:"bytes,3,opt,name=errMsg,proto3" json:"errMsg,omitempty"`
	EniPrimaryIP         *common.IPObject `protobuf:"bytes,4,opt,name=eniPrimaryIP,proto3" json:"eniPrimaryIP,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *AllocateEniResp) Reset()         { *m = AllocateEniResp{} }
func (m *AllocateEniResp) String() string { return proto.CompactTextString(m) }
func (*AllocateEniResp) ProtoMessage()    {}
func (*AllocateEniResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_967af07f722e7296, []int{21}
}

func (m *AllocateEniResp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AllocateEniResp.Unmarshal(m, b)
}
func (m *AllocateEniResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AllocateEniResp.Marshal(b, m, deterministic)
}
func (m *AllocateEniResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AllocateEniResp.Merge(m, src)
}
func (m *AllocateEniResp) XXX_Size() int {
	return xxx_messageInfo_AllocateEniResp.Size(m)
}
func (m *AllocateEniResp) XXX_DiscardUnknown() {
	xxx_messageInfo_AllocateEniResp.DiscardUnknown(m)
}

var xxx_messageInfo_AllocateEniResp proto.InternalMessageInfo

func (m *AllocateEniResp) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *AllocateEniResp) GetErrCode() common.ErrCode {
	if m != nil {
		return m.ErrCode
	}
	return common.ErrCode_ERROR_OK
}

func (m *AllocateEniResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

func (m *AllocateEniResp) GetEniPrimaryIP() *common.IPObject {
	if m != nil {
		return m.EniPrimaryIP
	}
	return nil
}

type ReleaseEniReq struct {
	Seq                  uint64   `protobuf:"varint,1,opt,name=seq,proto3" json:"seq,omitempty"`
	InstanceID           string   `protobuf:"bytes,2,opt,name=instanceID,proto3" json:"instanceID,omitempty"`
	EniPrimaryIP         string   `protobuf:"bytes,3,opt,name=eniPrimaryIP,proto3" json:"eniPrimaryIP,omitempty"`
	Index                uint64   `protobuf:"varint,4,opt,name=index,proto3" json:"index,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReleaseEniReq) Reset()         { *m = ReleaseEniReq{} }
func (m *ReleaseEniReq) String() string { return proto.CompactTextString(m) }
func (*ReleaseEniReq) ProtoMessage()    {}
func (*ReleaseEniReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_967af07f722e7296, []int{22}
}

func (m *ReleaseEniReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReleaseEniReq.Unmarshal(m, b)
}
func (m *ReleaseEniReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReleaseEniReq.Marshal(b, m, deterministic)
}
func (m *ReleaseEniReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReleaseEniReq.Merge(m, src)
}
func (m *ReleaseEniReq) XXX_Size() int {
	return xxx_messageInfo_ReleaseEniReq.Size(m)
}
func (m *ReleaseEniReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ReleaseEniReq.DiscardUnknown(m)
}

var xxx_messageInfo_ReleaseEniReq proto.InternalMessageInfo

func (m *ReleaseEniReq) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *ReleaseEniReq) GetInstanceID() string {
	if m != nil {
		return m.InstanceID
	}
	return ""
}

func (m *ReleaseEniReq) GetEniPrimaryIP() string {
	if m != nil {
		return m.EniPrimaryIP
	}
	return ""
}

func (m *ReleaseEniReq) GetIndex() uint64 {
	if m != nil {
		return m.Index
	}
	return 0
}

type ReleaseEniResp struct {
	Seq                  uint64         `protobuf:"varint,1,opt,name=seq,proto3" json:"seq,omitempty"`
	ErrCode              common.ErrCode `protobuf:"varint,2,opt,name=errCode,proto3,enum=common.ErrCode" json:"errCode,omitempty"`
	ErrMsg               string         `protobuf:"bytes,3,opt,name=errMsg,proto3" json:"errMsg,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *ReleaseEniResp) Reset()         { *m = ReleaseEniResp{} }
func (m *ReleaseEniResp) String() string { return proto.CompactTextString(m) }
func (*ReleaseEniResp) ProtoMessage()    {}
func (*ReleaseEniResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_967af07f722e7296, []int{23}
}

func (m *ReleaseEniResp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReleaseEniResp.Unmarshal(m, b)
}
func (m *ReleaseEniResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReleaseEniResp.Marshal(b, m, deterministic)
}
func (m *ReleaseEniResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReleaseEniResp.Merge(m, src)
}
func (m *ReleaseEniResp) XXX_Size() int {
	return xxx_messageInfo_ReleaseEniResp.Size(m)
}
func (m *ReleaseEniResp) XXX_DiscardUnknown() {
	xxx_messageInfo_ReleaseEniResp.DiscardUnknown(m)
}

var xxx_messageInfo_ReleaseEniResp proto.InternalMessageInfo

func (m *ReleaseEniResp) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *ReleaseEniResp) GetErrCode() common.ErrCode {
	if m != nil {
		return m.ErrCode
	}
	return common.ErrCode_ERROR_OK
}

func (m *ReleaseEniResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

type TransIPStatusReq struct {
	Seq                  uint64   `protobuf:"varint,1,opt,name=seq,proto3" json:"seq,omitempty"`
	Address              string   `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	SubnetID             string   `protobuf:"bytes,3,opt,name=subnetID,proto3" json:"subnetID,omitempty"`
	SrcStatus            string   `protobuf:"bytes,4,opt,name=srcStatus,proto3" json:"srcStatus,omitempty"`
	DestStatus           string   `protobuf:"bytes,5,opt,name=destStatus,proto3" json:"destStatus,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TransIPStatusReq) Reset()         { *m = TransIPStatusReq{} }
func (m *TransIPStatusReq) String() string { return proto.CompactTextString(m) }
func (*TransIPStatusReq) ProtoMessage()    {}
func (*TransIPStatusReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_967af07f722e7296, []int{24}
}

func (m *TransIPStatusReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TransIPStatusReq.Unmarshal(m, b)
}
func (m *TransIPStatusReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TransIPStatusReq.Marshal(b, m, deterministic)
}
func (m *TransIPStatusReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransIPStatusReq.Merge(m, src)
}
func (m *TransIPStatusReq) XXX_Size() int {
	return xxx_messageInfo_TransIPStatusReq.Size(m)
}
func (m *TransIPStatusReq) XXX_DiscardUnknown() {
	xxx_messageInfo_TransIPStatusReq.DiscardUnknown(m)
}

var xxx_messageInfo_TransIPStatusReq proto.InternalMessageInfo

func (m *TransIPStatusReq) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *TransIPStatusReq) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *TransIPStatusReq) GetSubnetID() string {
	if m != nil {
		return m.SubnetID
	}
	return ""
}

func (m *TransIPStatusReq) GetSrcStatus() string {
	if m != nil {
		return m.SrcStatus
	}
	return ""
}

func (m *TransIPStatusReq) GetDestStatus() string {
	if m != nil {
		return m.DestStatus
	}
	return ""
}

type TransIPStatusResp struct {
	Seq                  uint64         `protobuf:"varint,1,opt,name=seq,proto3" json:"seq,omitempty"`
	ErrCode              common.ErrCode `protobuf:"varint,2,opt,name=errCode,proto3,enum=common.ErrCode" json:"errCode,omitempty"`
	ErrMsg               string         `protobuf:"bytes,3,opt,name=errMsg,proto3" json:"errMsg,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *TransIPStatusResp) Reset()         { *m = TransIPStatusResp{} }
func (m *TransIPStatusResp) String() string { return proto.CompactTextString(m) }
func (*TransIPStatusResp) ProtoMessage()    {}
func (*TransIPStatusResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_967af07f722e7296, []int{25}
}

func (m *TransIPStatusResp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TransIPStatusResp.Unmarshal(m, b)
}
func (m *TransIPStatusResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TransIPStatusResp.Marshal(b, m, deterministic)
}
func (m *TransIPStatusResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransIPStatusResp.Merge(m, src)
}
func (m *TransIPStatusResp) XXX_Size() int {
	return xxx_messageInfo_TransIPStatusResp.Size(m)
}
func (m *TransIPStatusResp) XXX_DiscardUnknown() {
	xxx_messageInfo_TransIPStatusResp.DiscardUnknown(m)
}

var xxx_messageInfo_TransIPStatusResp proto.InternalMessageInfo

func (m *TransIPStatusResp) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *TransIPStatusResp) GetErrCode() common.ErrCode {
	if m != nil {
		return m.ErrCode
	}
	return common.ErrCode_ERROR_OK
}

func (m *TransIPStatusResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

func init() {
	proto.RegisterType((*AddSubnetReq)(nil), "cloudnetservice.AddSubnetReq")
	proto.RegisterType((*AddSubnetResp)(nil), "cloudnetservice.AddSubnetResp")
	proto.RegisterType((*DeleteSubnetReq)(nil), "cloudnetservice.DeleteSubnetReq")
	proto.RegisterType((*DeleteSubnetResp)(nil), "cloudnetservice.DeleteSubnetResp")
	proto.RegisterType((*ListSubnetReq)(nil), "cloudnetservice.ListSubnetReq")
	proto.RegisterType((*ListSubnetResp)(nil), "cloudnetservice.ListSubnetResp")
	proto.RegisterType((*ChangeSubnetReq)(nil), "cloudnetservice.ChangeSubnetReq")
	proto.RegisterType((*ChangeSubnetResp)(nil), "cloudnetservice.ChangeSubnetResp")
	proto.RegisterType((*GetAvailableSubnetReq)(nil), "cloudnetservice.GetAvailableSubnetReq")
	proto.RegisterType((*GetAvailableSubnetResp)(nil), "cloudnetservice.GetAvailableSubnetResp")
	proto.RegisterType((*AllocateIPReq)(nil), "cloudnetservice.AllocateIPReq")
	proto.RegisterType((*AllocateIPResp)(nil), "cloudnetservice.AllocateIPResp")
	proto.RegisterType((*ReleaseIPReq)(nil), "cloudnetservice.ReleaseIPReq")
	proto.RegisterType((*ReleaseIPResp)(nil), "cloudnetservice.ReleaseIPResp")
	proto.RegisterType((*CleanFixedIPReq)(nil), "cloudnetservice.CleanFixedIPReq")
	proto.RegisterType((*CleanFixedIPResp)(nil), "cloudnetservice.CleanFixedIPResp")
	proto.RegisterType((*CleanEniReq)(nil), "cloudnetservice.CleanEniReq")
	proto.RegisterType((*CleanEniResp)(nil), "cloudnetservice.CleanEniResp")
	proto.RegisterType((*ListIPsReq)(nil), "cloudnetservice.ListIPsReq")
	proto.RegisterType((*ListIPsResp)(nil), "cloudnetservice.ListIPsResp")
	proto.RegisterType((*AllocateEniReq)(nil), "cloudnetservice.AllocateEniReq")
	proto.RegisterType((*AllocateEniResp)(nil), "cloudnetservice.AllocateEniResp")
	proto.RegisterType((*ReleaseEniReq)(nil), "cloudnetservice.ReleaseEniReq")
	proto.RegisterType((*ReleaseEniResp)(nil), "cloudnetservice.ReleaseEniResp")
	proto.RegisterType((*TransIPStatusReq)(nil), "cloudnetservice.TransIPStatusReq")
	proto.RegisterType((*TransIPStatusResp)(nil), "cloudnetservice.TransIPStatusResp")
}

func init() { proto.RegisterFile("cloudnetservice.proto", fileDescriptor_967af07f722e7296) }

var fileDescriptor_967af07f722e7296 = []byte{
	// 2817 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xdc, 0x5a, 0x5d, 0x6c, 0x14, 0xd7,
	0xf5, 0xd7, 0x5d, 0x7f, 0x80, 0xaf, 0x3f, 0xb9, 0x31, 0x64, 0xff, 0x1b, 0x03, 0x93, 0xc9, 0x5f,
	0x81, 0xff, 0xfc, 0x31, 0x9b, 0x4c, 0x68, 0x12, 0x6d, 0x13, 0x25, 0x63, 0x6f, 0xdc, 0x2e, 0x76,
	0xa8, 0x35, 0x4e, 0xd5, 0xf6, 0xad, 0xe3, 0xdd, 0x6b, 0x7b, 0xc2, 0x7a, 0x66, 0x98, 0x19, 0x13,
	0x5a, 0x84, 0xe4, 0x52, 0x02, 0x0e, 0x85, 0x60, 0xa6, 0xa1, 0x04, 0x42, 0x42, 0x89, 0x92, 0x94,
	0xa6, 0x6a, 0x4c, 0xd2, 0x94, 0x00, 0x21, 0xe9, 0x5b, 0x1f, 0x5a, 0xa9, 0x0f, 0xae, 0xd4, 0xc7,
	0xaa, 0x6a, 0xbc, 0x6b, 0xbb, 0xaa, 0x94, 0x3e, 0xf4, 0xa9, 0x4f, 0xd5, 0xfd, 0x98, 0x4f, 0xaf,
	0xb1, 0x69, 0x42, 0xea, 0x16, 0xa4, 0x99, 0x7b, 0xcf, 0xb9, 0x7b, 0xcf, 0xef, 0x9e, 0x7b, 0xce,
	0xb9, 0xe7, 0xdc, 0x31, 0xdc, 0x58, 0x2c, 0x9b, 0x13, 0x25, 0x03, 0xbb, 0x0e, 0xb6, 0xf7, 0xeb,
	0x45, 0xbc, 0xd3, 0xb2, 0x4d, 0xd7, 0x44, 0xed, 0x09, 0x72, 0xa6, 0x6f, 0x54, 0x77, 0xc7, 0x26,
	0x86, 0x77, 0x16, 0xcd, 0xf1, 0xec, 0x33, 0xd8, 0x28, 0x62, 0xc3, 0xcd, 0x0e, 0xef, 0xed, 0x1e,
	0x2e, 0x3a, 0xd9, 0xe1, 0xa2, 0xd3, 0x6d, 0x60, 0xf7, 0x39, 0xd3, 0xde, 0x9b, 0xd5, 0x2c, 0x3d,
	0x4b, 0x67, 0x28, 0x9a, 0xe5, 0x6c, 0xd1, 0x1c, 0x1f, 0x37, 0x0d, 0xfe, 0x62, 0x13, 0x67, 0xba,
	0x46, 0x4d, 0x73, 0xb4, 0x8c, 0xe9, 0x40, 0xcd, 0x30, 0x4c, 0x57, 0x73, 0x75, 0xd3, 0x70, 0x38,
	0x77, 0x07, 0xfb, 0x6d, 0xf7, 0x28, 0x36, 0xba, 0x9d, 0xe7, 0xb4, 0xd1, 0x51, 0x6c, 0x67, 0x4d,
	0x8b, 0x8e, 0x58, 0x3a, 0x5a, 0xfc, 0xa4, 0x1e, 0xb6, 0x28, 0xa5, 0xd2, 0xd0, 0xc4, 0xb0, 0x81,
	0x5d, 0x15, 0xef, 0x43, 0x5b, 0x61, 0x9d, 0x83, 0xf7, 0xa5, 0x81, 0x00, 0xb6, 0xd7, 0xf7, 0xb4,
	0x7a, 0x0a, 0x94, 0x48, 0x5f, 0x26, 0x0f, 0x95, 0x3c, 0xd0, 0x36, 0xd8, 0xb0, 0xdf, 0x2a, 0x16,
	0xf2, 0xe9, 0x94, 0x00, 0xb6, 0x37, 0xf5, 0x6c, 0xf0, 0x94, 0x36, 0x89, 0x51, 0x64, 0xf6, 0x52,
	0xd9, 0x0b, 0xfd, 0x3f, 0x6c, 0xb4, 0xf1, 0xa8, 0x6e, 0x1a, 0xe9, 0x3a, 0x3a, 0xf2, 0x2e, 0x4f,
	0xe9, 0x90, 0x38, 0x49, 0xe6, 0x6f, 0x95, 0xbf, 0xd1, 0x7d, 0xb0, 0xfe, 0xbb, 0xa6, 0x81, 0xd3,
	0xf5, 0x74, 0x68, 0xbb, 0xa7, 0xb4, 0x48, 0x94, 0x20, 0xd3, 0xa7, 0x4a, 0x9f, 0xe8, 0x21, 0xb8,
	0xde, 0xa1, 0x40, 0x0b, 0xf9, 0x74, 0x03, 0x1d, 0x78, 0xb7, 0xa7, 0x74, 0x4a, 0x01, 0x51, 0x0e,
	0x5a, 0x6a, 0xd0, 0x42, 0x5f, 0x86, 0x90, 0xb5, 0x7b, 0xf5, 0x92, 0x9d, 0x6e, 0xa4, 0x3f, 0xbb,
	0xc7, 0x53, 0xd2, 0x52, 0x84, 0x2c, 0x47, 0xda, 0x6a, 0xa4, 0x8d, 0xbe, 0x0d, 0xdb, 0xc6, 0x75,
	0xa3, 0x30, 0xb8, 0x67, 0x62, 0x7c, 0x10, 0xdb, 0x4f, 0x19, 0x7a, 0x7a, 0x9d, 0x00, 0xb6, 0x37,
	0xf4, 0x3c, 0xea, 0x29, 0x5f, 0x92, 0x12, 0x2c, 0xf9, 0xbe, 0x71, 0xdd, 0x10, 0x6c, 0x4c, 0xb6,
	0x1b, 0x97, 0x04, 0xdd, 0x12, 0x8c, 0x89, 0xf1, 0x61, 0x6c, 0x0b, 0x23, 0xa6, 0x2d, 0x60, 0xad,
	0x38, 0x26, 0x60, 0x43, 0x57, 0x13, 0x3f, 0xca, 0xfd, 0x19, 0x78, 0xca, 0x1f, 0x01, 0x7c, 0x46,
	0x8a, 0x6d, 0x83, 0xbc, 0xb1, 0x32, 0xf5, 0x4a, 0xe5, 0xc3, 0x1b, 0x73, 0x37, 0x4e, 0x57, 0x7e,
	0x3e, 0x3d, 0xff, 0xd1, 0xe9, 0x85, 0x99, 0x0f, 0xaa, 0xef, 0x1e, 0x9e, 0x05, 0x64, 0x0b, 0x66,
	0x01, 0xd3, 0xf0, 0x2c, 0xe0, 0xda, 0x9b, 0x05, 0xc1, 0x72, 0x67, 0x41, 0x74, 0x59, 0xcf, 0x03,
	0x74, 0x18, 0x1c, 0x14, 0x44, 0x07, 0xef, 0x13, 0x73, 0x82, 0xf8, 0xa0, 0xb8, 0x43, 0x10, 0xe9,
	0x4f, 0x49, 0x6f, 0xbf, 0x55, 0xec, 0x3e, 0x40, 0xfe, 0x11, 0x2a, 0x9b, 0x88, 0x90, 0x35, 0xab,
	0xdb, 0x19, 0xd3, 0x8c, 0xd1, 0x31, 0x4d, 0x27, 0x0c, 0xa2, 0x78, 0x42, 0x26, 0x6d, 0x5f, 0x08,
	0xe9, 0xb3, 0x76, 0x38, 0x41, 0x28, 0x95, 0x4a, 0x92, 0x1f, 0xd9, 0xf9, 0x00, 0xf9, 0x9f, 0x95,
	0x77, 0x89, 0x87, 0xc4, 0x8b, 0x00, 0xb6, 0x46, 0x96, 0xe7, 0x58, 0x2b, 0x9b, 0xd9, 0x93, 0x70,
	0x1d, 0xb6, 0xed, 0x5e, 0xb3, 0x84, 0xa9, 0xa1, 0xb5, 0xc9, 0xed, 0x3b, 0xb9, 0x13, 0x3c, 0xc5,
	0xc8, 0x3d, 0x1b, 0x3d, 0x05, 0x49, 0xfe, 0x20, 0xd9, 0x6f, 0xa8, 0x7e, 0x83, 0xd8, 0x1f, 0xb6,
	0xed, 0xa7, 0x9d, 0xd1, 0x98, 0xfd, 0x31, 0x92, 0xcc, 0xdf, 0x2a, 0x7f, 0x8b, 0xaf, 0xd5, 0xc1,
	0xf6, 0x3c, 0x2e, 0x63, 0x17, 0xff, 0xf7, 0xba, 0x42, 0xee, 0x3a, 0xf0, 0x94, 0x5f, 0x02, 0xb8,
	0x5b, 0x4a, 0x2e, 0x95, 0x98, 0xdb, 0x8f, 0x17, 0xcf, 0xbd, 0x71, 0xdb, 0xe6, 0x26, 0x8f, 0x22,
	0xfc, 0x05, 0xd8, 0x97, 0x70, 0x48, 0x7c, 0x1d, 0xc0, 0x8e, 0x38, 0xea, 0x35, 0x68, 0x45, 0x33,
	0x29, 0xd8, 0x3a, 0xa0, 0x3b, 0xee, 0xbf, 0xdd, 0x86, 0xa2, 0xe6, 0x51, 0xbf, 0x5a, 0xf3, 0xb0,
	0x3d, 0xc5, 0x84, 0x3b, 0xa4, 0xf8, 0x0a, 0xe4, 0x8d, 0xd5, 0x8b, 0x6f, 0xce, 0x5f, 0xf8, 0x41,
	0x60, 0x1a, 0x95, 0xa9, 0xb3, 0x0b, 0x97, 0x2e, 0x33, 0xd3, 0x90, 0x9f, 0x40, 0x8f, 0x7f, 0x86,
	0xed, 0x17, 0x0e, 0x89, 0x55, 0x00, 0xdb, 0xa2, 0xf2, 0xd6, 0xde, 0xa6, 0xa2, 0x3c, 0x5c, 0xc7,
	0x54, 0xe4, 0xa4, 0xeb, 0x85, 0xba, 0xed, 0xcd, 0xf2, 0x5d, 0xbe, 0xb8, 0x5e, 0x72, 0xc0, 0x33,
	0xe4, 0x5c, 0x24, 0x1f, 0x28, 0xfb, 0x0d, 0xd5, 0x6f, 0x88, 0x1f, 0xd4, 0xc1, 0xf6, 0x5e, 0xb2,
	0xf0, 0x3b, 0x12, 0x60, 0xa2, 0xfb, 0x5d, 0xb7, 0xda, 0x93, 0x71, 0x1b, 0x6c, 0x70, 0x5c, 0xcd,
	0x65, 0x91, 0xa6, 0x95, 0xcf, 0x4e, 0x29, 0x32, 0x7b, 0xa9, 0xec, 0x55, 0xe3, 0x14, 0x6c, 0xf8,
	0x9c, 0x4f, 0xc1, 0x73, 0xc0, 0x53, 0xce, 0x00, 0xd8, 0x27, 0x25, 0x75, 0x24, 0xa3, 0xea, 0x2b,
	0xef, 0x57, 0x5f, 0xba, 0xce, 0x6c, 0x6f, 0xfe, 0xf8, 0xd5, 0xea, 0xe4, 0xf7, 0x92, 0x61, 0x29,
	0x72, 0xf8, 0x71, 0xf8, 0xfd, 0xa8, 0xf0, 0xd9, 0xa2, 0x12, 0x9d, 0x46, 0xcc, 0x09, 0x0f, 0xf0,
	0xc8, 0x13, 0x47, 0xb5, 0x06, 0x23, 0xcf, 0x9f, 0x52, 0x70, 0xe3, 0x57, 0xb0, 0xab, 0xec, 0xd7,
	0xf4, 0xb2, 0x36, 0x5c, 0xfe, 0xcf, 0x38, 0xc5, 0x72, 0x6f, 0x03, 0x4f, 0x79, 0x0b, 0xc0, 0x82,
	0x54, 0x1b, 0xfb, 0x6a, 0x36, 0x3f, 0x38, 0x93, 0xd8, 0xec, 0xdf, 0x42, 0xdf, 0xf8, 0x7c, 0xce,
	0x23, 0xcd, 0xd2, 0x03, 0x7a, 0xf7, 0x2e, 0x12, 0xaa, 0xfe, 0x02, 0xe0, 0xa6, 0x5a, 0x30, 0xd7,
	0x60, 0xc8, 0x7a, 0x12, 0x36, 0x32, 0x9f, 0xa0, 0xea, 0x5f, 0x26, 0x62, 0xb1, 0x19, 0xd8, 0x38,
	0x99, 0xbf, 0x55, 0xfe, 0x16, 0xe7, 0x1b, 0x61, 0xab, 0x52, 0x2e, 0x9b, 0x45, 0xcd, 0xc5, 0x85,
	0xc1, 0x55, 0xd9, 0x51, 0x34, 0x06, 0xa5, 0x56, 0x1b, 0x83, 0xb2, 0x70, 0x5d, 0xb1, 0x3c, 0xe1,
	0xb8, 0xd8, 0xe6, 0xeb, 0x62, 0x7a, 0xe0, 0x34, 0xd9, 0x6f, 0xa8, 0x7e, 0x03, 0x3d, 0x02, 0x9b,
	0x0c, 0x6d, 0x1c, 0x3b, 0x96, 0x56, 0xf4, 0x8d, 0xeb, 0x7f, 0x3c, 0x65, 0x93, 0x14, 0x52, 0xe5,
	0xb0, 0xa9, 0x86, 0x4d, 0x22, 0xc9, 0x32, 0x4b, 0x7b, 0xb4, 0x71, 0xcc, 0x13, 0x26, 0x26, 0x89,
	0xd3, 0x64, 0xbf, 0xa1, 0xfa, 0x0d, 0xf4, 0x04, 0x6c, 0x2e, 0x9a, 0x86, 0xab, 0xe9, 0x06, 0xb6,
	0x0b, 0x79, 0x5e, 0x39, 0x6c, 0xf6, 0x94, 0x8c, 0x14, 0xa5, 0xcb, 0xd1, 0x8e, 0x1a, 0xed, 0x10,
	0x17, 0x18, 0x33, 0x1d, 0x97, 0x96, 0x0c, 0xbe, 0x0b, 0x10, 0x82, 0x4c, 0x9f, 0x2a, 0x7d, 0x12,
	0xef, 0xc3, 0x86, 0x5e, 0xc8, 0xa7, 0xd7, 0x47, 0xbc, 0x8f, 0x52, 0x64, 0xf6, 0x52, 0xd9, 0x0b,
	0x3d, 0x06, 0xd7, 0xe9, 0x4e, 0x9f, 0x7e, 0x00, 0x97, 0xd2, 0x4d, 0x02, 0xd8, 0xbe, 0xbe, 0x47,
	0xf4, 0x94, 0xad, 0x92, 0x4f, 0x93, 0x3b, 0xab, 0x2f, 0xcf, 0x54, 0xa6, 0xdf, 0xaa, 0x4c, 0x1d,
	0x5d, 0x7c, 0xfe, 0x64, 0xe5, 0x95, 0x1b, 0x95, 0x77, 0xce, 0x17, 0x06, 0x55, 0x9f, 0x8d, 0xfa,
	0x61, 0xcb, 0x5e, 0x8c, 0xad, 0xfc, 0x84, 0x4d, 0xcb, 0xbf, 0x34, 0xa4, 0xd2, 0xb6, 0x79, 0xca,
	0xff, 0x4a, 0x31, 0x86, 0xdc, 0xe9, 0xff, 0x76, 0xee, 0x57, 0xaf, 0xce, 0x9f, 0x39, 0x57, 0x3d,
	0x7b, 0x75, 0xf1, 0xec, 0xfb, 0x6a, 0x6c, 0x4c, 0xee, 0x37, 0x29, 0x4f, 0xf9, 0x75, 0x0a, 0x3a,
	0x52, 0xdc, 0x44, 0xe4, 0x4e, 0x26, 0xbd, 0x30, 0x58, 0xb9, 0x70, 0xa5, 0xf2, 0xea, 0x64, 0x3c,
	0x89, 0x8c, 0x44, 0x69, 0x7f, 0x33, 0x67, 0x41, 0xb8, 0x3f, 0xb3, 0xc0, 0x57, 0xfc, 0x2c, 0xa0,
	0x9a, 0x99, 0x05, 0x6c, 0xe1, 0xb3, 0x20, 0xa6, 0xee, 0xdf, 0x01, 0xf4, 0xdb, 0x64, 0x49, 0xb3,
	0x4c, 0xde, 0x48, 0x58, 0x5c, 0x12, 0xe1, 0x90, 0x1a, 0x3b, 0xf0, 0xff, 0x40, 0x2e, 0xe1, 0x18,
	0x0e, 0x21, 0x71, 0xf1, 0x84, 0xe0, 0x62, 0x87, 0x4e, 0xd1, 0xcd, 0x47, 0x13, 0x3c, 0xd1, 0xb2,
	0x86, 0x4a, 0xa5, 0xe8, 0x08, 0x15, 0x1b, 0x7a, 0x28, 0x2f, 0x84, 0x4a, 0x58, 0x43, 0x4a, 0xbe,
	0xaf, 0x7f, 0x60, 0x28, 0xaf, 0xec, 0xee, 0x1b, 0xe8, 0x1f, 0x52, 0x76, 0xe7, 0xfb, 0x94, 0xa1,
	0x81, 0xfe, 0xfc, 0xee, 0xbe, 0x21, 0xa5, 0x2f, 0x3f, 0xb0, 0x9b, 0x84, 0x95, 0x3f, 0x00, 0xd8,
	0x16, 0x55, 0xe3, 0x1a, 0x0c, 0x27, 0xbb, 0x60, 0x4a, 0xb7, 0x78, 0x28, 0xe9, 0xf0, 0x25, 0x15,
	0x06, 0xbf, 0x36, 0xfc, 0x2c, 0x2e, 0xba, 0x3d, 0xc8, 0x53, 0xda, 0xa5, 0x94, 0x6e, 0xc9, 0x4d,
	0xba, 0x25, 0x98, 0x94, 0xa6, 0xa6, 0x74, 0x4b, 0x3c, 0x5e, 0x0f, 0x5b, 0x54, 0x5c, 0xc6, 0x9a,
	0xb3, 0xda, 0x08, 0x12, 0x09, 0x06, 0xa9, 0x55, 0x05, 0x83, 0x88, 0x4f, 0xd7, 0xad, 0xca, 0xa7,
	0x7b, 0x61, 0x0b, 0x6f, 0x46, 0x03, 0xc8, 0x56, 0x4f, 0xe9, 0x92, 0x62, 0x0c, 0x39, 0xd6, 0x53,
	0x63, 0xbd, 0x64, 0x60, 0x68, 0xb8, 0xdd, 0xc0, 0x90, 0xfb, 0x1b, 0xf0, 0x94, 0xbf, 0x02, 0xf8,
	0x4d, 0x29, 0xa6, 0x1f, 0x79, 0xc3, 0xe2, 0xb1, 0xe3, 0xd5, 0x97, 0x3e, 0x66, 0x4e, 0x34, 0x7f,
	0xfe, 0x48, 0x61, 0xd0, 0xf7, 0x9d, 0xd0, 0x61, 0x42, 0x27, 0x89, 0x61, 0x4a, 0x38, 0xc9, 0x29,
	0x80, 0x4e, 0x24, 0x9d, 0x64, 0x39, 0x4f, 0x48, 0x9a, 0xbd, 0x65, 0x96, 0xba, 0x1f, 0x88, 0x30,
	0x02, 0x2f, 0xa1, 0x5c, 0xe6, 0x2a, 0xb7, 0x6f, 0xe5, 0x17, 0x01, 0x6c, 0x8d, 0x2c, 0x76, 0x0d,
	0x66, 0x50, 0x2f, 0x36, 0xc0, 0xf6, 0xde, 0x32, 0xd6, 0x0c, 0x1a, 0x30, 0x57, 0x69, 0xb1, 0x61,
	0x4a, 0x94, 0x5a, 0x39, 0x25, 0xfa, 0xe2, 0xce, 0xba, 0x5e, 0xd8, 0xf2, 0x9c, 0x69, 0xef, 0x2d,
	0x9b, 0x5a, 0xf4, 0xc0, 0x63, 0x66, 0x1e, 0x65, 0xc8, 0xb1, 0x9e, 0x1a, 0xeb, 0x45, 0x27, 0xe9,
	0xd7, 0x8d, 0x12, 0x3f, 0x00, 0xe3, 0x93, 0x10, 0x86, 0x1c, 0xeb, 0xa9, 0xb1, 0x1e, 0x59, 0xb3,
	0x56, 0x2a, 0xd9, 0xd8, 0x71, 0xf8, 0x31, 0xc8, 0xd6, 0xcc, 0x69, 0xb2, 0xdf, 0x50, 0xfd, 0x46,
	0xee, 0x58, 0xca, 0x53, 0xbe, 0x9f, 0x82, 0x86, 0x94, 0xdc, 0x0c, 0x79, 0x73, 0xf5, 0xda, 0xf3,
	0xf3, 0xd3, 0x47, 0x03, 0xf7, 0xf0, 0x0f, 0xaa, 0xca, 0xcc, 0xf5, 0x85, 0x77, 0x2f, 0xf9, 0xae,
	0x12, 0xe4, 0x83, 0xb5, 0x0f, 0x99, 0xd8, 0x12, 0x67, 0x41, 0x00, 0x64, 0x1a, 0xa0, 0x93, 0x49,
	0x8f, 0x59, 0x36, 0x47, 0xbc, 0x8d, 0x43, 0x25, 0x2a, 0x8e, 0x50, 0x89, 0x77, 0xd1, 0xe2, 0x62,
	0x64, 0xa2, 0xec, 0x60, 0x97, 0x0c, 0xe1, 0x10, 0xe2, 0xe7, 0x8b, 0x5f, 0x77, 0xc4, 0x74, 0xb0,
	0x06, 0xbd, 0xe6, 0x1f, 0x29, 0xd8, 0x4c, 0x41, 0x3e, 0x65, 0xe8, 0xab, 0xad, 0x36, 0x58, 0xbe,
	0x93, 0x5a, 0x21, 0xdf, 0x39, 0x03, 0x68, 0xc2, 0x63, 0xda, 0x45, 0x16, 0xdc, 0xd7, 0xf7, 0x1c,
	0xf4, 0x94, 0x03, 0x92, 0x4f, 0x93, 0xc7, 0x79, 0xc2, 0x73, 0xf3, 0x46, 0x65, 0xea, 0x2a, 0xbb,
	0xbe, 0xaa, 0xbe, 0x30, 0x59, 0xbd, 0xf0, 0x82, 0x6e, 0x7d, 0x7a, 0xf3, 0xc4, 0x27, 0x93, 0xd3,
	0xd5, 0x5f, 0x5c, 0xae, 0x1e, 0x39, 0xf5, 0xc9, 0xe4, 0xe9, 0xe8, 0x90, 0xb9, 0x9b, 0xe7, 0x2b,
	0x57, 0x8e, 0x6a, 0x45, 0x57, 0xdf, 0x8f, 0x59, 0x41, 0x41, 0x03, 0x2d, 0x63, 0x7e, 0x7a, 0xf3,
	0x44, 0x65, 0xe6, 0xe6, 0xc2, 0xb1, 0xf7, 0x2b, 0xef, 0x5c, 0xaf, 0x9c, 0xbb, 0x4c, 0x6a, 0x8e,
	0x0f, 0x2f, 0xcc, 0x5d, 0x3b, 0xb9, 0x38, 0x79, 0x5e, 0xf5, 0xe5, 0xe6, 0xa6, 0x80, 0xa7, 0x1c,
	0x01, 0xf0, 0xab, 0x52, 0x0b, 0x5d, 0xf7, 0x1e, 0xa2, 0x3b, 0xbc, 0x4f, 0x96, 0x98, 0x75, 0xce,
	0x5d, 0x9b, 0x9c, 0xbb, 0xf6, 0xb6, 0x61, 0x96, 0xf0, 0xdc, 0xb5, 0xe3, 0x0c, 0xcf, 0xfc, 0xf9,
	0x23, 0xf3, 0x3f, 0xbd, 0xb1, 0x78, 0xf6, 0x3d, 0x3f, 0x2f, 0x0a, 0x4a, 0x18, 0xb6, 0xec, 0x47,
	0xd1, 0xc3, 0x09, 0xc3, 0x5b, 0x92, 0x59, 0x50, 0xeb, 0xe2, 0x00, 0xc4, 0x9c, 0x30, 0xa2, 0x95,
	0x1d, 0x2c, 0x1c, 0x12, 0x5f, 0x03, 0xb0, 0x25, 0x54, 0xfe, 0x1a, 0xb4, 0x8e, 0xb7, 0x53, 0x10,
	0x0e, 0xe8, 0x8e, 0x5b, 0x18, 0x74, 0x88, 0x71, 0x74, 0x44, 0xe0, 0x31, 0x3c, 0x9b, 0x60, 0xa3,
	0x39, 0x32, 0xe2, 0x60, 0x97, 0xc2, 0xa9, 0x53, 0x79, 0x0f, 0x75, 0xc2, 0x86, 0xb2, 0x3e, 0xae,
	0xbb, 0x54, 0x48, 0x9d, 0xca, 0x3a, 0x84, 0xca, 0x2a, 0x55, 0x1a, 0x0b, 0xfd, 0xb2, 0x74, 0x53,
	0x10, 0x83, 0x69, 0x98, 0x0b, 0xc2, 0x6d, 0x26, 0x52, 0x8f, 0xd0, 0xd8, 0x15, 0x29, 0x3b, 0xd2,
	0x61, 0x28, 0xa6, 0x61, 0x29, 0x8c, 0xb9, 0xe9, 0x30, 0xa5, 0x58, 0xcf, 0x38, 0x7e, 0xee, 0xd0,
	0x15, 0x8d, 0xc6, 0x4d, 0x94, 0x17, 0x09, 0xb9, 0x9d, 0xbe, 0x5d, 0x43, 0x86, 0x8d, 0x19, 0x31,
	0xe2, 0x25, 0x40, 0x33, 0x25, 0xb2, 0x8c, 0x7f, 0x13, 0x6c, 0x24, 0x11, 0x60, 0xc2, 0x49, 0xb7,
	0x30, 0xbc, 0xac, 0x27, 0x1e, 0x05, 0xb0, 0x39, 0x50, 0x96, 0x63, 0xd5, 0xd0, 0xd6, 0xff, 0xad,
	0xb4, 0x7b, 0xe1, 0x36, 0x6d, 0x8a, 0x6f, 0x53, 0x90, 0xca, 0x89, 0xb0, 0x4e, 0xb7, 0xfc, 0x8b,
	0xac, 0x25, 0xb9, 0x9c, 0x4a, 0x98, 0x04, 0x48, 0x90, 0x91, 0x72, 0xb7, 0x5e, 0x8a, 0x65, 0x0b,
	0x84, 0xba, 0xe1, 0xb8, 0x9a, 0x51, 0xc4, 0xbe, 0x33, 0xab, 0x11, 0x0a, 0x59, 0x39, 0xad, 0xff,
	0x99, 0x78, 0x76, 0x69, 0x1d, 0xd1, 0x7a, 0x7d, 0x5c, 0xeb, 0x9d, 0xb0, 0x41, 0x37, 0x4a, 0xf8,
	0x00, 0xdd, 0xc2, 0x7a, 0x95, 0x75, 0xc4, 0x0b, 0x00, 0xb6, 0xc7, 0x80, 0xdc, 0x29, 0xad, 0xec,
	0x82, 0x2d, 0xd8, 0xd0, 0x07, 0x6d, 0x7d, 0x5c, 0xb3, 0xbf, 0x53, 0x18, 0x5c, 0x2e, 0xd5, 0x55,
	0x63, 0xa3, 0xc4, 0x83, 0x41, 0x4a, 0xf3, 0x2f, 0x6b, 0x49, 0x4c, 0x08, 0x66, 0xb0, 0x62, 0xb4,
	0x50, 0x37, 0xf5, 0x51, 0xdd, 0x60, 0xd8, 0x16, 0x15, 0x7e, 0x87, 0x34, 0x23, 0xbe, 0x0c, 0x60,
	0xc7, 0x33, 0xb6, 0x66, 0x38, 0x85, 0xc1, 0x21, 0x6a, 0xa6, 0xb5, 0xd7, 0x99, 0x0e, 0x8f, 0x79,
	0xb6, 0x48, 0xbf, 0x1b, 0xf3, 0xc2, 0xba, 0x84, 0x17, 0x76, 0xc1, 0x26, 0xc7, 0x2e, 0xb2, 0x79,
	0xb9, 0x45, 0x84, 0x04, 0xa2, 0xbb, 0x12, 0x76, 0x5c, 0xce, 0x66, 0xbe, 0x1d, 0xa1, 0x88, 0x63,
	0x70, 0x43, 0x02, 0xd9, 0x1d, 0x52, 0x82, 0xfc, 0xb3, 0x0e, 0x92, 0x1a, 0x9a, 0x13, 0xa5, 0x3d,
	0xc1, 0xc7, 0x5c, 0x74, 0x14, 0xc0, 0xa6, 0xe0, 0x93, 0x16, 0xda, 0xbc, 0x33, 0xf9, 0x0d, 0x38,
	0xfa, 0x35, 0x2f, 0xb3, 0xe5, 0x56, 0x6c, 0xc7, 0x12, 0x73, 0x9e, 0x22, 0xa2, 0xf6, 0xc4, 0x27,
	0xbf, 0x4c, 0x92, 0x70, 0xf8, 0xf7, 0x73, 0x3f, 0x4c, 0xb5, 0x8b, 0x30, 0xbb, 0xff, 0xc1, 0x2c,
	0xd3, 0x61, 0x0e, 0x48, 0xe8, 0x04, 0x80, 0x2d, 0xd1, 0x0f, 0x23, 0x48, 0x58, 0x22, 0x2c, 0xf1,
	0xb5, 0x27, 0x73, 0xef, 0x0a, 0x23, 0x1c, 0x4b, 0x7c, 0x84, 0x23, 0x8a, 0x7d, 0x15, 0xca, 0x24,
	0x09, 0x14, 0x51, 0x8b, 0x14, 0x41, 0x84, 0x8e, 0x01, 0x16, 0xf2, 0x39, 0x98, 0xa5, 0x2b, 0x8f,
	0x7d, 0x5d, 0xc8, 0x6c, 0xbd, 0x25, 0xdf, 0xb1, 0xc4, 0x47, 0x3d, 0x65, 0x0b, 0x6a, 0x2d, 0xeb,
	0x8e, 0x1b, 0xc2, 0x88, 0x77, 0x29, 0x88, 0x0d, 0xa8, 0x3d, 0x04, 0x91, 0x25, 0x7c, 0xaa, 0x98,
	0xe8, 0xbd, 0x6d, 0x0d, 0xc5, 0x24, 0x2e, 0x9b, 0x6b, 0x28, 0x26, 0x79, 0xf1, 0x4b, 0x14, 0xd3,
	0x85, 0x5a, 0xd8, 0xbd, 0x24, 0x23, 0x67, 0x62, 0x3d, 0x8a, 0x06, 0x89, 0xad, 0x11, 0x34, 0xa6,
	0x45, 0xf6, 0xe9, 0x3d, 0x00, 0xd1, 0xd2, 0xeb, 0x43, 0x74, 0xff, 0x12, 0x91, 0x35, 0xaf, 0x42,
	0x33, 0xdb, 0x56, 0x35, 0xce, 0xb1, 0xc4, 0x7e, 0x4f, 0xd9, 0x8e, 0xd0, 0xc2, 0x8b, 0x1f, 0x54,
	0x4e, 0xfd, 0xa8, 0x72, 0x6a, 0x66, 0xfe, 0xa5, 0xcb, 0x5c, 0x6b, 0x35, 0x68, 0x14, 0x6c, 0x06,
	0xa5, 0x23, 0x60, 0x47, 0x74, 0xa3, 0xa4, 0xf9, 0xd3, 0x12, 0x1d, 0xc2, 0xf0, 0x72, 0xa2, 0xc6,
	0x6e, 0xc6, 0x2e, 0x80, 0x6a, 0xec, 0x66, 0xfc, 0x66, 0x43, 0x7c, 0xdc, 0x53, 0x04, 0xd4, 0xc6,
	0x52, 0x78, 0xdd, 0x62, 0xe9, 0x50, 0x26, 0xd1, 0xa7, 0xa0, 0x3a, 0x45, 0xba, 0x9f, 0xba, 0x95,
	0xd5, 0xf8, 0x0c, 0x44, 0x87, 0x53, 0x00, 0x36, 0x05, 0x55, 0x64, 0x0d, 0xa7, 0x8b, 0x96, 0xd3,
	0x35, 0x9c, 0x2e, 0x56, 0x80, 0x8a, 0x8f, 0x51, 0x2c, 0xac, 0xe6, 0x0e, 0xb1, 0xc4, 0xfb, 0x14,
	0xcb, 0x5d, 0x62, 0x1b, 0xc7, 0x62, 0xb3, 0x09, 0x08, 0x94, 0x37, 0x00, 0x6c, 0x8d, 0x85, 0x1f,
	0xb4, 0xd4, 0x78, 0x92, 0x81, 0x33, 0x23, 0xae, 0x34, 0xc4, 0xb1, 0xc4, 0x01, 0x4f, 0xd9, 0x81,
	0x3a, 0x2b, 0xa7, 0x5e, 0xae, 0x9e, 0x7c, 0xdd, 0x87, 0xc1, 0x32, 0xd5, 0x4c, 0x4d, 0x2a, 0x85,
	0x78, 0xb7, 0x88, 0x38, 0x44, 0x97, 0x4c, 0xc8, 0x32, 0x0a, 0x02, 0xf3, 0x92, 0x9f, 0x22, 0xf2,
	0x22, 0xa2, 0x96, 0x13, 0xc4, 0xeb, 0xac, 0x5a, 0x4e, 0x90, 0xa8, 0x42, 0x38, 0x46, 0x5e, 0x8f,
	0xd1, 0x32, 0x2c, 0x50, 0x60, 0x4d, 0x6a, 0x02, 0xe3, 0x08, 0x99, 0x2a, 0x5b, 0x24, 0xb3, 0x12,
	0x8c, 0xef, 0x02, 0xb8, 0xde, 0x4f, 0x63, 0x51, 0x57, 0x6d, 0xe9, 0xec, 0x84, 0xcd, 0x6c, 0xbe,
	0x05, 0xd7, 0xb1, 0xc4, 0x31, 0x4f, 0x79, 0x1a, 0xdd, 0xc7, 0x11, 0xdc, 0xbc, 0x5e, 0x9d, 0xfc,
	0xc9, 0xfc, 0x47, 0xa7, 0x2b, 0x27, 0x2f, 0x05, 0xb9, 0x78, 0x00, 0xf3, 0xfe, 0x9a, 0x83, 0xe6,
	0xcf, 0x1f, 0x89, 0x8f, 0x8b, 0x7a, 0x33, 0x36, 0xf4, 0x10, 0xf3, 0x41, 0xd8, 0xc8, 0x72, 0x35,
	0x74, 0x4f, 0xcd, 0x08, 0xc6, 0x32, 0xde, 0x4c, 0xd7, 0xf2, 0x4c, 0xc7, 0x12, 0x1f, 0xa6, 0x16,
	0x58, 0xbd, 0xf8, 0xe6, 0xc2, 0x0c, 0xd9, 0x54, 0xfa, 0x61, 0x35, 0x93, 0xe8, 0x53, 0x04, 0xad,
	0xa8, 0x99, 0xab, 0x8e, 0x46, 0xb6, 0xbf, 0x03, 0xd8, 0x1c, 0xc9, 0x8b, 0xd0, 0xf2, 0x6e, 0xc7,
	0xd5, 0x26, 0xdc, 0x7a, 0x80, 0x63, 0x89, 0x97, 0x80, 0xa7, 0x4c, 0x01, 0xd4, 0xc3, 0x8f, 0x1c,
	0x5a, 0xc5, 0x44, 0x95, 0xc3, 0x5c, 0x74, 0xe1, 0x9d, 0x2b, 0x95, 0x8f, 0xce, 0x90, 0x32, 0x69,
	0xfa, 0x44, 0xf5, 0xec, 0xd5, 0xea, 0x0b, 0x1f, 0x57, 0xa6, 0xae, 0x54, 0xa6, 0xa7, 0x16, 0x27,
	0x0f, 0x93, 0x82, 0x9c, 0xc5, 0x99, 0xcf, 0x61, 0x8e, 0xe8, 0x49, 0xa7, 0x5b, 0x44, 0xf3, 0xdc,
	0xe5, 0x60, 0x98, 0xf3, 0xa0, 0x65, 0xfd, 0x9b, 0x2f, 0x7a, 0xeb, 0x2d, 0xf9, 0x8e, 0x25, 0x7e,
	0xdd, 0x53, 0x9e, 0x44, 0x5b, 0xd8, 0x91, 0xb6, 0x1c, 0xce, 0xcc, 0x0a, 0xfc, 0xe8, 0x09, 0xc8,
	0x90, 0xf6, 0x3c, 0xed, 0x29, 0xbb, 0xd1, 0xbd, 0x30, 0x4d, 0x33, 0x06, 0x21, 0x4c, 0x19, 0x04,
	0x65, 0xb0, 0x20, 0xe4, 0xcd, 0xa2, 0xdc, 0x40, 0x4b, 0x7c, 0x09, 0x00, 0xb9, 0x43, 0xb3, 0xac,
	0xb2, 0x5e, 0xa4, 0xb7, 0xea, 0xd9, 0x67, 0x1d, 0xd3, 0xc8, 0x2d, 0xa1, 0x0c, 0x37, 0xd2, 0x3f,
	0xd4, 0x7a, 0xe8, 0x9f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xa6, 0x10, 0x92, 0x5a, 0x66, 0x26, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CloudNetserviceClient is the client API for CloudNetservice service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CloudNetserviceClient interface {
	AddSubnet(ctx context.Context, in *AddSubnetReq, opts ...grpc.CallOption) (*AddSubnetResp, error)
	DeleteSubnet(ctx context.Context, in *DeleteSubnetReq, opts ...grpc.CallOption) (*DeleteSubnetResp, error)
	ListSubnet(ctx context.Context, in *ListSubnetReq, opts ...grpc.CallOption) (*ListSubnetResp, error)
	ChangeSubnet(ctx context.Context, in *ChangeSubnetReq, opts ...grpc.CallOption) (*ChangeSubnetResp, error)
	GetAvailableSubnet(ctx context.Context, in *GetAvailableSubnetReq, opts ...grpc.CallOption) (*GetAvailableSubnetResp, error)
	AllocateIP(ctx context.Context, in *AllocateIPReq, opts ...grpc.CallOption) (*AllocateIPResp, error)
	ReleaseIP(ctx context.Context, in *ReleaseIPReq, opts ...grpc.CallOption) (*ReleaseIPResp, error)
	TransIPStatus(ctx context.Context, in *TransIPStatusReq, opts ...grpc.CallOption) (*TransIPStatusResp, error)
	CleanFixedIP(ctx context.Context, in *CleanFixedIPReq, opts ...grpc.CallOption) (*CleanFixedIPResp, error)
	CleanEni(ctx context.Context, in *CleanEniReq, opts ...grpc.CallOption) (*CleanEniResp, error)
	ListIP(ctx context.Context, in *ListIPsReq, opts ...grpc.CallOption) (*ListIPsResp, error)
	AllocateEni(ctx context.Context, in *AllocateEniReq, opts ...grpc.CallOption) (*AllocateEniResp, error)
	ReleaseEni(ctx context.Context, in *ReleaseEniReq, opts ...grpc.CallOption) (*ReleaseEniResp, error)
}

type cloudNetserviceClient struct {
	cc *grpc.ClientConn
}

func NewCloudNetserviceClient(cc *grpc.ClientConn) CloudNetserviceClient {
	return &cloudNetserviceClient{cc}
}

func (c *cloudNetserviceClient) AddSubnet(ctx context.Context, in *AddSubnetReq, opts ...grpc.CallOption) (*AddSubnetResp, error) {
	out := new(AddSubnetResp)
	err := c.cc.Invoke(ctx, "/cloudnetservice.CloudNetservice/AddSubnet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudNetserviceClient) DeleteSubnet(ctx context.Context, in *DeleteSubnetReq, opts ...grpc.CallOption) (*DeleteSubnetResp, error) {
	out := new(DeleteSubnetResp)
	err := c.cc.Invoke(ctx, "/cloudnetservice.CloudNetservice/DeleteSubnet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudNetserviceClient) ListSubnet(ctx context.Context, in *ListSubnetReq, opts ...grpc.CallOption) (*ListSubnetResp, error) {
	out := new(ListSubnetResp)
	err := c.cc.Invoke(ctx, "/cloudnetservice.CloudNetservice/ListSubnet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudNetserviceClient) ChangeSubnet(ctx context.Context, in *ChangeSubnetReq, opts ...grpc.CallOption) (*ChangeSubnetResp, error) {
	out := new(ChangeSubnetResp)
	err := c.cc.Invoke(ctx, "/cloudnetservice.CloudNetservice/ChangeSubnet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudNetserviceClient) GetAvailableSubnet(ctx context.Context, in *GetAvailableSubnetReq, opts ...grpc.CallOption) (*GetAvailableSubnetResp, error) {
	out := new(GetAvailableSubnetResp)
	err := c.cc.Invoke(ctx, "/cloudnetservice.CloudNetservice/GetAvailableSubnet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudNetserviceClient) AllocateIP(ctx context.Context, in *AllocateIPReq, opts ...grpc.CallOption) (*AllocateIPResp, error) {
	out := new(AllocateIPResp)
	err := c.cc.Invoke(ctx, "/cloudnetservice.CloudNetservice/AllocateIP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudNetserviceClient) ReleaseIP(ctx context.Context, in *ReleaseIPReq, opts ...grpc.CallOption) (*ReleaseIPResp, error) {
	out := new(ReleaseIPResp)
	err := c.cc.Invoke(ctx, "/cloudnetservice.CloudNetservice/ReleaseIP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudNetserviceClient) TransIPStatus(ctx context.Context, in *TransIPStatusReq, opts ...grpc.CallOption) (*TransIPStatusResp, error) {
	out := new(TransIPStatusResp)
	err := c.cc.Invoke(ctx, "/cloudnetservice.CloudNetservice/TransIPStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudNetserviceClient) CleanFixedIP(ctx context.Context, in *CleanFixedIPReq, opts ...grpc.CallOption) (*CleanFixedIPResp, error) {
	out := new(CleanFixedIPResp)
	err := c.cc.Invoke(ctx, "/cloudnetservice.CloudNetservice/CleanFixedIP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudNetserviceClient) CleanEni(ctx context.Context, in *CleanEniReq, opts ...grpc.CallOption) (*CleanEniResp, error) {
	out := new(CleanEniResp)
	err := c.cc.Invoke(ctx, "/cloudnetservice.CloudNetservice/CleanEni", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudNetserviceClient) ListIP(ctx context.Context, in *ListIPsReq, opts ...grpc.CallOption) (*ListIPsResp, error) {
	out := new(ListIPsResp)
	err := c.cc.Invoke(ctx, "/cloudnetservice.CloudNetservice/ListIP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudNetserviceClient) AllocateEni(ctx context.Context, in *AllocateEniReq, opts ...grpc.CallOption) (*AllocateEniResp, error) {
	out := new(AllocateEniResp)
	err := c.cc.Invoke(ctx, "/cloudnetservice.CloudNetservice/AllocateEni", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudNetserviceClient) ReleaseEni(ctx context.Context, in *ReleaseEniReq, opts ...grpc.CallOption) (*ReleaseEniResp, error) {
	out := new(ReleaseEniResp)
	err := c.cc.Invoke(ctx, "/cloudnetservice.CloudNetservice/ReleaseEni", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CloudNetserviceServer is the server API for CloudNetservice service.
type CloudNetserviceServer interface {
	AddSubnet(context.Context, *AddSubnetReq) (*AddSubnetResp, error)
	DeleteSubnet(context.Context, *DeleteSubnetReq) (*DeleteSubnetResp, error)
	ListSubnet(context.Context, *ListSubnetReq) (*ListSubnetResp, error)
	ChangeSubnet(context.Context, *ChangeSubnetReq) (*ChangeSubnetResp, error)
	GetAvailableSubnet(context.Context, *GetAvailableSubnetReq) (*GetAvailableSubnetResp, error)
	AllocateIP(context.Context, *AllocateIPReq) (*AllocateIPResp, error)
	ReleaseIP(context.Context, *ReleaseIPReq) (*ReleaseIPResp, error)
	TransIPStatus(context.Context, *TransIPStatusReq) (*TransIPStatusResp, error)
	CleanFixedIP(context.Context, *CleanFixedIPReq) (*CleanFixedIPResp, error)
	CleanEni(context.Context, *CleanEniReq) (*CleanEniResp, error)
	ListIP(context.Context, *ListIPsReq) (*ListIPsResp, error)
	AllocateEni(context.Context, *AllocateEniReq) (*AllocateEniResp, error)
	ReleaseEni(context.Context, *ReleaseEniReq) (*ReleaseEniResp, error)
}

// UnimplementedCloudNetserviceServer can be embedded to have forward compatible implementations.
type UnimplementedCloudNetserviceServer struct {
}

func (*UnimplementedCloudNetserviceServer) AddSubnet(ctx context.Context, req *AddSubnetReq) (*AddSubnetResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSubnet not implemented")
}
func (*UnimplementedCloudNetserviceServer) DeleteSubnet(ctx context.Context, req *DeleteSubnetReq) (*DeleteSubnetResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSubnet not implemented")
}
func (*UnimplementedCloudNetserviceServer) ListSubnet(ctx context.Context, req *ListSubnetReq) (*ListSubnetResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSubnet not implemented")
}
func (*UnimplementedCloudNetserviceServer) ChangeSubnet(ctx context.Context, req *ChangeSubnetReq) (*ChangeSubnetResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeSubnet not implemented")
}
func (*UnimplementedCloudNetserviceServer) GetAvailableSubnet(ctx context.Context, req *GetAvailableSubnetReq) (*GetAvailableSubnetResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAvailableSubnet not implemented")
}
func (*UnimplementedCloudNetserviceServer) AllocateIP(ctx context.Context, req *AllocateIPReq) (*AllocateIPResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllocateIP not implemented")
}
func (*UnimplementedCloudNetserviceServer) ReleaseIP(ctx context.Context, req *ReleaseIPReq) (*ReleaseIPResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReleaseIP not implemented")
}
func (*UnimplementedCloudNetserviceServer) TransIPStatus(ctx context.Context, req *TransIPStatusReq) (*TransIPStatusResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransIPStatus not implemented")
}
func (*UnimplementedCloudNetserviceServer) CleanFixedIP(ctx context.Context, req *CleanFixedIPReq) (*CleanFixedIPResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CleanFixedIP not implemented")
}
func (*UnimplementedCloudNetserviceServer) CleanEni(ctx context.Context, req *CleanEniReq) (*CleanEniResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CleanEni not implemented")
}
func (*UnimplementedCloudNetserviceServer) ListIP(ctx context.Context, req *ListIPsReq) (*ListIPsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListIP not implemented")
}
func (*UnimplementedCloudNetserviceServer) AllocateEni(ctx context.Context, req *AllocateEniReq) (*AllocateEniResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllocateEni not implemented")
}
func (*UnimplementedCloudNetserviceServer) ReleaseEni(ctx context.Context, req *ReleaseEniReq) (*ReleaseEniResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReleaseEni not implemented")
}

func RegisterCloudNetserviceServer(s *grpc.Server, srv CloudNetserviceServer) {
	s.RegisterService(&_CloudNetservice_serviceDesc, srv)
}

func _CloudNetservice_AddSubnet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddSubnetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudNetserviceServer).AddSubnet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloudnetservice.CloudNetservice/AddSubnet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudNetserviceServer).AddSubnet(ctx, req.(*AddSubnetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudNetservice_DeleteSubnet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSubnetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudNetserviceServer).DeleteSubnet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloudnetservice.CloudNetservice/DeleteSubnet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudNetserviceServer).DeleteSubnet(ctx, req.(*DeleteSubnetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudNetservice_ListSubnet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSubnetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudNetserviceServer).ListSubnet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloudnetservice.CloudNetservice/ListSubnet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudNetserviceServer).ListSubnet(ctx, req.(*ListSubnetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudNetservice_ChangeSubnet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeSubnetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudNetserviceServer).ChangeSubnet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloudnetservice.CloudNetservice/ChangeSubnet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudNetserviceServer).ChangeSubnet(ctx, req.(*ChangeSubnetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudNetservice_GetAvailableSubnet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAvailableSubnetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudNetserviceServer).GetAvailableSubnet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloudnetservice.CloudNetservice/GetAvailableSubnet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudNetserviceServer).GetAvailableSubnet(ctx, req.(*GetAvailableSubnetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudNetservice_AllocateIP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AllocateIPReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudNetserviceServer).AllocateIP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloudnetservice.CloudNetservice/AllocateIP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudNetserviceServer).AllocateIP(ctx, req.(*AllocateIPReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudNetservice_ReleaseIP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReleaseIPReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudNetserviceServer).ReleaseIP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloudnetservice.CloudNetservice/ReleaseIP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudNetserviceServer).ReleaseIP(ctx, req.(*ReleaseIPReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudNetservice_TransIPStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransIPStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudNetserviceServer).TransIPStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloudnetservice.CloudNetservice/TransIPStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudNetserviceServer).TransIPStatus(ctx, req.(*TransIPStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudNetservice_CleanFixedIP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CleanFixedIPReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudNetserviceServer).CleanFixedIP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloudnetservice.CloudNetservice/CleanFixedIP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudNetserviceServer).CleanFixedIP(ctx, req.(*CleanFixedIPReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudNetservice_CleanEni_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CleanEniReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudNetserviceServer).CleanEni(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloudnetservice.CloudNetservice/CleanEni",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudNetserviceServer).CleanEni(ctx, req.(*CleanEniReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudNetservice_ListIP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListIPsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudNetserviceServer).ListIP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloudnetservice.CloudNetservice/ListIP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudNetserviceServer).ListIP(ctx, req.(*ListIPsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudNetservice_AllocateEni_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AllocateEniReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudNetserviceServer).AllocateEni(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloudnetservice.CloudNetservice/AllocateEni",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudNetserviceServer).AllocateEni(ctx, req.(*AllocateEniReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudNetservice_ReleaseEni_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReleaseEniReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudNetserviceServer).ReleaseEni(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloudnetservice.CloudNetservice/ReleaseEni",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudNetserviceServer).ReleaseEni(ctx, req.(*ReleaseEniReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _CloudNetservice_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cloudnetservice.CloudNetservice",
	HandlerType: (*CloudNetserviceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddSubnet",
			Handler:    _CloudNetservice_AddSubnet_Handler,
		},
		{
			MethodName: "DeleteSubnet",
			Handler:    _CloudNetservice_DeleteSubnet_Handler,
		},
		{
			MethodName: "ListSubnet",
			Handler:    _CloudNetservice_ListSubnet_Handler,
		},
		{
			MethodName: "ChangeSubnet",
			Handler:    _CloudNetservice_ChangeSubnet_Handler,
		},
		{
			MethodName: "GetAvailableSubnet",
			Handler:    _CloudNetservice_GetAvailableSubnet_Handler,
		},
		{
			MethodName: "AllocateIP",
			Handler:    _CloudNetservice_AllocateIP_Handler,
		},
		{
			MethodName: "ReleaseIP",
			Handler:    _CloudNetservice_ReleaseIP_Handler,
		},
		{
			MethodName: "TransIPStatus",
			Handler:    _CloudNetservice_TransIPStatus_Handler,
		},
		{
			MethodName: "CleanFixedIP",
			Handler:    _CloudNetservice_CleanFixedIP_Handler,
		},
		{
			MethodName: "CleanEni",
			Handler:    _CloudNetservice_CleanEni_Handler,
		},
		{
			MethodName: "ListIP",
			Handler:    _CloudNetservice_ListIP_Handler,
		},
		{
			MethodName: "AllocateEni",
			Handler:    _CloudNetservice_AllocateEni_Handler,
		},
		{
			MethodName: "ReleaseEni",
			Handler:    _CloudNetservice_ReleaseEni_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cloudnetservice.proto",
}
