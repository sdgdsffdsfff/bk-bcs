syntax = "proto3";

import "bk-bscp/internal/protocol/common/common.proto";
import "google/api/annotations.proto";
import "protoc-gen-swagger/options/annotations.proto";

package configserver;

option (grpc.gateway.protoc_gen_swagger.options.openapiv2_swagger) = {
    info: {
        title: "蓝鲸基础服务配置平台API文档-通用配置接口"
        version : "2.0.0"
    };

    schemes: HTTP
    consumes: "application/json"
    produces: "application/json"
};

service Config {
    rpc CreateApp(CreateAppReq) returns (CreateAppResp) {
        option (google.api.http) = {
          post: "/api/v2/config/biz/{biz_id}/app"
          body: "*"
        };
        option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
			description: "创建新应用, 一般为管理员操作, 进行业务的首次接入"
            summary: "创建新应用"
            tags: "Application"
        };
    }

    rpc QueryApp(QueryAppReq) returns (QueryAppResp) {
        option (google.api.http) = {
          get: "/api/v2/config/biz/{biz_id}/app"
        };
        option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
			description: "查询指定应用详细信息, 可根据应用ID或应用名称查询"
            summary: "查询应用信息"
            tags: "Application"
        };
    }

    rpc QueryAppList(QueryAppListReq) returns (QueryAppListResp) {
        option (google.api.http) = {
          post: "/api/v2/config/list/biz/{biz_id}/app"
          body: "*"
        };
        option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
			description: "查询指定业务的应用列表"
            summary: "查询应用列表"
            tags: "Application"
        };
    }

    rpc UpdateApp(UpdateAppReq) returns (UpdateAppResp) {
        option (google.api.http) = {
          put: "/api/v2/config/biz/{biz_id}/app/{app_id}"
          body: "*"
        };
        option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
			description: "更新指定应用信息"
            summary: "更新应用信息"
            tags: "Application"
        };
    }

    rpc DeleteApp(DeleteAppReq) returns (DeleteAppResp) {
        option (google.api.http) = {
          delete: "/api/v2/config/biz/{biz_id}/app/{app_id}"
        };
        option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
			description: "删除指定应用，一般为管理员操作"
            summary: "删除应用"
            tags: "Application"
        };
    }

    rpc CreateConfig(CreateConfigReq) returns (CreateConfigResp) {
        option (google.api.http) = {
          post: "/api/v2/config/biz/{biz_id}/app/{app_id}/config"
          body: "*"
        };
        option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
			description: "为应用创建新配置"
            summary: "创建新配置"
            tags: "Config"
        };
    }

    rpc QueryConfig(QueryConfigReq) returns (QueryConfigResp) {
        option (google.api.http) = {
          get: "/api/v2/config/biz/{biz_id}/app/{app_id}/config"
        };
        option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
			description: "查询指定配置详细信息"
            summary: "查询配置信息"
            tags: "Config"
        };
    }

    rpc QueryConfigList(QueryConfigListReq) returns (QueryConfigListResp) {
        option (google.api.http) = {
          post: "/api/v2/config/list/biz/{biz_id}/app/{app_id}/config"
          body: "*"
        };
        option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
			description: "查询指定应用的配置列表"
            summary: "查询配置列表"
            tags: "Config"
        };
    }

    rpc UpdateConfig(UpdateConfigReq) returns (UpdateConfigResp) {
        option (google.api.http) = {
          put: "/api/v2/config/biz/{biz_id}/app/{app_id}/config/{cfg_id}"
          body: "*"
        };
        option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
			description: "更新指定应用的配置详细信息"
            summary: "更新配置信息"
            tags: "Config"
        };
    }

    rpc DeleteConfig(DeleteConfigReq) returns (DeleteConfigResp) {
        option (google.api.http) = {
          delete: "/api/v2/config/biz/{biz_id}/app/{app_id}/config/{cfg_id}"
        };
        option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
			description: "删除指定应用的配置"
            summary: "删除配置"
            tags: "Config"
        };
    }

    rpc CreateConfigContent(CreateConfigContentReq) returns (CreateConfigContentResp) {
        option (google.api.http) = {
          post: "/api/v2/config/biz/{biz_id}/app/{app_id}/content"
          body: "*"
        };
        option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
			description: "创建配置内容"
            summary: "创建内容"
            tags: "Content"
        };
    }

    rpc QueryConfigContentList(QueryConfigContentListReq) returns (QueryConfigContentListResp) {
        option (google.api.http) = {
          post: "/api/v2/config/list/biz/{biz_id}/app/{app_id}/content"
          body: "*"
        };
        option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
			description: "查询配置实体内容列表, 既查询指定Commit提交后配置实体内容列表"
            summary: "查询配置实体内容列表"
            tags: "Content"
        };
    }

    rpc QueryConfigContent(QueryConfigContentReq) returns (QueryConfigContentResp) {
        option (google.api.http) = {
          post: "/api/v2/config/find_by_labels/biz/{biz_id}/app/{app_id}/content"
          body: "*"
        };
        option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
			description: "根据节点标签信息查询其对应的配置提交指定内容"
            summary: "根据规则查询配置内容"
            tags: "Content"
        };
    }

    rpc QueryReleaseConfigContent(QueryReleaseConfigContentReq) returns (QueryReleaseConfigContentResp) {
        option (google.api.http) = {
          post: "/api/v2/config/find_by_inst/biz/{biz_id}/app/{app_id}/content"
          body: "*"
        };
        option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
			description: "查询实例指定版本的配置内容"
            summary: "查询实例版本配置内容"
            tags: "Content"
        };
    }

    rpc CreateCommit(CreateCommitReq) returns (CreateCommitResp) {
        option (google.api.http) = {
          post: "/api/v2/config/biz/{biz_id}/app/{app_id}/commit"
          body: "*"
        };
        option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
			description: "创建新提交，即对指定应用的配置进行修改操作"
            summary: "创建新提交(修改配置)"
            tags: "Commit"
        };
    }

    rpc QueryCommit(QueryCommitReq) returns (QueryCommitResp) {
        option (google.api.http) = {
          get: "/api/v2/config/biz/{biz_id}/app/{app_id}/commit/{commit_id}"
        };
        option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
			description: "查询应用配置的指定Commit变动内容"
            summary: "查询配置的变动内容"
            tags: "Commit"
        };
    }

    rpc QueryHistoryCommits(QueryHistoryCommitsReq) returns (QueryHistoryCommitsResp) {
        option (google.api.http) = {
          post: "/api/v2/config/list/biz/{biz_id}/app/{app_id}/commit"
          body: "*"
        };
        option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
			description: "查询应用配置的历史修改记录"
            summary: "查询配置历史修改记录"
            tags: "Commit"
        };
    }

    rpc UpdateCommit(UpdateCommitReq) returns (UpdateCommitResp) {
        option (google.api.http) = {
          put: "/api/v2/config/biz/{biz_id}/app/{app_id}/commit/{commit_id}"
          body: "*"
        };
        option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
			description: "更新指定Commit的变动内容"
            summary: "更新指定Commit的变动内容"
            tags: "Commit"
        };
    }

    rpc CancelCommit(CancelCommitReq) returns (CancelCommitResp) {
        option (google.api.http) = {
          post: "/api/v2/config/cancel/biz/{biz_id}/app/{app_id}/commit/{commit_id}"
          body: "*"
        };
        option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
			description: "撤销指定配置的修改操作"
            summary: "撤销配置修改操作"
            tags: "Commit"
        };
    }

    rpc ConfirmCommit(ConfirmCommitReq) returns (ConfirmCommitResp) {
        option (google.api.http) = {
          post: "/api/v2/config/confirm/biz/{biz_id}/app/{app_id}/commit/{commit_id}"
          body: "*"
        };
        option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
			description: "确认配置修改，确认之后系统会进行配置实体内容的生成，若使用模板则会进行模板的渲染"
            summary: "确认配置修改"
            tags: "Commit"
        };
    }

    rpc CreateMultiCommitWithContent(CreateMultiCommitWithContentReq) returns (CreateMultiCommitWithContentResp) {
        option (google.api.http) = {
          post: "/api/v2/config/biz/{biz_id}/app/{app_id}/multi_commit_with_content"
          body: "*"
        };
        option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
			description: "附带内容关联的模式去创建多个配置的新提交，即对指定应用的配置进行修改操作(组模式)"
            summary: "创建多个新提交(修改配置, 组模式, 附带内容关联)"
            tags: "MultiCommit"
        };
    }

    rpc CreateMultiCommit(CreateMultiCommitReq) returns (CreateMultiCommitResp) {
        option (google.api.http) = {
          post: "/api/v2/config/biz/{biz_id}/app/{app_id}/multi_commit"
          body: "*"
        };
        option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
			description: "创建多个配置的新提交，即对指定应用的配置进行修改操作(组模式)"
            summary: "创建多个新提交(修改配置, 组模式)"
            tags: "MultiCommit"
        };
    }

    rpc QueryMultiCommit(QueryMultiCommitReq) returns (QueryMultiCommitResp) {
        option (google.api.http) = {
          get: "/api/v2/config/biz/{biz_id}/app/{app_id}/multi_commit/{multi_commit_id}"
        };
        option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
			description: "查询多个应用配置的指定MultiCommit变动内容(组模式)"
            summary: "查询多个配置的变动内容(组模式)"
            tags: "MultiCommit"
        };
    }

    rpc QueryHistoryMultiCommits(QueryHistoryMultiCommitsReq) returns (QueryHistoryMultiCommitsResp) {
        option (google.api.http) = {
          post: "/api/v2/config/list/biz/{biz_id}/app/{app_id}/multi_commit"
          body: "*"
        };
        option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
			description: "查询应用配置的历史修改记录(组模式)"
            summary: "查询配置历史修改记录(组模式)"
            tags: "MultiCommit"
        };
    }

    rpc UpdateMultiCommit(UpdateMultiCommitReq) returns (UpdateMultiCommitResp) {
        option (google.api.http) = {
          put: "/api/v2/config/biz/{biz_id}/app/{app_id}/multi_commit/{multi_commit_id}"
          body: "*"
        };
        option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
			description: "更新指定MultiCommit的变动内容(组模式)"
            summary: "更新指定MultiCommit的变动内容(组模式)"
            tags: "MultiCommit"
        };
    }

    rpc CancelMultiCommit(CancelMultiCommitReq) returns (CancelMultiCommitResp) {
        option (google.api.http) = {
          post: "/api/v2/config/cancel/biz/{biz_id}/app/{app_id}/multi_commit/{multi_commit_id}"
          body: "*"
        };
        option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
			description: "撤销指定配置的修改操作(组模式)"
            summary: "撤销配置修改操作(组模式)"
            tags: "MultiCommit"
        };
    }
    rpc ConfirmMultiCommit(ConfirmMultiCommitReq) returns (ConfirmMultiCommitResp) {
        option (google.api.http) = {
          post: "/api/v2/config/confirm/biz/{biz_id}/app/{app_id}/multi_commit/{multi_commit_id}"
          body: "*"
        };
        option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
			description: "确认配置修改，确认之后系统会进行配置实体内容的生成，若使用模板则会进行模板的渲染(组模式)"
            summary: "确认配置修改(组模式)"
            tags: "MultiCommit"
        };
    }

    rpc CreateRelease(CreateReleaseReq) returns (CreateReleaseResp) {
        option (google.api.http) = {
          post: "/api/v2/config/biz/{biz_id}/app/{app_id}/release"
          body: "*"
        };
        option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
			description: "创建新配置发布版本， 可附带发布策略进行区域可见性控制"
            summary: "创建新发布版本"
            tags: "Release"
        };
    }

    rpc QueryRelease(QueryReleaseReq) returns (QueryReleaseResp) {
        option (google.api.http) = {
          get: "/api/v2/config/biz/{biz_id}/app/{app_id}/release/{release_id}"
        };
        option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
			description: "查询指定配置的发布版本信息"
            summary: "查询指定发布版本"
            tags: "Release"
        };
    }

    rpc UpdateRelease(UpdateReleaseReq) returns (UpdateReleaseResp) {
        option (google.api.http) = {
          put: "/api/v2/config/biz/{biz_id}/app/{app_id}/release/{release_id}"
          body: "*"
        };
        option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
			description: "更新指定配置的发布版本信息"
            summary: "更新发布版本信息"
            tags: "Release"
        };
    }

    rpc CancelRelease(CancelReleaseReq) returns (CancelReleaseResp) {
        option (google.api.http) = {
          post: "/api/v2/config/cancel/biz/{biz_id}/app/{app_id}/release/{release_id}"
          body: "*"
        };
        option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
			description: "撤销指定配置发布版本，不再做发布操作"
            summary: "撤销发布版本"
            tags: "Release"
        };
    }

    rpc PublishRelease(PublishReleaseReq) returns (PublishReleaseResp) {
        option (google.api.http) = {
          post: "/api/v2/config/publish/biz/{biz_id}/app/{app_id}/release/{release_id}"
          body: "*"
        };
        option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
			description: "发布指定配置的版本"
            summary: "发布指定配置版本"
            tags: "Release"
        };
    }

    rpc RollbackRelease(RollbackReleaseReq) returns (RollbackReleaseResp) {
        option (google.api.http) = {
          post: "/api/v2/config/rollback/biz/{biz_id}/app/{app_id}/release/{release_id}"
          body: "*"
        };
        option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
			description: "回滚指定版本"
            summary: "回滚指定版本"
            tags: "Release"
        };
    }

    rpc QueryHistoryReleases(QueryHistoryReleasesReq) returns (QueryHistoryReleasesResp) {
        option (google.api.http) = {
          post: "/api/v2/config/list/biz/{biz_id}/app/{app_id}/release"
          body: "*"
        };
        option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
			description: "查询历史发布版本详细信息"
            summary: "查询历史发布版本"
            tags: "Release"
        };
    }

    rpc CreateMultiRelease(CreateMultiReleaseReq) returns (CreateMultiReleaseResp) {
        option (google.api.http) = {
          post: "/api/v2/config/biz/{biz_id}/app/{app_id}/multi_release"
          body: "*"
        };
        option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
			description: "创建新配置发布版本， 可附带发布策略进行区域可见性控制"
            summary: "创建新发布版本(组模式)"
            tags: "MultiRelease"
        };
    }

    rpc QueryMultiRelease(QueryMultiReleaseReq) returns (QueryMultiReleaseResp) {
        option (google.api.http) = {
          get: "/api/v2/config/biz/{biz_id}/app/{app_id}/multi_release/{multi_release_id}"
        };
        option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
			description: "查询指定配置的发布版本信息"
            summary: "查询指定发布版本(组模式)"
            tags: "MultiRelease"
        };
    }

    rpc UpdateMultiRelease(UpdateMultiReleaseReq) returns (UpdateMultiReleaseResp) {
        option (google.api.http) = {
          put: "/api/v2/config/biz/{biz_id}/app/{app_id}/multi_release/{multi_release_id}"
          body: "*"
        };
        option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
			description: "更新指定配置的发布版本信息"
            summary: "更新发布版本信息(组模式)"
            tags: "MultiRelease"
        };
    }

    rpc CancelMultiRelease(CancelMultiReleaseReq) returns (CancelMultiReleaseResp) {
        option (google.api.http) = {
          post: "/api/v2/config/cancel/biz/{biz_id}/app/{app_id}/multi_release/{multi_release_id}"
          body: "*"
        };
        option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
			description: "撤销指定配置发布版本，不再做发布操作"
            summary: "撤销发布版本(组模式)"
            tags: "MultiRelease"
        };
    }

    rpc PublishMultiRelease(PublishMultiReleaseReq) returns (PublishMultiReleaseResp) {
        option (google.api.http) = {
          post: "/api/v2/config/publish/biz/{biz_id}/app/{app_id}/multi_release/{multi_release_id}"
          body: "*"
        };
        option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
			description: "发布指定配置的版本"
            summary: "发布指定配置版本(组模式)"
            tags: "MultiRelease"
        };
    }

    rpc RollbackMultiRelease(RollbackMultiReleaseReq) returns (RollbackMultiReleaseResp) {
        option (google.api.http) = {
          post: "/api/v2/config/rollback/biz/{biz_id}/app/{app_id}/multi_release/{multi_release_id}"
          body: "*"
        };
        option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
			description: "回滚指定版本"
            summary: "回滚指定版本(组模式)"
            tags: "MultiRelease"
        };
    }

    rpc QueryHistoryMultiReleases(QueryHistoryMultiReleasesReq) returns (QueryHistoryMultiReleasesResp) {
        option (google.api.http) = {
          post: "/api/v2/config/list/biz/{biz_id}/app/{app_id}/multi_release"
          body: "*"
        };
        option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
			description: "查询历史发布版本详细信息"
            summary: "查询历史发布版本(组模式)"
            tags: "MultiRelease"
        };
    }

    rpc Reload(ReloadReq) returns (ReloadResp) {
        option (google.api.http) = {
            post: "/api/v2/config/biz/{biz_id}/app/{app_id}/reload"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
            description: "Reload指定版本配置"
            summary: "Reload指定版本配置"
            tags: "Release"
            tags: "MultiRelease"
        };
    }

    rpc QueryReachableAppInstances(QueryReachableAppInstancesReq) returns (QueryReachableAppInstancesResp) {
        option (google.api.http) = {
          post: "/api/v2/config/list_reachable/biz/{biz_id}/app/{app_id}/app_instance"
          body: "*"
        };
        option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
			description: "查询指定区域内可触达应用实例详细信息"
            summary: "查询指定区域内可触达应用实例"
            tags: "AppInstance"
        };
    }

    rpc QueryMatchedAppInstances(QueryMatchedAppInstancesReq) returns (QueryMatchedAppInstancesResp) {
        option (google.api.http) = {
          post: "/api/v2/config/list_matched/biz/{biz_id}/app/{app_id}/app_instance"
          body: "*"
        };
        option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
			description: "查询指定版本策略匹配的应用实例详细信息"
            summary: "查询指定版本策略匹配的应用实例"
            tags: "AppInstance"
        };
    }

    rpc QueryEffectedAppInstances(QueryEffectedAppInstancesReq) returns (QueryEffectedAppInstancesResp) {
        option (google.api.http) = {
          post: "/api/v2/config/list_effected/biz/{biz_id}/app/{app_id}/app_instance"
          body: "*"
        };
        option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
			description: "查询已生效指定版本的应用实例列表"
            summary: "查询已生效指定版本的应用实例列表"
            tags: "AppInstance"
        };
    }

    rpc QueryAppInstanceRelease(QueryAppInstanceReleaseReq) returns (QueryAppInstanceReleaseResp) {
        option (google.api.http) = {
          post: "/api/v2/config/biz/{biz_id}/app/{app_id}/app_instance_release"
          body: "*"
        };
        option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
			description: "查询指定应用实例当前生效版本信息"
            summary: "查询指定应用实例当前生效版本"
            tags: "AppInstance"
        };
    }

    rpc CreateStrategy(CreateStrategyReq) returns (CreateStrategyResp) {
        option (google.api.http) = {
          post: "/api/v2/config/biz/{biz_id}/app/{app_id}/strategy"
          body: "*"
        };
        option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
			description: "为指定应用创建新的发布策略"
            summary: "创建发布策略"
            tags: "Strategy"
        };
    }

    rpc QueryStrategy(QueryStrategyReq) returns (QueryStrategyResp) {
        option (google.api.http) = {
          get: "/api/v2/config/biz/{biz_id}/app/{app_id}/strategy"
        };
        option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
			description: "查询指定应用的发布策略详细信息"
            summary: "查询发布策略信息"
            tags: "Strategy"
        };
    }

    rpc QueryStrategyList(QueryStrategyListReq) returns (QueryStrategyListResp) {
        option (google.api.http) = {
          post: "/api/v2/config/list/biz/{biz_id}/app/{app_id}/strategy"
          body: "*"
        };
        option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
			description: "查询指定应用下的发布策略列表"
            summary: "查询发布策略列表"
            tags: "Strategy"
        };
    }

    rpc DeleteStrategy(DeleteStrategyReq) returns (DeleteStrategyResp) {
        option (google.api.http) = {
          delete: "/api/v2/config/biz/{biz_id}/app/{app_id}/strategy/{strategy_id}"
        };
        option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
			description: "删除指定发布策略"
            summary: "删除发布策略"
            tags: "Strategy"
        };
    }

    rpc CreateProcAttr(CreateProcAttrReq) returns (CreateProcAttrResp) {
        option (google.api.http) = {
          post: "/api/v2/config/biz/{biz_id}/app/{app_id}/procattr"
          body: "*"
        };
        option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
			description: "创建进程环境主机归属信息"
            summary: "创建主机应用归属信息"
            tags: "ProcAttr"
        };
    }

    rpc CreateProcAttrBatch(CreateProcAttrBatchReq) returns (CreateProcAttrBatchResp) {
        option (google.api.http) = {
          post: "/api/v2/config/batch/biz/{biz_id}/app/{app_id}/procattr"
          body: "*"
        };
        option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
			description: "批量创建进程环境主机归属信息"
            summary: "批量创建主机应用归属信息"
            tags: "ProcAttr"
        };
    }

    rpc QueryHostProcAttr(QueryHostProcAttrReq) returns (QueryHostProcAttrResp) {
        option (google.api.http) = {
          get: "/api/v2/config/biz/{biz_id}/app/{app_id}/procattr"
        };
        option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
			description: "查询指定主机上的指定应用绑定信息"
            summary: "查询主机应用绑定信息"
            tags: "ProcAttr"
        };
    }

    rpc QueryHostProcAttrList(QueryHostProcAttrListReq) returns (QueryHostProcAttrListResp) {
        option (google.api.http) = {
          post: "/api/v2/config/list_by_host/procattr"
          body: "*"
        };
        option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
			description: "查询指定主机上应用绑定列表"
            summary: "查询主机应用绑定列表"
            tags: "ProcAttr"
        };
    }

    rpc QueryAppProcAttrList(QueryAppProcAttrListReq) returns (QueryAppProcAttrListResp) {
        option (google.api.http) = {
          post: "/api/v2/config/list_by_app/procattr"
          body: "*"
        };
        option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
			description: "查询指定应用绑定的主机列表"
            summary: "查询应用绑定的主机列表"
            tags: "ProcAttr"
        };
    }

    rpc UpdateProcAttr(UpdateProcAttrReq) returns (UpdateProcAttrResp) {
        option (google.api.http) = {
          put: "/api/v2/config/biz/{biz_id}/app/{app_id}/procattr"
          body: "*"
        };
        option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
			description: "更新指定主机上指定应用的绑定信息"
            summary: "更新应用绑定信息"
            tags: "ProcAttr"
        };
    }

    rpc DeleteProcAttr(DeleteProcAttrReq) returns (DeleteProcAttrResp) {
        option (google.api.http) = {
          delete: "/api/v2/config/biz/{biz_id}/app/{app_id}/procattr"
        };
        option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
			description: "删除指定主机和应用之间的绑定"
            summary: "删除应用绑定"
            tags: "ProcAttr"
        };
    }

    rpc QueryAuditList(QueryAuditListReq) returns (QueryAuditListResp) {
        option (google.api.http) = {
          post: "/api/v2/config/list/biz/{biz_id}/audit"
          body: "*"
        };
        option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
			description: "查询审计历史记录"
            summary: "查询审计历史记录"
            tags: "Audit"
        };
    }

    rpc Healthz(HealthzReq) returns (HealthzResp) {}
}

message CreateAppReq {
	option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
		json_schema: {
			title: "CreateAppReq"
			description: "创建新应用请求"
			required: ["biz_id", "name", "deploy_type"]
		}
        example: { value: '{ "name": "myapp", "deploy_type": 0, "memo": "备注"}' }
	};

    string biz_id      = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "新应用所归属业务ID", description: "", max_length: 64}];
    string name        = 2 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "应用名称", description: "", max_length: 64}];
    int32  deploy_type = 3 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "部署环境类型", description: "环境类型， 0: BCS容器环境  1: GSE进程环境", minimum: 0, maximum: 1}];
    string memo        = 4 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "备注", description: "", max_length: 64}];
}

message CreateAppResp {
	option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
		json_schema: {
			title: "CreateAppResp"
			description: "创建新应用响应"
			required: ["result", "code", "message"]
		}
        example: { value: '{ "result": true, "code": 0, "message": "OK", "data": {"app_id": "0b67a798-e9c1-11e9-8c23-525400f99278"}}' }
	};

    message RespData {
        string app_id = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "新应用ID", description: "成功创建后返回新应用的ID"}];
    }

    bool           result  = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "执行结果", description: ""}];
    common.ErrCode code    = 2 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "错误码", description: ""}];
    string         message = 3 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "错误描述", description: ""}];
    RespData       data    = 4 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "结果", description: ""}];
}

message QueryAppReq {
	option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
		json_schema: {
			title: "QueryAppReq"
			description: "查询指定应用信息请求"
			required: ["biz_id"]
		}
        example: { value: '{ "app_id": "0b67a798-e9c1-11e9-8c23-525400f99278", "name": "myapp"}' }
	};

    string biz_id = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "应用所归属业务ID", description: "", max_length: 64}];
    string app_id = 2 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "目标应用ID", description: "选填，非空时将基于目标应用ID查询", max_length: 64}];
    string name   = 3 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "目标应用名称", description: "选填，非空时将基于目标应用名称查询", max_length: 64}];
}

message QueryAppResp {
	option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
		json_schema: {
			title: "QueryAppResp"
			description: "查询指定应用信息响应"
			required: ["result", "code", "message"]
		}
        example: { value: '{ "result": true, "code": 0, "message": "OK", "data": {"biz_id":"f879ab8f-c7e5-11e9-9dc5-525400f9", "app_id":"0b67a798-e9c1-11e9-8c23-525400f99278", "name":"myapp", "deploy_type": 0, "creator":"melo", "last_modify_by":"melo", "memo":"test", "state": 0, "created_at":"2019-07-29 11:57:20", "updated_at":"2019-07-29 11:57:20"}}' }
	};

    bool           result  = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "执行结果", description: ""}];
    common.ErrCode code    = 2 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "错误码", description: ""}];
    string         message = 3 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "错误描述", description: ""}];
    common.App     data    = 4 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "结果", description: ""}];
}

message QueryAppListReq {
	option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
		json_schema: {
			title: "QueryAppListReq"
			description: "查询应用列表请求"
			required: ["biz_id", "page"]
		}
        example: { value: '{ "page": {"start": 0, "limit": 50}}' }
	};

    string      biz_id = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "目标业务ID", description: "", max_length: 64}];
    common.Page page   = 2 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "分页设置", description: ""}];
}

message QueryAppListResp {
	option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
		json_schema: {
			title: "QueryAppListResp"
			description: "查询应用列表响应"
			required: ["result", "code", "message"]
		}
        example: { value: '{ "result": true, "code": 0, "message": "OK", "data":{"total_count": 1, "info":[{"biz_id":"f879ab8f-c7e5-11e9-9dc5-525400f9", "app_id":"0b67a798-e9c1-11e9-8c23-525400f99278", "name":"myapp", "deploy_type": 0, "creator":"melo", "last_modify_by":"melo", "memo":"test", "state": 0, "created_at":"2019-07-29 11:57:20", "updated_at":"2019-07-29 11:57:20"}]}}' }
	};

    message RespData {
        uint32              total_count = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "总数据量", description: ""}];
        repeated common.App info        = 2 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "结果", description: ""}];
    }

    bool           result  = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "执行结果", description: ""}];
    common.ErrCode code    = 2 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "错误码", description: ""}];
    string         message = 3 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "错误描述", description: ""}];
    RespData       data    = 4 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "结果", description: ""}];
}

message UpdateAppReq {
	option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
		json_schema: {
			title: "UpdateAppReq"
			description: "更新应用信息请求"
			required: ["biz_id", "app_id"]
		}
        example: { value: '{ "name": "new name", "deploy_type": 0, "memo": "备注", "state": 0}' }
	};

    string biz_id      = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "目标应用所属业务ID", description: "", max_length: 64}];
    string app_id      = 2 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "目标应用ID", description: "", max_length: 64}];
    string name        = 3 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "应用名称", description: "更新应用名称", max_length: 64}];
    int32  deploy_type = 4 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "部署类型", description: "更新部署类型", minimum: 0, maximum: 1}];
    string memo        = 5 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "备注", description: "更新备注信息", max_length: 64}];
    int32  state       = 6 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "应用状态", description: "更新应用状态", minimum: 0, maximum: 1}];
}

message UpdateAppResp {
	option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
		json_schema: {
			title: "UpdateAppResp"
			description: "更新应用信息响应"
			required: ["result", "code", "message"]
		}
        example: { value: '{ "result": true, "code": 0, "message": "OK"}' }
	};

    bool           result  = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "执行结果", description: ""}];
    common.ErrCode code    = 2 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "错误码", description: ""}];
    string         message = 3 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "错误描述", description: ""}];
}

message DeleteAppReq {
	option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
		json_schema: {
			title: "DeleteAppReq"
			description: "删除应用请求"
			required: ["biz_id", "app_id"]
		}
        example: { value: '{}' }
	};

    string biz_id = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "目标应用所属业务ID", description: "", max_length: 64}];
    string app_id = 2 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "目标应用ID", description: "", max_length: 64}];
}

message DeleteAppResp {
	option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
		json_schema: {
			title: "DeleteAppResp"
			description: "删除应用响应"
			required: ["result", "code", "message"]
		}
        example: { value: '{ "result": true, "code": 0, "message": "OK"}' }
	};

    bool           result  = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "执行结果", description: ""}];
    common.ErrCode code    = 2 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "错误码", description: ""}];
    string         message = 3 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "错误描述", description: ""}];
}

message CreateConfigReq {
	option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
		json_schema: {
			title: "CreateConfigReq"
			description: "创建新配置请求"
			required: ["biz_id", "app_id", "name"]
		}
        example: { value: '{ "fpath": "/etc", "name": "server.yaml", "memo": "备注"}' }
	};

    string biz_id         = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "所属业务ID", description: "", max_length: 64}];
    string app_id         = 2 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "所属应用ID", description: "", max_length: 64}];
    string name           = 3 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "新配置名称", description: "", max_length: 64}];
    string fpath          = 4 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "新配置子路径", description: "", max_length: 1024}];
    string user           = 5 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "文件用户", description: "", max_length: 64}];
    string user_group     = 6 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "文件用户组", description: "", max_length: 64}];
    string file_privilege = 7 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "文件权限", description: "", max_length: 64}];
    string file_format    = 8 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "文件系统格式", description: "", max_length: 64}];
    int32  file_mode      = 9 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "文件类型 1:文本文件 2:二进制文件 3:模板文件", description: "", max_length: 64}];
    string memo           = 10 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "备注", description: "", max_length: 64}];
}

message CreateConfigResp {
	option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
		json_schema: {
			title: "CreateConfigResp"
			description: "创建新配置响应"
			required: ["result", "code", "message"]
		}
        example: { value: '{ "result": true, "code": 0, "message": "OK", "data":{"cfg_id": "626889ba-e9c1-11e9-8c23-525400f99278"}}' }
	};

    message RespData {
        string cfg_id = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "新配置ID", description: "成功创建后返回新配置ID"}];
    }

    bool           result  = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "执行结果", description: ""}];
    common.ErrCode code    = 2 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "错误码", description: ""}];
    string         message = 3 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "错误描述", description: ""}];
    RespData       data    = 4 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "结果", description: ""}];
}

message QueryConfigReq {
	option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
		json_schema: {
			title: "QueryConfigReq"
			description: "查询配置信息请求"
			required: ["biz_id", "app_id"]
		}
        example: { value: '{ "fpath": "/etc", "name": "server.yaml", "cfg_id": "626889ba-e9c1-11e9-8c23-525400f99278"}' }
	};

    string biz_id = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "目标配置所属业务ID", description: "", max_length: 64}];
    string app_id = 2 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "目标配置所属应用ID", description: "可选，非空时将基于目标配置所属应用ID和配置名称+path查询", max_length: 64}];
    string cfg_id = 3 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "目标配置ID", description: "可选，非空时将基于目标配置ID查询", max_length: 64}];
    string name   = 4 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "目标配置名称", description: "可选，非空时将基于目标配置所属应用ID和配置名称+path查询", max_length: 64}];
    string fpath  = 5 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "配置子路径", description: "可选，非空时将基于目标配置所属应用ID和配置名称+path查询", max_length: 1024}];
}

message QueryConfigResp {
	option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
		json_schema: {
			title: "QueryConfigResp"
			description: "查询配置信息响应"
			required: ["result", "code", "message"]
		}
        example: { value: '{ "result": true, "code": 0, "message": "OK", "data": {"cfg_id":"626889ba-e9c1-11e9-8c23-525400f99278", "fpath": "/etc", "name":"server.yaml", "biz_id":"f879ab8f-c7e5-11e9-9dc5-525400f99278", "app_id":"0b67a798-e9c1-11e9-8c23-525400f99278", "creator":"melo", "last_modify_by":"melo", "memo":"test", "state":0, "created_at":"2019-10-08 19:47:20", "updated_at":"2019-10-08 20:03:06"}}' }
	};

    bool           result  = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "执行结果", description: ""}];
    common.ErrCode code    = 2 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "错误码", description: ""}];
    string         message = 3 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "错误描述", description: ""}];
    common.Config  data    = 4 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "目标配置信息", description: "成功查询后返回配置详细信息"}];
}

message QueryConfigListReq {
	option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
		json_schema: {
			title: "QueryConfigListReq"
			description: "查询目标应用的配置列表请求"
			required: ["biz_id", "app_id", "page"]
		}
        example: { value: '{ "page":{"start": 0, "limit": 50}}' }
	};

    string      biz_id = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "所属业务ID", description: "", max_length: 64}];
    string      app_id = 2 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "目标应用ID", description: "可选，非空时将基于目标应用ID查询", max_length: 64}];
    common.Page page   = 3 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "分页设置", description: ""}];
}

message QueryConfigListResp {
	option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
		json_schema: {
			title: "QueryConfigListResp"
			description: "查询目标应用的配置列表响应"
			required: ["result", "code", "message"]
		}
        example: { value: '{ "result": true, "code": 0, "message": "OK", "data": { "total_count": 1, "info": [{"cfg_id":"626889ba-e9c1-11e9-8c23-525400f99278", "fpath": "/etc", "name":"server.yaml", "biz_id":"f879ab8f-c7e5-11e9-9dc5-525400f99278", "app_id":"0b67a798-e9c1-11e9-8c23-525400f99278", "creator":"melo", "last_modify_by":"melo", "memo":"test", "state":0, "created_at":"2019-10-08 19:47:20", "updated_at":"2019-10-08 20:03:06"}]}}' }
	};

    message RespData {
        uint32                 total_count = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "总数据量", description: ""}];
        repeated common.Config info        = 2 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "结果", description: ""}];
    }

    bool           result  = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "执行结果", description: ""}];
    common.ErrCode code    = 2 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "错误码", description: ""}];
    string         message = 3 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "错误描述", description: ""}];
    RespData       data    = 4 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "结果", description: ""}];
}

message UpdateConfigReq {
	option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
		json_schema: {
			title: "UpdateConfigReq"
			description: "更新配置信息请求"
			required: ["biz_id", "app_id", "cfg_id"]
		}
        example: { value: '{ "fpath": "/new_path", "name": "new name", "memo": "备注", "state": 0}' }
	};

    string biz_id         = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "所属业务ID", description: "", max_length: 64}];
    string app_id         = 2 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "所属应用ID", description: "", max_length: 64}];
    string cfg_id         = 3 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "目标配置ID", description: "", max_length: 64}];
    string name           = 4 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "配置名称", description: "更新配置名称", max_length: 64}];
    string fpath          = 5 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "配置子路径", description: "更新配置子路径", max_length: 1024}];
    string user           = 6 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "文件用户", description: "", max_length: 64}];
    string user_group     = 7 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "文件用户组", description: "", max_length: 64}];
    string file_privilege = 8 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "文件权限", description: "", max_length: 64}];
    string file_format    = 9 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "文件系统格式", description: "", max_length: 64}];
    int32  file_mode      = 10 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "文件类型 1:文本文件 2:二进制文件 3:模板文件", description: "", max_length: 64}];
    string memo           = 11 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "备注", description: "更新备注信息", max_length: 64}];
    int32  state          = 12 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "配置状态", description: "更新配置状态", minimum: 0, maximum: 1}];
}

message UpdateConfigResp {
	option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
		json_schema: {
			title: "UpdateConfigResp"
			description: "更新配置信息响应"
			required: ["result", "code", "message"]
		}
        example: { value: '{ "result": true, "code": 0, "message": "OK"}' }
	};

    bool           result  = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "执行结果", description: ""}];
    common.ErrCode code    = 2 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "错误码", description: ""}];
    string         message = 3 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "错误描述", description: ""}];
}

message DeleteConfigReq {
	option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
		json_schema: {
			title: "DeleteConfigReq"
			description: "删除配置请求"
			required: ["biz_id", "app_id", "cfg_id"]
		}
        example: { value: '{}' }
	};

    string biz_id = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "所属业务ID", description: "", max_length: 64}];
    string app_id = 2 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "所属应用ID", description: "", max_length: 64}];
    string cfg_id = 3 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "目标配置ID", description: "", max_length: 64}];
}

message DeleteConfigResp {
	option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
		json_schema: {
			title: "DeleteConfigResp"
			description: "删除配置响应"
			required: ["result", "code", "message"]
		}
        example: { value: '{ "result": true, "code": 0, "message": "OK"}' }
	};

    bool           result  = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "执行结果", description: ""}];
    common.ErrCode code    = 2 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "错误码", description: ""}];
    string         message = 3 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "错误描述", description: ""}];
}

message CreateConfigContentReq {
	option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
		json_schema: {
			title: "CreateConfigContentReq"
			description: "创建配置内容请求"
			required: ["biz_id", "app_id", "commit_id", "index", "content_id"]
		}
        example: { value: '{ "commit_id": "1a9c2db1-e9c4-11e9-8c23-525400f99278", "content_id": "4C2D4C4231D1FF93975879226FE92250616082CBAED6A4A888D2ADC490BA9B44", "content_size": 1024, "labels_and": [{"labels":{"cloud_id":"eq|0", "ip":"127.0.0.1", "path": "/data-1"}}, {"labels":{"cloud_id":"eq|0", "ip":"127.0.0.2", "path": "/data-2"}}], "memo": "new commit content"}' }
	};

    string biz_id    = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "所属业务ID", description: "", max_length: 64}];
    string app_id    = 2 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "目标应用ID", description: "", max_length: 64}];
    string commit_id = 3 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "目标提交Commit ID", description: "", max_length: 64}];

    // 内容索引策略，用于节点索引指定版本的配置内容. 支持多个标签，每个标签之间为逻辑或关系. 格式：KV, map type / JSON KV, key为目标标签名称，value为标签规则表达式，格式为OP|VALUES,
    // OP可以为eq(默认为空也按eq处理)等于、ne不等于、gt大于、lt小于、ge大于等于、le小于等于, VALUES可以为单独的标签值或多个标签值例如1,2,3 其表示
    // IN(1,2,3)的语意. OP和VALUES之间用竖线分割. 注意：以往协议中没有OP表达式支持的情况，即为空OP按照eq等于处理.
    repeated common.LabelsMap labels_or = 4 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "内容索引", description: "复合OP|VALUE格式"}];

    // 内容索引策略，用于节点索引指定版本的配置内容. 支持多个标签，每个标签之间为逻辑与关系. 格式：KV, map type / JSON KV, key为目标标签名称，value为标签规则表达式，格式为OP|VALUES,
    // OP可以为eq(默认为空也按eq处理)等于、ne不等于、gt大于、lt小于、ge大于等于、le小于等于, VALUES可以为单独的标签值或多个标签值例如1,2,3 其表示
    // IN(1,2,3)的语意. OP和VALUES之间用竖线分割. 注意：以往协议中没有OP表达式支持的情况，即为空OP按照eq等于处理.
    repeated common.LabelsMap labels_and = 5 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "内容索引", description: "复合OP|VALUE格式"}];

    string content_id   = 6 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "内容签名CID", description: "", max_length: 64}];
    uint32 content_size = 7 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "内容大小", description: ""}];
    string memo         = 8 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "备注信息", description: "", max_length: 64}];

    // 是否验证内容
    bool validate_content = 9 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "是否验证ContentID", description: "默认不验证，验证需要额外开销"}];
}

message CreateConfigContentResp {
	option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
		json_schema: {
			title: "CreateConfigContentResp"
			description: "创建配置内容响应"
			required: ["result", "code", "message"]
		}
        example: { value: '{ "result": true, "code": 0, "message": "OK"}' }
	};

    bool           result  = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "执行结果", description: ""}];
    common.ErrCode code    = 2 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "错误码", description: ""}];
    string         message = 3 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "错误描述", description: ""}];
}

message QueryConfigContentReq {
	option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
		json_schema: {
			title: "QueryConfigContentReq"
			description: "根据节点标签信息查询配置内容请求"
			required: ["biz_id", "app_id", "commit_id", "labels"]
		}
        example: { value: '{ "commit_id": "1a9c2db1-e9c4-11e9-8c23-525400f99278", "labels": {}}' }
	};

    string              biz_id    = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "所属业务ID", description: "", max_length: 64}];
    string              app_id    = 2 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "目标应用ID", description: "", max_length: 64}];
    string              commit_id = 3 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "目标提交Commit ID", description: "", max_length: 64}];
    map<string, string> labels    = 4 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "指定节点标签信息", description: "节点KV标签对(非策略复合OP|VALUE格式), '{\"labels\":{\"k1\":\"v1\"}}'"}];
}

message QueryConfigContentResp {
	option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
		json_schema: {
			title: "QueryConfigContentResp"
			description: "根据节点标签信息查询配置内容响应"
			required: ["result", "code", "message"]
		}
        example: { value: '{ "result": true, "code": 0, "message": "OK"}' }
	};

    bool           result  = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "执行结果", description: ""}];
    common.ErrCode code    = 2 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "错误码", description: ""}];
    string         message = 3 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "错误描述", description: ""}];
    common.Content data    = 4 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "结果", description: ""}];
}

message QueryConfigContentListReq {
	option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
		json_schema: {
			title: "QueryConfigContentListReq"
			description: "查询配置内容列表请求"
			required: ["biz_id", "app_id", "commit_id", "page"]
		}
        example: { value: '{ "commit_id": "1a9c2db1-e9c4-11e9-8c23-525400f99278", "page":{"start": 0, "limit": 50}}' }
	};

    string      biz_id    = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "所属业务ID", description: "", max_length: 64}];
    string      app_id    = 2 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "目标应用ID", description: "", max_length: 64}];
    string      commit_id = 3 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "目标提交Commit ID", description: "", max_length: 64}];
    common.Page page      = 4 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "分页设置", description: ""}];
}

message QueryConfigContentListResp {
	option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
		json_schema: {
			title: "QueryConfigContentListResp"
			description: "查询配置内容列表响应"
			required: ["result", "code", "message"]
		}
        example: { value: '{ "result": true, "code": 0, "message": "OK", "data":{"total_count":1, "info": [{"biz_id": "f879ab8f-c7e5-11e9-9dc5-525400f99278", "app_id":"0b67a798-e9c1-11e9-8c23-525400f99278", "cfg_id": "626889ba-e9c1-11e9-8c23-525400f99278", "commit_id":"cd34e60a-ec95-11e9-b110-525400f99278", "memo":"test", "content_id": "069A2DF605E924F338BB3661A12B198BF5B60F785237153591ED3687F4E3A65D", "creator": "melo", "last_modify_by":"melo", "state": 0, "created_at":"2019-07-29 11:57:20", "updated_at":"2019-07-29 11:57:20"}]}}' }
	};

    message RespData {
        uint32                  total_count = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "总数据量", description: ""}];
        repeated common.Content info        = 2 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "结果", description: ""}];
    }

    bool           result  = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "执行结果", description: ""}];
    common.ErrCode code    = 2 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "错误码", description: ""}];
    string         message = 3 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "错误描述", description: ""}];
    RespData       data    = 4 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "配置内容列表", description: "成功查询后返回配置内容列表"}];
}

message QueryReleaseConfigContentReq {
	option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
		json_schema: {
			title: "QueryReleaseConfigContentReq"
			description: "查询版本配置内容请求"
			required: ["biz_id", "app_id", "cloud_id", "ip", "path", "labels", "commit_id"]
		}
        example: { value: '{ "commit_id": "1a9c2db1-e9c4-11e9-8c23-525400f99278", "cloud_id":"dev", "ip":"127.0.0.1", "path":"/etc", "labels": {}}' }
	};

    string              biz_id    = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "所属业务ID", description: "", max_length: 64}];
    string              app_id    = 2 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "所属应用ID", description: "", max_length: 64}];
    string              cloud_id  = 3 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "区域标识", description: "", max_length: 64}];
    string              ip        = 4 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "IP", description: "目标应用实例IP", max_length: 32}];
    string              path      = 5 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "配置缓存路径", description: "", max_length: 32}];
    map<string, string> labels    = 6 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "目标用户节点标签信息", description: "节点KV标签对(非策略复合OP|VALUE格式), '{\"labels\":{\"k1\":\"v1\"}}'", max_length: 64}];
    string              commit_id = 7 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "目标提交ID", description: "", max_length: 64}];
}

message QueryReleaseConfigContentResp {
	option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
		json_schema: {
			title: "QueryReleaseConfigContentResp"
			description: "查询版本配置内容响应"
			required: ["result", "code", "message"]
		}
        example: { value: '{ "result": true, "code": 0, "message": "OK", "data": {"biz_id": "f879ab8f-c7e5-11e9-9dc5-525400f99278", "app_id":"0b67a798-e9c1-11e9-8c23-525400f99278", "cfg_id": "626889ba-e9c1-11e9-8c23-525400f99278", "commit_id":"cd34e60a-ec95-11e9-b110-525400f99278", "memo":"test", "content_id": "069A2DF605E924F338BB3661A12B198BF5B60F785237153591ED3687F4E3A65D", "creator": "melo", "last_modify_by":"melo", "state": 0, "created_at":"2019-07-29 11:57:20", "updated_at":"2019-07-29 11:57:20"}}' }
	};

    bool           result  = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "执行结果", description: ""}];
    common.ErrCode code    = 2 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "错误码", description: ""}];
    string         message = 3 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "错误描述", description: ""}];
    common.Content data    = 4 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "配置内容信息", description: "成功查询后返回配置内容信息"}];
}

message CreateCommitReq {
	option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
		json_schema: {
			title: "CreateCommitReq"
			description: "创建新提交请求"
			required: ["biz_id", "app_id", "cfg_id"]
		}
        example: { value: '{ "cfg_id": "626889ba-e9c1-11e9-8c23-525400f99278", "memo": "备注"}' }
	};

    string biz_id      = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "所属业务ID", description: "", max_length: 64}];
    string app_id      = 2 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "所属应用ID", description: "", max_length: 64}];
    string cfg_id      = 3 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "目标配置ID", description: "", max_length: 64}];
    int32  commit_mode = 4 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "提交类型", description: "提交类型, 默认0: 非模板提交 1:模板提交"}];
    string memo        = 5 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "备注", description: "", max_length: 64}];
}

message CreateCommitResp {
	option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
		json_schema: {
			title: "CreateCommitResp"
			description: "创建新提交响应"
			required: ["result", "code", "message"]
		}
        example: { value: '{ "result": true, "code": 0, "message": "OK", "data": {"commit_id": "cd34e60a-ec95-11e9-b110-525400f99278"}}' }
	};

    message RespData {
        string commit_id = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "新配置提交ID", description: "成功创建后返回新配置提交Commit ID"}];
    }

    bool           result  = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "执行结果", description: ""}];
    common.ErrCode code    = 2 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "错误码", description: ""}];
    string         message = 3 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "错误描述", description: ""}];
    RespData       data    = 4 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "结果", description: ""}];
}

message QueryCommitReq {
	option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
		json_schema: {
			title: "QueryCommitReq"
			description: "查询提交信息请求"
			required: ["biz_id", "app_id", "commit_id"]
		}
        example: { value: '{}'}
	};

    string biz_id    = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "目标配置所属业务ID", description: "", max_length: 64}];
    string app_id    = 2 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "所属应用ID", description: "", max_length: 64}];
    string commit_id = 3 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "目标配置提交ID", description: "", max_length: 64}];
}

message QueryCommitResp {
	option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
		json_schema: {
			title: "QueryCommitResp"
			description: "查询提交信息响应"
			required: ["result", "code", "message"]
		}
        example: { value: '{ "result": true, "code": 0, "message": "OK", "data": {"commit_id":"cd34e60a-ec95-11e9-b110-525400f99278", "biz_id":"f879ab8f-c7e5-11e9-9dc5-525400f99278", "app_id":"0b67a798-e9c1-11e9-8c23-525400f99278", "cfg_id":"626889ba-e9c1-11e9-8c23-525400f99278", "operator":"melo", "release_id":"1fe5da7b-eef5-11e9-aa0e-525400f99278", "memo":"备注", "state":1, "created_at":"2019-10-12 10:12:55", "updated_at":"2019-10-12 10:14:32"}}'}
	};

    bool           result  = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "执行结果", description: ""}];
    common.ErrCode code    = 2 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "错误码", description: ""}];
    string         message = 3 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "错误描述", description: ""}];
    common.Commit  data    = 4 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "配置提交Commit信息", description: "成功查询后返回目标配置指定提交Commit详细信息"}];
}

message QueryHistoryCommitsReq {
	option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
		json_schema: {
			title: "QueryHistoryCommitsReq"
			description: "查询历史配置提交请求"
			required: ["biz_id", "app_id", "page"]
		}
        example: { value: '{ "cfg_id": "626889ba-e9c1-11e9-8c23-525400f99278", "operator": "melo", "query_type": 0, "page":{"start": 0, "limit": 50}}'}
	};

    string      biz_id     = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "目标配置所属业务ID", description: "", max_length: 64}];
    string      app_id     = 2 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "目标配置所属应用ID", description: "", max_length: 64}];
    string      cfg_id     = 3 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "目标配置ID", description: "", max_length: 64}];
    string      operator   = 4 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "操作人名称", description: "可选，若非空则查询该操作人的提交记录", max_length: 64}];
    int32       query_type = 5 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "状态类型", description: "可选，0:全部状态 1:初始化的 2:已确认的 3:已撤销的", minimum: 0, maximum: 3}];
    common.Page page       = 6 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "分页设置", description: ""}];
}

message QueryHistoryCommitsResp {
	option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
		json_schema: {
			title: "QueryHistoryCommitsResp"
			description: "查询历史配置提交响应"
			required: ["result", "code", "message"]
		}
        example: { value: '{ "result": true, "code": 0, "message": "OK", "data": { "total_count": 1, "info": [{"commit_id":"cd34e60a-ec95-11e9-b110-525400f99278", "biz_id":"f879ab8f-c7e5-11e9-9dc5-525400f99278", "app_id":"0b67a798-e9c1-11e9-8c23-525400f99278", "cfg_id":"626889ba-e9c1-11e9-8c23-525400f99278", "operator":"melo", "release_id":"1fe5da7b-eef5-11e9-aa0e-525400f99278", "memo":"备注", "state":1, "created_at":"2019-10-12 10:12:55", "updated_at":"2019-10-12 10:14:32"}]}}'}
	};

    message RespData {
        uint32                 total_count = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "总数据量", description: ""}];
        repeated common.Commit info        = 2 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "结果", description: ""}];
    }

    bool           result  = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "执行结果", description: ""}];
    common.ErrCode code    = 2 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "错误码", description: ""}];
    string         message = 3 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "错误描述", description: ""}];
    RespData       data    = 4 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "历史提交列表", description: "成功查询后返回目标配置的历史提交列表"}];
}

message UpdateCommitReq {
	option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
		json_schema: {
			title: "UpdateCommitReq"
			description: "更新配置提交信息请求"
			required: ["biz_id", "app_id", "commit_id"]
		}
        example: { value: '{ "memo": "备注", "state": 0}'}
	};

    string biz_id      = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "目标配置所属业务ID", description: "", max_length: 64}];
    string app_id      = 2 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "目标配置所属应用ID", description: "", max_length: 64}];
    string commit_id   = 3 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "目标配置提交ID", description: "", max_length: 64}];
    int32  commit_mode = 4 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "提交类型", description: "提交类型, 默认0: 非模板提交 1:模板提交"}];
    string memo        = 5 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "备注", description: "更新备注信息", max_length: 64}];
}

message UpdateCommitResp {
	option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
		json_schema: {
			title: "UpdateCommitResp"
			description: "更新配置提交信息响应"
			required: ["result", "code", "message"]
		}
        example: { value: '{ "result": true, "code": 0, "message": "OK" }' }
	};

    bool           result  = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "执行结果", description: ""}];
    common.ErrCode code    = 2 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "错误码", description: ""}];
    string         message = 3 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "错误描述", description: ""}];
}

message CancelCommitReq {
	option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
		json_schema: {
			title: "CancelCommitReq"
			description: "取消配置提交请求"
			required: ["biz_id", "app_id", "commit_id"]
		}
        example: { value: '{}' }
	};

    string biz_id    = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "目标配置所属业务ID", description: "", max_length: 64}];
    string app_id    = 2 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "目标配置所属应用ID", description: "", max_length: 64}];
    string commit_id = 3 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "目标配置提交ID", description: "", max_length: 64}];
}

message CancelCommitResp {
	option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
		json_schema: {
			title: "CancelCommitResp"
			description: "取消配置提交响应"
			required: ["result", "code", "message"]
		}
        example: { value: '{ "result": true, "code": 0, "message": "OK" }' }
	};

    bool           result  = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "执行结果", description: ""}];
    common.ErrCode code    = 2 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "错误码", description: ""}];
    string         message = 3 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "错误描述", description: ""}];
}

message ConfirmCommitReq {
	option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
		json_schema: {
			title: "ConfirmCommitReq"
			description: "确认配置提交请求"
			required: ["biz_id", "app_id", "commit_id"]
		}
        example: { value: '{}' }
	};

    string biz_id    = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "目标配置所属业务ID", description: "", max_length: 64}];
    string app_id    = 2 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "目标配置所属应用ID", description: "", max_length: 64}];
    string commit_id = 3 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "目标配置提交ID", description: "", max_length: 64}];
}

message ConfirmCommitResp {
	option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
		json_schema: {
			title: "ConfirmCommitResp"
			description: "确认配置提交响应"
			required: ["result", "code", "message"]
		}
        example: { value: '{ "result": true, "code": 0, "message": "OK" }' }
	};

    bool           result  = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "执行结果", description: ""}];
    common.ErrCode code    = 2 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "错误码", description: ""}];
    string         message = 3 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "错误描述", description: ""}];
}

message CreateMultiCommitWithContentReq {
	option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
		json_schema: {
			title: "CreateMultiCommitWithContentReq"
			description: "创建新提交请求(组模式, 附带内容关联)"
			required: ["biz_id", "app_id", "metadatas"]
		}
        example: { value: '{ "memo": "备注", "metadatas": [{"cfg_id": "626889ba-e9c1-11e9-8c23-525400f99278", "contents":[{"content_id":"1AB7D609B9391C81B459AFC5A91C22E7E1DD92A9A956D7263DF3001F87CAE6D1", "content_size": 1024, "labels_and":[{"labels": {"cloud_id":"eq|0", "ip":"eq|127.0.0.1"}}, {"labels": {"cloud_id":"eq|0", "ip":"eq|127.0.0.2"}}]}, {"content_id":"2AB7D609B9391C81B459AFC5A91C22E7E1DD92A9A956D7263DF3001F87CAE6D2", "content_size": 1024, "labels_and": [{"labels":{"cloud_id":"eq|0", "ip":"eq|127.0.0.3"}}, {"labels":{"cloud_id":"eq|0", "ip":"eq|127.0.0.4"}}]}, {"content_id":"3AB7D609B9391C81B459AFC5A91C22E7E1DD92A9A956D7263DF3001F87CAE6D3", "content_size": 1024, "labels_and":[{"labels":{"cloud_id":"eq|0", "ip":"eq|127.0.0.3,127.0.0.4,127.0.0.5,127.0.0.6"}}]}]},{"cfg_id": "453839ba-e9c1-11e9-8c23-525400f99278", "contents":[{"content_id":"4AB7D609B9391C81B459AFC5A91C22E7E1DD92A9A956D7263DF3001F87CAE6D4", "content_size": 1024, "labels_and":[{"labels": {"cloud_id":"eq|0", "ip":"eq|127.0.0.1"}}, {"labels": {"cloud_id":"eq|0", "ip":"eq|127.0.0.2"}}]}, {"content_id":"5AB7D609B9391C81B459AFC5A91C22E7E1DD92A9A956D7263DF3001F87CAE6D5", "content_size": 1024, "labels_and":[{"labels": {"cloud_id":"eq|0", "ip":"eq|127.0.0.3"}}, {"labels": {"cloud_id":"eq|0", "ip":"eq|127.0.0.4"}}]}, {"content_id":"6AB7D609B9391C81B459AFC5A91C22E7E1DD92A9A956D7263DF3001F87CAE6D6", "content_size": 1024, "labels_and":[{"labels":{"cloud_id":"eq|0", "ip":"eq|127.0.0.3,127.0.0.4,127.0.0.5,127.0.0.6"}}]}]}]}' }
	};

    string                                    biz_id           = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "所属业务ID", description: "", max_length: 64}];
    string                                    app_id           = 2 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "所属应用ID", description: "", max_length: 64}];
    string                                    memo             = 3 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "备注", description: "", max_length: 64}];
    repeated common.CommitMetadataWithContent metadatas        = 4 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "组模式配置提交元数据, 附带内容关联", description: ""}];
    bool                                      validate_content = 5 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "是否验证ContentID", description: "默认不验证，验证需要额外开销"}];
}

message CreateMultiCommitWithContentResp {
	option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
		json_schema: {
			title: "CreateMultiCommitWithContentResp"
			description: "创建新提交响应(组模式, 附带内容关联)"
			required: ["result", "code", "message"]
		}
        example: { value: '{ "result": true, "code": 0, "message": "OK", "data": {"multi_commit_id": "cd34e60a-ec95-11e9-b110-525400f99278"}}'}
	};

    message RespData {
        string multi_commit_id = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "新配置提交Commit ID", description: "组模式创建返回新配置提交Commit ID, 由于是多配置提交，需要比对是否已全部提交成功, 局部出现失败可用此ID差量重试"}];
    }

    bool           result  = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "执行结果", description: ""}];
    common.ErrCode code    = 2 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "错误码", description: ""}];
    string         message = 3 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "错误描述", description: ""}];
    RespData       data    = 4 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "结果", description: ""}];
}

message CreateMultiCommitReq {
	option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
		json_schema: {
			title: "CreateMultiCommitReq"
			description: "创建新提交请求(组模式)"
			required: ["biz_id", "app_id", "metadatas"]
		}
        example: { value: '{ "memo": "备注", "metadatas": [{"cfg_id": "626889ba-e9c1-11e9-8c23-525400f99278"}]}' }
	};

    string                         biz_id    = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "所属业务ID", description: "", max_length: 64}];
    string                         app_id    = 2 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "所属应用ID", description: "", max_length: 64}];
    string                         memo      = 3 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "备注", description: "", max_length: 64}];
    repeated common.CommitMetadata metadatas = 4 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "组模式配置提交元数据", description: ""}];
}

message CreateMultiCommitResp {
	option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
		json_schema: {
			title: "CreateMultiCommitResp"
			description: "创建新提交响应(组模式)"
			required: ["result", "code", "message"]
		}
        example: { value: '{ "result": true, "code": 0, "message": "OK", "data": {"multi_commit_id": "cd34e60a-ec95-11e9-b110-525400f99278"}}'}
	};

    message RespData {
        string multi_commit_id = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "新配置提交Commit ID", description: "组模式创建返回新配置提交Commit ID, 由于是多配置提交，需要比对是否已全部提交成功, 局部出现失败可用此ID差量重试"}];
    }

    bool           result  = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "执行结果", description: ""}];
    common.ErrCode code    = 2 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "错误码", description: ""}];
    string         message = 3 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "错误描述", description: ""}];
    RespData       data    = 4 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "结果", description: ""}];
}

message QueryMultiCommitReq {
	option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
		json_schema: {
			title: "QueryMultiCommitReq"
			description: "查询提交信息请求(组模式)"
			required: ["biz_id", "app_id", "multi_commit_id"]
		}
        example: { value: '{}'}
	};

    string biz_id          = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "目标配置所属业务ID", description: "", max_length: 64}];
    string app_id          = 2 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "所属应用ID", description: "", max_length: 64}];
    string multi_commit_id = 3 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "目标配置提交Commit ID", description: "", max_length: 64}];
}

message QueryMultiCommitResp {
	option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
		json_schema: {
			title: "QueryMultiCommitResp"
			description: "查询提交信息响应(组模式)"
			required: ["result", "code", "message"]
		}
        example: { value: '{ "result": true, "code": 0, "message": "OK", "data":{"multi_commit": {"multi_commit_id":"cd34e60a-ec95-11e9-b110-525400f99278", "biz_id":"f879ab8f-c7e5-11e9-9dc5-525400f99278", "app_id":"0b67a798-e9c1-11e9-8c23-525400f99278", "operator":"melo", "multi_release_id":"1fe5da7b-eef5-11e9-aa0e-525400f99278", "memo":"备注", "state":1, "created_at":"2019-10-12 10:12:55", "updated_at":"2019-10-12 10:14:32"}}}'}
	};

    message RespData {
        common.MultiCommit             multi_commit = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "配置提交Commit信息", description: "成功查询后返回Commit信息"}];
        repeated common.CommitMetadata metadatas    = 2 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "组模式配置提交的元数据", description: ""}];
    }

    bool           result  = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "执行结果", description: ""}];
    common.ErrCode code    = 2 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "错误码", description: ""}];
    string         message = 3 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "错误描述", description: ""}];
    RespData       data    = 4 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "结果", description: ""}];
}

message QueryHistoryMultiCommitsReq {
	option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
		json_schema: {
			title: "QueryHistoryMultiCommitsReq"
			description: "查询历史配置提交请求(组模式)"
			required: ["biz_id", "app_id", "page"]
		}
        example: { value: '{"operator": "melo", "query_type": 0, "page": {"start": 0, "limit": 50}}'}
	};

    string      biz_id     = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "目标配置所属业务ID", description: "", max_length: 64}];
    string      app_id     = 2 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "目标配置所属应用ID", description: "", max_length: 64}];
    string      operator   = 3 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "操作人名称", description: "可选，若非空则查询该操作人的提交记录", max_length: 64}];
    int32       query_type = 4 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "状态类型", description: "可选，0:全部状态 1:初始化的 2:已确认的 3:已撤销的", minimum: 0, maximum: 3}];
    common.Page page       = 5 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "分页设置", description: ""}];
}

message QueryHistoryMultiCommitsResp {
	option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
		json_schema: {
			title: "QueryHistoryMultiCommitsResp"
			description: "查询历史配置提交响应(组模式)"
			required: ["result", "code", "message"]
		}
        example: { value: '{ "result": true, "code": 0, "message": "OK", "data": {"total_count": 1, "info": [{"multi_commit_id":"cd34e60a-ec95-11e9-b110-525400f99278", "biz_id":"f879ab8f-c7e5-11e9-9dc5-525400f99278", "app_id":"0b67a798-e9c1-11e9-8c23-525400f99278", "operator":"melo", "multi_release_id":"1fe5da7b-eef5-11e9-aa0e-525400f99278", "memo":"备注", "state":1, "created_at":"2019-10-12 10:12:55", "updated_at":"2019-10-12 10:14:32"}]}}'}
	};

    message RespData {
        uint32                      total_count = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "总数据量", description: ""}];
        repeated common.MultiCommit info        = 2 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "结果", description: ""}];
    }

    bool           result  = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "执行结果", description: ""}];
    common.ErrCode code    = 2 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "错误码", description: ""}];
    string         message = 3 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "错误描述", description: ""}];
    RespData       data    = 4 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "结果", description: ""}];
}

message UpdateMultiCommitReq {
	option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
		json_schema: {
			title: "UpdateMultiCommitReq"
			description: "更新配置提交信息请求(组模式, 该接口只是更新commit本身的基础信息，更新配置提交内容使用Create接口的reuse模式)"
			required: ["biz_id", "app_id", "multi_commit_id"]
		}
        example: { value: '{"memo": "备注"}'}
	};

    string biz_id          = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "目标配置所属业务ID", description: "", max_length: 64}];
    string app_id          = 2 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "目标配置所属应用ID", description: "", max_length: 64}];
    string multi_commit_id = 3 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "目标配置提交ID", description: "", max_length: 64}];
    string memo            = 4 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "备注", description: "更新备注信息", max_length: 64}];
}

message UpdateMultiCommitResp {
	option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
		json_schema: {
			title: "UpdateMultiCommitResp"
			description: "更新配置提交信息响应(组模式)"
			required: ["result", "code", "message"]
		}
        example: { value: '{ "result": true, "code": 0, "message": "OK" }' }
	};

    bool           result  = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "执行结果", description: ""}];
    common.ErrCode code    = 2 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "错误码", description: ""}];
    string         message = 3 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "错误描述", description: ""}];
}

message CancelMultiCommitReq {
	option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
		json_schema: {
			title: "CancelMultiCommitReq"
			description: "取消配置提交请求(组模式)"
			required: ["biz_id", "app_id", "multi_commit_id"]
		}
        example: { value: '{}' }
	};

    string biz_id          = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "目标配置所属业务ID", description: "", max_length: 64}];
    string app_id          = 2 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "目标配置所属应用ID", description: "", max_length: 64}];
    string multi_commit_id = 3 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "目标配置提交ID", description: "", max_length: 64}];
}

message CancelMultiCommitResp {
	option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
		json_schema: {
			title: "CancelMultiCommitResp"
			description: "取消配置提交响应(组模式)"
			required: ["result", "code", "message"]
		}
        example: { value: '{ "result": true, "code": 0, "message": "OK" }' }
	};

    bool           result  = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "执行结果", description: ""}];
    common.ErrCode code    = 2 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "错误码", description: ""}];
    string         message = 3 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "错误描述", description: ""}];
}

message ConfirmMultiCommitReq {
	option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
		json_schema: {
			title: "ConfirmMultiCommitReq"
			description: "确认配置提交请求(组模式)"
			required: ["biz_id", "app_id", "multi_commit_id"]
		}
        example: { value: '{}' }
	};

    string biz_id          = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "目标配置所属业务ID", description: "", max_length: 64}];
    string app_id          = 2 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "目标配置所属应用ID", description: "", max_length: 64}];
    string multi_commit_id = 3 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "目标配置提交ID", description: "", max_length: 64}];
}

message ConfirmMultiCommitResp {
	option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
		json_schema: {
			title: "CancelMultiCommitResp"
			description: "取消配置提交响应(组模式)"
			required: ["result", "code", "message"]
		}
        example: { value: '{ "result": true, "code": 0, "message": "OK" }' }
	};

    bool           result  = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "执行结果", description: ""}];
    common.ErrCode code    = 2 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "错误码", description: ""}];
    string         message = 3 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "错误描述", description: ""}];
}

message CreateReleaseReq {
	option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
		json_schema: {
			title: "CreateReleaseReq"
			description: "创建新发布版本请求"
			required: ["biz_id", "app_id", "name", "commit_id"]
		}
        example: { value: '{"name": "发布版本", "commit_id": "1a9c2db1-e9c4-11e9-8c23-525400f99278", "memo": "备注"}' }
	};

    string biz_id      = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "目标配置所属业务ID", description: "", max_length: 64}];
    string app_id      = 2 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "目标配置所属应用ID", description: "", max_length: 64}];
    string name        = 3 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "新发布版本名称", description: "", max_length: 64}];
    string commit_id   = 4 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "目标配置提交ID", description: "", max_length: 64}];
    string strategy_id = 5 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "发布策略ID", description: "可选，关联发布策略", max_length: 64}];
    string memo        = 6 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "备注", description: "", max_length: 64}];
}

message CreateReleaseResp {
	option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
		json_schema: {
			title: "CreateReleaseResp"
			description: "创建新发布版本响应"
			required: ["result", "code", "message"]
		}
        example: { value: '{ "result": true, "code": 0, "message": "OK", "data": {"release_id": "1fe5da7b-eef5-11e9-aa0e-525400f99278"}}' }
	};

    message RespData {
        string release_id = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "新发布版本ID", description: "成功创建后返回新发布版本ID"}];
    }

    bool           result  = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "执行结果", description: ""}];
    common.ErrCode code    = 2 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "错误码", description: ""}];
    string         message = 3 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "错误描述", description: ""}];
    RespData       data    = 4 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "结果", description: ""}];
}

message QueryReleaseReq {
	option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
		json_schema: {
			title: "QueryReleaseReq"
			description: "查询发布版本信息请求"
			required: ["biz_id", "app_id", "release_id"]
		}
        example: { value: '{}' }
	};

    string biz_id     = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "所属业务ID", description: "", max_length: 64}];
    string app_id     = 2 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "目标配置所属应用ID", description: "", max_length: 64}];
    string release_id = 3 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "目标发布版本ID", description: "", max_length: 64}];
}

message QueryReleaseResp {
	option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
		json_schema: {
			title: "QueryReleaseResp"
			description: "查询发布版本信息响应"
			required: ["result", "code", "message"]
		}
        example: { value: '{ "result": true, "code": 0, "message": "OK", "data": {"id": 0, "release_id": "1fe5da7b-eef5-11e9-aa0e-525400f99278", "name": "发布版本", "app_id":"0b67a798-e9c1-11e9-8c23-525400f99278", "cfg_id": "626889ba-e9c1-11e9-8c23-525400f99278", "cfg_name": "server.yaml", "cfg_fpath": "/etc", "creator":"melo", "memo":"test", "commit_id": "cd34e60a-ec95-11e9-b110-525400f99278", "last_modify_by":"melo", "state": 0, "created_at":"2019-07-29 11:57:20", "updated_at":"2019-07-29 11:57:20"} }' }
	};

    bool           result  = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "执行结果", description: ""}];
    common.ErrCode code    = 2 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "错误码", description: ""}];
    string         message = 3 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "错误描述", description: ""}];
    common.Release data    = 4 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "目标发布版本信息", description: "成功查询后返回目标发布版本信息"}];
}

message QueryHistoryReleasesReq {
	option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
		json_schema: {
			title: "QueryHistoryReleasesReq"
			description: "查询历史发布版本记录请求"
			required: ["biz_id", "app_id", "cfg_id", "page"]
		}
        example: { value: '{"cfg_id": "626889ba-e9c1-11e9-8c23-525400f99278", "operator":"melo", "query_type": 0, "page":{"start": 0, "limit": 50}}' }
	};

    string      biz_id     = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "所属业务ID", description: "", max_length: 64}];
    string      app_id     = 2 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "目标配置所属应用ID", description: "", max_length: 64}];
    string      cfg_id     = 3 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "目标配置ID", description: "", max_length: 64}];
    string      operator   = 4 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "操作者名称", description: "可选，若非空则查询该操作人的版本记录", max_length: 64}];
    int32       query_type = 5 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "状态类型", description: "可选，状态类型 0:全部状态 1:初始化 2:已发布的 3:已取消的 4:已回滚的", minimum: 0, maximum: 3}];
    int32       order_type = 6 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "排序类型", description: "可选，排序类型 0(默认):版本序列号从大到小(版本新到旧) 1:更新时间从新到旧", minimum: 0, maximum: 1}];
    common.Page page       = 7 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "分页设置", description: ""}];
}

message QueryHistoryReleasesResp {
	option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
		json_schema: {
			title: "QueryHistoryReleasesResp"
			description: "查询历史发布版本记录响应"
			required: ["result", "code", "message"]
		}
        example: { value: '{ "result": true, "code": 0, "message": "OK", "releases": [{"id": 0, "release_id": "1fe5da7b-eef5-11e9-aa0e-525400f99278", "name": "发布版本", "app_id":"0b67a798-e9c1-11e9-8c23-525400f99278", "cfg_id": "626889ba-e9c1-11e9-8c23-525400f99278", "cfg_name": "server.yaml", "creator":"melo", "memo":"test", "commit_id": "cd34e60a-ec95-11e9-b110-525400f99278", "last_modify_by":"melo", "state": 0, "created_at":"2019-07-29 11:57:20", "updated_at":"2019-07-29 11:57:20"}] }' }
	};

    message RespData {
        uint32                  total_count = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "总数据量", description: ""}];
        repeated common.Release info        = 2 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "结果", description: ""}];
    }

    bool           result  = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "执行结果", description: ""}];
    common.ErrCode code    = 2 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "错误码", description: ""}];
    string         message = 3 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "错误描述", description: ""}];
    RespData       data    = 4 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "结果", description: ""}];
}

message UpdateReleaseReq {
	option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
		json_schema: {
			title: "UpdateReleaseReq"
			description: "更新发布版本信息请求"
			required: ["biz_id", "app_id", "release_id"]
		}
        example: { value: '{"memo": "备注", "state": 0, "name": "new name"}' }
	};

    string biz_id     = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "目标发布版本所属业务ID", description: "", max_length: 64}];
    string app_id     = 2 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "目标配置所属应用ID", description: "", max_length: 64}];
    string release_id = 3 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "目标发布版本ID", description: "", max_length: 64}];
    string name       = 4 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "发布策略名称", description: "可选，更新发布策略名称", max_length: 64}];
    string memo       = 5 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "备注", description: "可选，更新备注信息", max_length: 64}];
}

message UpdateReleaseResp {
	option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
		json_schema: {
			title: "UpdateReleaseResp"
			description: "更新发布版本信息响应"
			required: ["result", "code", "message"]
		}
        example: { value: '{ "result": true, "code": 0, "message": "OK" }' }
	};

    bool           result  = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "执行结果", description: ""}];
    common.ErrCode code    = 2 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "错误码", description: ""}];
    string         message = 3 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "错误描述", description: ""}];
}

message CancelReleaseReq {
	option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
		json_schema: {
			title: "CancelReleaseReq"
			description: "取消发布版本请求"
			required: ["biz_id", "app_id", "release_id"]
		}
        example: { value: '{}' }
	};

    string biz_id     = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "目标发布版本所属业务ID", description: "", max_length: 64}];
    string app_id     = 2 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "目标配置所属应用ID", description: "", max_length: 64}];
    string release_id = 3 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "目标发布版本ID", description: "", max_length: 64}];
}

message CancelReleaseResp {
	option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
		json_schema: {
			title: "CancelReleaseResp"
			description: "取消发布版本响应"
			required: ["result", "code", "message"]
		}
        example: { value: '{ "result": true, "code": 0, "message": "OK" }' }
	};

    bool           result  = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "执行结果", description: ""}];
    common.ErrCode code    = 2 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "错误码", description: ""}];
    string         message = 3 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "错误描述", description: ""}];
}

message PublishReleaseReq {
	option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
		json_schema: {
			title: "PublishReleaseReq"
			description: "发布版本请求"
			required: ["biz_id", "app_id", "release_id"]
		}
        example: { value: '{}' }
	};

    string biz_id     = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "目标发布版本所属业务ID", description: "", max_length: 64}];
    string app_id     = 2 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "目标配置所属应用ID", description: "", max_length: 64}];
    string release_id = 3 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "目标发布版本ID", description: "", max_length: 64}];
}

message PublishReleaseResp {
	option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
		json_schema: {
			title: "PublishReleaseResp"
			description: "发布版本响应"
			required: ["result", "code", "message"]
		}
        example: { value: '{ "result": true, "code": 0, "message": "OK" }' }
	};

    bool           result  = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "执行结果", description: ""}];
    common.ErrCode code    = 2 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "错误码", description: ""}];
    string         message = 3 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "错误描述", description: ""}];
}

message RollbackReleaseReq {
	option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
		json_schema: {
			title: "RollbackReleaseReq"
			description: "回滚指定版本请求"
			required: ["biz_id", "app_id", "release_id"]
		}
        example: { value: '{}' }
	};

    string biz_id         = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "目标回滚版本所属业务ID", description: "", max_length: 64}];
    string app_id         = 2 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "目标配置所属应用ID", description: "", max_length: 64}];
    string release_id     = 3 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "目标回滚版本ID", description: "已经发布的版本ID，需要把它回滚掉", max_length: 64}];
    string new_release_id = 4 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "期望回滚到版本ID", description: "期望回滚到的版本ID, 如果为空默认回滚到发布之前的状态", max_length: 64}];
}

message RollbackReleaseResp {
	option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
		json_schema: {
			title: "RollbackReleaseResp"
			description: "回滚指定版本响应"
			required: ["result", "code", "message"]
		}
        example: { value: '{ "result": true, "code": 0, "message": "OK" }' }
	};

    message RespData {
        string release_id = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "发布版本ID", description: "成功回滚后返回新版本ID", max_length: 64}];
    }

    bool           result  = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "执行结果", description: ""}];
    common.ErrCode code    = 2 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "错误码", description: ""}];
    string         message = 3 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "错误描述", description: ""}];
    RespData       data    = 4 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "结果", description: ""}];
}

message CreateMultiReleaseReq {
	option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
		json_schema: {
			title: "CreateMultiReleaseReq"
			description: "创建新发布版本请求(组模式)"
			required: ["biz_id", "name", "app_id", "multi_commit_id"]
		}
        example: { value: '{"name": "发布版本", "multi_commit_id": "1a9c2db1-e9c4-11e9-8c23-525400f99278", "memo": "备注"}' }
	};

    string biz_id          = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "目标配置所属业务ID", description: "", max_length: 64}];
    string app_id          = 2 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "目标配置所属应用ID", description: "", max_length: 64}];
    string name            = 3 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "新发布版本名称", description: "", max_length: 64}];
    string multi_commit_id = 4 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "目标配置提交ID", description: "", max_length: 64}];
    string strategy_id     = 5 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "发布策略ID", description: "可选，关联发布策略", max_length: 64}];
    string memo            = 6 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "备注", description: "", max_length: 64}];
}

message CreateMultiReleaseResp {
	option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
		json_schema: {
			title: "CreateMultiReleaseResp"
			description: "创建新发布版本响应(组模式)"
			required: ["result", "code", "message"]
		}
        example: { value: '{ "result": true, "code": 0, "message": "OK", "data": {"multi_release_id": "1fe5da7b-eef5-11e9-aa0e-525400f99278"} }' }
	};

    message RespData {
        string multi_release_id = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "新发布版本ID", description: "成功创建后返回新发布版本ID"}];
    }

    bool           result  = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "执行结果", description: ""}];
    common.ErrCode code    = 2 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "错误码", description: ""}];
    string         message = 3 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "错误描述", description: ""}];
    RespData       data    = 4 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "结果", description: ""}];
}

message QueryMultiReleaseReq {
	option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
		json_schema: {
			title: "QueryMultiReleaseReq"
			description: "查询发布版本信息请求(组模式)"
			required: ["biz_id", "app_id", "multi_release_id"]
		}
        example: { value: '{}' }
	};

    string biz_id           = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "所属业务ID", description: "", max_length: 64}];
    string app_id           = 2 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "目标所属应用ID", description: "", max_length: 64}];
    string multi_release_id = 3 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "目标发布版本ID", description: "", max_length: 64}];
}

message QueryMultiReleaseResp {
	option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
		json_schema: {
			title: "QueryMultiReleaseResp"
			description: "查询发布版本信息响应(组模式)"
			required: ["result", "code", "message"]
		}
        example: { value: '{ "result": true, "code": 0, "message": "OK", "data": {"multi_release": {"multi_release_id": "1fe5da7b-eef5-11e9-aa0e-525400f99278", "name": "发布版本", "biz_id":"0b67a798-e9c1-11e9-8c23-525400f99278", "app_id": "626889ba-e9c1-11e9-8c23-525400f99278", "creator":"melo", "memo":"备注", "multi_commit_id": "cd34e60a-ec95-11e9-b110-525400f99278", "last_modify_by":"melo", "state": 0, "created_at":"2019-07-29 11:57:20", "updated_at":"2019-07-29 11:57:20"}} }' }
	};

    message RespData {
        common.MultiRelease             multi_release = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "目标发布版本信息", description: "成功查询后返回目标发布版本信息"}];
        repeated common.ReleaseMetadata metadatas     = 2 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "组模式配置版本的元数据", description: ""}];
    }

    bool           result  = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "执行结果", description: ""}];
    common.ErrCode code    = 2 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "错误码", description: ""}];
    string         message = 3 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "错误描述", description: ""}];
    RespData       data    = 4 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "结果", description: ""}];
}

message QueryHistoryMultiReleasesReq {
	option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
		json_schema: {
			title: "QueryHistoryMultiReleasesReq"
			description: "查询历史发布版本记录请求(组模式)"
			required: ["biz_id", "app_id", "page"]
		}
        example: { value: '{"operator":"melo", "query_type": 0, "page":{"start": 0, "limit": 50}}' }
	};

    string      biz_id     = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "所属业务ID", description: "", max_length: 64}];
    string      app_id     = 2 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "所属应用ID", description: "", max_length: 64}];
    string      operator   = 3 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "操作者名称", description: "可选，若非空则查询该操作人的版本记录", max_length: 64}];
    int32       query_type = 4 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "状态类型", description: "可选，状态类型 0:全部状态 1:初始化 2:已发布的 3:已取消的 4:已回滚的", minimum: 0, maximum: 3}];
    int32       order_type = 5 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "排序类型", description: "可选，排序类型 0(默认):版本序列号从大到小(版本新到旧) 1:更新时间从新到旧", minimum: 0, maximum: 1}];
    common.Page page       = 6 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "分页设置", description: ""}];
}

message QueryHistoryMultiReleasesResp {
	option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
		json_schema: {
			title: "QueryHistoryMultiReleasesResp"
			description: "查询历史发布版本记录响应(组模式)"
			required: ["result", "code", "message"]
		}
        example: { value: '{ "result": true, "code": 0, "message": "OK", "data": {"total_count": 1, "info": [{"id": 0, "multi_release_id": "1fe5da7b-eef5-11e9-aa0e-525400f99278", "name": "发布版本", "biz_id":"biz01", "app_id":"0b67a798-e9c1-11e9-8c23-525400f99278", "creator":"melo", "memo":"test", "multi_commit_id": "cd34e60a-ec95-11e9-b110-525400f99278", "last_modify_by":"melo", "state": 0, "created_at":"2019-07-29 11:57:20", "updated_at":"2019-07-29 11:57:20"}]}}' }
	};

    message RespData {
        uint32                       total_count = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "总数据量", description: ""}];
        repeated common.MultiRelease info        = 2 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "结果", description: ""}];
    }

    bool           result  = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "执行结果", description: ""}];
    common.ErrCode code    = 2 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "错误码", description: ""}];
    string         message = 3 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "错误描述", description: ""}];
    RespData       data    = 4 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "结果", description: ""}];
}

message UpdateMultiReleaseReq {
	option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
		json_schema: {
			title: "UpdateMultiReleaseReq"
			description: "更新发布版本信息请求(组模式)"
			required: ["biz_id", "app_id", "multi_release_id"]
		}
        example: { value: '{"memo": "备注", "name": "new name"}' }
	};

    string biz_id           = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "目标发布版本所属业务ID", description: "", max_length: 64}];
    string app_id           = 2 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "目标所属应用ID", description: "", max_length: 64}];
    string multi_release_id = 3 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "目标发布版本ID", description: "", max_length: 64}];
    string name             = 4 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "发布策略名称", description: "可选，更新发布策略名称", max_length: 64}];
    string memo             = 5 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "备注", description: "可选，更新备注信息", max_length: 64}];
}

message UpdateMultiReleaseResp {
	option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
		json_schema: {
			title: "UpdateMultiReleaseResp"
			description: "更新发布版本信息响应(组模式)"
			required: ["redult", "code", "message"]
		}
        example: { value: '{ "redult": true, "code": 0, "message": "OK" }' }
	};

    bool           result  = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "执行结果", description: ""}];
    common.ErrCode code    = 2 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "错误码", description: ""}];
    string         message = 3 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "错误描述", description: ""}];
}

message CancelMultiReleaseReq {
	option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
		json_schema: {
			title: "CancelMultiReleaseReq"
			description: "取消发布版本请求(组模式)"
			required: ["biz_id", "app_id", "multi_release_id"]
		}
        example: { value: '{}' }
	};

    string biz_id           = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "目标发布版本所属业务ID", description: "", max_length: 64}];
    string app_id           = 2 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "目标所属应用ID", description: "", max_length: 64}];
    string multi_release_id = 3 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "目标发布版本ID", description: "", max_length: 64}];
}

message CancelMultiReleaseResp {
	option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
		json_schema: {
			title: "CancelMultiReleaseResp"
			description: "取消发布版本响应(组模式)"
			required: ["result", "code", "message"]
		}
        example: { value: '{ "result": true, "code": 0, "message": "OK" }' }
	};

    bool           result  = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "执行结果", description: ""}];
    common.ErrCode code    = 2 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "错误码", description: ""}];
    string         message = 3 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "错误描述", description: ""}];
}

message PublishMultiReleaseReq {
	option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
		json_schema: {
			title: "PublishMultiReleaseReq"
			description: "发布版本请求(组模式)"
			required: ["biz_id", "app_id", "multi_releaseid"]
		}
        example: { value: '{}' }
	};

    string biz_id           = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "目标发布版本所属业务ID", description: "", max_length: 64}];
    string app_id           = 2 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "目标所属应用ID", description: "", max_length: 64}];
    string multi_release_id = 3 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "目标发布版本ID", description: "", max_length: 64}];
}

message PublishMultiReleaseResp {
	option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
		json_schema: {
			title: "PublishMultiReleaseResp"
			description: "发布版本响应(组模式)"
			required: ["result", "code", "message"]
		}
        example: { value: '{ "result": true, "code": 0, "message": "OK" }' }
	};

    bool           result  = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "执行结果", description: ""}];
    common.ErrCode code    = 2 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "错误码", description: ""}];
    string         message = 3 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "错误描述", description: ""}];
}

message RollbackMultiReleaseReq {
	option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
		json_schema: {
			title: "RollbackMultiReleaseReq"
			description: "回滚指定版本请求(组模式)"
			required: ["biz_id", "app_id", "multi_release_id"]
		}
        example: { value: '{}' }
	};

    string biz_id           = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "目标回滚版本所属业务ID", description: "", max_length: 64}];
    string app_id           = 2 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "目标所属应用ID", description: "", max_length: 64}];
    string multi_release_id = 3 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "目标回滚版本ID", description: "已经发布的版本ID，需要把它回滚掉", max_length: 64}];
}

message RollbackMultiReleaseResp {
	option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
		json_schema: {
			title: "RollbackMultiReleaseResp"
			description: "回滚指定版本响应(组模式)"
			required: ["result", "code", "message"]
		}
        example: { value: '{ "result": true, "code": 0, "message": "OK" }' }
	};

    bool           result  = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "执行结果", description: ""}];
    common.ErrCode code    = 2 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "错误码", description: ""}];
    string         message = 3 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "错误描述", description: ""}];
}

message ReloadReq {
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
		json_schema: {
			title: "ReloadReq"
			description: "指定版本配置Reload请求"
			required: ["biz_id", "app_id"]
        }
        example: { value: '{"release_id": "879ab8f-xxxx-asdf-sdaf-525400f9927", "multi_release_id": "681gl66-xxxx-asdf-sdaf-525400f9927"}' }
    };

    string biz_id           = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = { title: "所属业务ID", description: "", max_length: 64 }];
    string app_id           = 2 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "目标所属应用ID", description: "", max_length: 64}];
    string release_id       = 3 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = { title: "可选，指定版本ID", description: "", max_length: 64 }];
    string multi_release_id = 4 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = { title: "可选，指定组模式版本ID", description: "", max_length: 64 }];
    bool   rollback         = 5 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = { title: "是否为指定版本的回滚reload操作", description: "指定release或multirelease回滚后，通过该操作完成reload"}];
}

message ReloadResp {
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
		json_schema: {
			title: "ReloadResp"
			description: "指定版本配置Reload请求响应"
			required: ["result", "code", "message"]
        }
        example: { value: '{ "result": true, "code": 0, "message": "OK" }' }
    };

    bool           result  = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "执行结果", description: ""}];
    common.ErrCode code    = 2 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = { title: "错误码", description: "" }];
    string         message = 3 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = { title: "错误描述", description: "" }];
}

message QueryReachableAppInstancesReq {
	option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
		json_schema: {
			title: "QueryReachableAppInstancesReq"
			description: "查询可触达应用实例列表请求"
			required: ["biz_id", "app_id", "page"]
		}
        example: { value: '{"page":{"start": 0, "limit": 50}}' }
	};

    string biz_id = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "所属业务ID", description: "", max_length: 64}];
    string app_id = 2 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "所属应用ID", description: "", max_length: 64}];

    // 期望的节点实例标签逻辑或集合, 该维度支持多个标签，每个标签之间为逻辑或的关系, 与其他维度之间整体为逻辑或关系. 格式：KV, map type / JSON KV, key为目标
    // 标签名称，value为标签规则表达式，格式为OP|VALUES, OP可以为eq(默认为空也按eq处理)等于、ne不等于、gt大于、lt小于、ge大于等于、le小于等于, VALUES可以为单独的标签值或多个标签值例如1,2,3 其表示IN(1,2,3)的语意. OP和VALUES之间用竖线分割.
    // 注意：以往协议中没有OP表达式支持的情况，即为空OP按照eq等于处理.
    repeated common.LabelsMap labels_or = 3 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "期望的节点实例标签逻辑或集合, 该维度支持多个标签，每个标签之间为逻辑或的关系", description: ""}];

    // 期望的节点实例标签逻辑与集合, 该维度支持多个标签，每个标签之间为逻辑与的关系, 与其他维度之间整体为逻辑或关系. 格式：KV, map type / JSON KV, key为目标
    // 标签名称，value为标签规则表达式，格式为OP|VALUES, OP可以为eq(默认为空也按eq处理)等于、ne不等于、gt大于、lt小于、ge大于等于、le小于等于, VALUES可以为单独的标签值或多个标签值例如1,2,3 其表示IN(1,2,3)的语意. OP和VALUES之间用竖线分割.
    // 注意：以往协议中没有OP表达式支持的情况，即为空OP按照eq等于处理.
    repeated common.LabelsMap labels_and = 4 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "期望的节点实例标签逻辑与集合, 该维度支持多个标签，每个标签之间为逻辑与的关系", description: ""}];

    common.Page page = 5 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "分页设置", description: ""}];
}

message QueryReachableAppInstancesResp {
	option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
		json_schema: {
			title: "QueryReachableAppInstancesResp"
			description: "查询可触达应用实例列表响应"
			required: ["result", "code", "message"]
		}
        example: { value: '{ "result": true, "code": 0, "message": "OK", "data": {"total_count": 1, "info": [{"instance_id": 0, "app_id": "0b67a798-e9c1-11e9-8c23-525400f99278", "cloud_id": "dc01", "ip":"127.0.0.1", "labels": "{}", "path":"/data/", "state": 0, "created_at":"2019-07-29 11:57:20", "updated_at":"2019-07-29 11:57:20"}]}}' }
	};

    message RespData {
        uint32                      total_count = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "总数据量", description: ""}];
        repeated common.AppInstance info        = 2 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "结果", description: ""}];
    }

    bool           result  = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "执行结果", description: ""}];
    common.ErrCode code    = 2 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "错误码", description: ""}];
    string         message = 3 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "错误描述", description: ""}];
    RespData       data    = 4 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "结果", description: ""}];
}

message QueryMatchedAppInstancesReq {
	option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
		json_schema: {
			title: "QueryMatchedAppInstancesReq"
			description: "查询版本策略匹配的应用实例列表请求"
			required: ["biz_id", "app_id", "page"]
		}
        example: { value: '{"release_id": "0b67a798-e9c1-11e9-8c23-525400f99278", "page": {"start": 0, "limit": 50}}' }
	};

    string      biz_id           = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "所属业务ID", description: "", max_length: 64}];
    string      app_id           = 2 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "所属应用ID", description: "", max_length: 64}];
    string      strategy_id      = 3 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "指定策略", description: "可选，非空时则查询该策略归属的App下当前可触达且与该策略匹配的实例列表", max_length: 64}];
    string      release_id       = 4 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "指定版本", description: "可选，非空时则查询指定版本中策略匹配的示例，若为无策略控制的版本则返回当前全部可触达实例列表", max_length: 64}];
    string      multi_release_id = 5 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "指定混合版本", description: "可选，非空时则查询指定版本中策略匹配的示例，若为无策略控制的版本则返回当前全部可触达实例列表", max_length: 64}];
    common.Page page             = 6 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "分页设置", description: ""}];
}

message QueryMatchedAppInstancesResp {
	option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
		json_schema: {
			title: "QueryMatchedAppInstancesResp"
			description: "查询版本策略匹配的应用实例列表响应"
			required: ["result", "code", "message"]
		}
        example: { value: '{ "result": true, "code": 0, "message": "OK", "data": { "total_count": 1, "info": [{"instance_id": 0, "app_id": "0b67a798-e9c1-11e9-8c23-525400f99278", "cloud_id": "dc01", "ip":"127.0.0.1", "labels": "{}", "path":"/data/", "state": 0, "created_at":"2019-07-29 11:57:20", "updated_at":"2019-07-29 11:57:20"}]}}' }
	};

    message RespData {
        uint32                      total_count = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "总数据量", description: ""}];
        repeated common.AppInstance info        = 2 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "结果", description: ""}];
    }

    bool           result  = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "执行结果", description: ""}];
    common.ErrCode code    = 2 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "错误码", description: ""}];
    string         message = 3 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "错误描述", description: ""}];
    RespData       data    = 4 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "结果", description: ""}];
}

message QueryEffectedAppInstancesReq {
	option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
		json_schema: {
			title: "QueryEffectedAppInstancesReq"
			description: "查询已生效指定版本的应用实例列表请求"
			required: ["biz_id", "app_id", "cfg_id", "release_id", "page"]
		}
        example: { value: '{"cfg_id": "626889ba-e9c1-11e9-8c23-525400f99278", "release_id":"1fe5da7b-eef5-11e9-aa0e-525400f99278", "page": {"start": 0, "limit": 50}}' }
	};

    string      biz_id      = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "所属业务ID", description: "", max_length: 64}];
    string      app_id      = 2 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "所属应用ID", description: "", max_length: 64}];
    string      cfg_id      = 3 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "目标配置ID", description: "", max_length: 64}];
    string      release_id  = 4 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "目标发布版本ID", description: "", max_length: 64}];
    common.Page page        = 5 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "分页设置", description: ""}];
    int32       timeout_sec = 6 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "节点生效超时时间", description: "默认：600，即10分钟"}];
}

message QueryEffectedAppInstancesResp {
	option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
		json_schema: {
			title: "QueryEffectedAppInstancesResp"
			description: "查询已生效指定版本的应用实例列表响应"
			required: ["result", "code", "message"]
		}
        example: { value: '{ "result": true, "code": 0, "message": "OK", "data": {"total_count": 1, "info": [{"instance_id": 0, "app_id": "0b67a798-e9c1-11e9-8c23-525400f99278", "cloud_id": "dc01", "ip":"127.0.0.1", "labels": "{}", "path":"/data/", "state": 0, "created_at":"2019-07-29 11:57:20", "updated_at":"2019-07-29 11:57:20"}]}}' }
	};

    message RespData {
        uint32                             total_count = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "总数据量", description: ""}];
        repeated common.AppInstanceRelease info        = 2 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "结果", description: ""}];
    }

    bool           result  = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "执行结果", description: ""}];
    common.ErrCode code    = 2 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "错误码", description: ""}];
    string         message = 3 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "错误描述", description: ""}];
    RespData       data    = 4 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "结果", description: ""}];
}

message QueryAppInstanceReleaseReq {
	option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
		json_schema: {
			title: "QueryAppInstanceReleaseReq"
			description: "查询目标应用实例已生效版本信息请求"
			required: ["biz_id", "app_id", "cloud_id", "ip", "path", "cfg_id"]
		}
        example: { value: '{"cloud_id":"dc01", "ip":"127.0.0.1", "path":"/data/", "cfg_id": "626889ba-e9c1-11e9-8c23-525400f99278"}' }
	};

    string biz_id   = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "所属业务ID", description: "", max_length: 64}];
    string app_id   = 2 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "目标应用实例所属应用ID", description: "", max_length: 64}];
    string cloud_id = 3 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "区域标识", description: "", max_length: 64}];
    string ip       = 4 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "IP", description: "目标应用实例IP", max_length: 32}];
    string path     = 5 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "配置缓存路径", description: "", max_length: 32}];
    string cfg_id   = 6 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "目标配置ID", description: "", max_length: 64}];
}

message QueryAppInstanceReleaseResp {
	option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
		json_schema: {
			title: "QueryAppInstanceReleaseResp"
			description: "查询目标应用实例已生效版本信息响应"
			required: ["result", "code", "message"]
		}
        example: { value: '{ "result": true, "code": 0, "message": "OK", "data": {"release_id": "1fe5da7b-eef5-11e9-aa0e-525400f99278", "commit_id": "cd34e60a-ec95-11e9-b110-525400f99278", "content_id": "30EDCF2561FBAA45CB2A22B2E60C6B1C7ED8518AF00D8E69BA01B1FBA31126DC"}}' }
	};

    message RespData {
        string content_id       = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "配置内容签名CID", description: "成功查询后返回当前已生效版本CID"}];
        uint32 content_size     = 2 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "内容大小", description: ""}];
        string release_id       = 3 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "发布版本ID", description: "成功查询后返回当前已生效发布版本ID"}];
        string commit_id        = 4 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "配置提交Commit ID", description: "成功查询后返回当前已生效版本关联的提交ID"}];
        string multi_release_id = 5 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "混合发布版本ID", description: "成功查询后返回当前已生效版本关联的混合发布版本ID"}];
        string multi_commit_id  = 6 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "混合提交ID", description: "成功查询后返回当前已生效版本关联的混合提交ID"}];
        string release_name     = 7 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "版本名称", description: "", max_length: 64}];
        string memo             = 8 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "版本备注信息", description: "", max_length: 64}];
    }

    bool           result  = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "执行结果", description: ""}];
    common.ErrCode code    = 2 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "错误码", description: ""}];
    string         message = 3 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "错误描述", description: ""}];
    RespData       data    = 4 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "结果", description: ""}];
}

message CreateStrategyReq {
	option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
		json_schema: {
			title: "CreateStrategyReq"
			description: "创建发布策略请求"
			required: ["biz_id", "app_id", "name"]
		}
        example: { value: '{"name":"策略1", "labels_or": [{"labels": {"k1": "v1", "k2": "gt|v2", "k3": "le|v3"}}], "labels_and": [{"labels":{"k1": "ne|v1", "k2": "lt|v2", "k3": "ge|v3"}}, {"labels":{"k1": "ne|v1", "k2": "lt|v2", "k3": "ge|v3"}}], "memo": "备注"}' }
	};

    string biz_id = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "所属业务ID", description: "", max_length: 64}];
    string app_id = 2 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "所属应用ID", description: "", max_length: 64}];
    string name   = 3 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "策略名称", description: "", max_length: 64}];

    // 期望的节点实例标签逻辑或集合, 该维度支持多个标签，每个标签之间为逻辑或的关系, 与其他维度之间整体为逻辑或关系. 格式：KV, map type / JSON KV, key为目标
    // 标签名称，value为标签规则表达式，格式为OP|VALUES, OP可以为eq(默认为空也按eq处理)等于、ne不等于、gt大于、lt小于、ge大于等于、le小于等于, VALUES可以为单独的标签值或多个标签值例如1,2,3 其表示IN(1,2,3)的语意. OP和VALUES之间用竖线分割.
    // 注意：以往协议中没有OP表达式支持的情况，即为空OP按照eq等于处理.
    repeated common.LabelsMap labels_or = 4 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "期望的节点实例标签逻辑或集合, 该维度支持多个标签，每个标签之间为逻辑或的关系", description: ""}];

    // 期望的节点实例标签逻辑与集合, 该维度支持多个标签，每个标签之间为逻辑与的关系, 与其他维度之间整体为逻辑或关系. 格式：KV, map type / JSON KV, key为目标
    // 标签名称，value为标签规则表达式，格式为OP|VALUES, OP可以为eq(默认为空也按eq处理)等于、ne不等于、gt大于、lt小于、ge大于等于、le小于等于, VALUES可以为单独的标签值或多个标签值例如1,2,3 其表示IN(1,2,3)的语意. OP和VALUES之间用竖线分割.
    // 注意：以往协议中没有OP表达式支持的情况，即为空OP按照eq等于处理.
    repeated common.LabelsMap labels_and = 5 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "期望的节点实例标签逻辑与集合, 该维度支持多个标签，每个标签之间为逻辑与的关系", description: ""}];

    string memo   = 6 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "备注", description: "", max_length: 64}];
}

message CreateStrategyResp {
	option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
		json_schema: {
			title: "CreateStrategyResp"
			description: "创建发布策略响应"
			required: ["result", "code", "message"]
		}
        example: { value: '{ "result": true, "code": 0, "message": "OK", "data": {"strategy_id": "b6fb71da-eef5-11e9-aa0e-525400f99278"}}' }
	};

    message RespData {
        string strategy_id = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "新发布策略ID", description: "成功创建后返回新发布策略ID"}];
    }

    bool           result  = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "执行结果", description: ""}];
    common.ErrCode code    = 2 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "错误码", description: ""}];
    string         message = 3 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "错误描述", description: ""}];
    RespData       data    = 4 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "结果", description: ""}];
}

message QueryStrategyReq {
	option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
		json_schema: {
			title: "QueryStrategyReq"
			description: "查询发布策略信息请求"
			required: ["biz_id", "app_id"]
		}
        example: { value: '{"name":"策略1", "strategy_id": "b6fb71da-eef5-11e9-aa0e-525400f99278"}' }
	};

    string biz_id      = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "所属业务ID", description: "", max_length: 64}];
    string app_id      = 2 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "所属应用ID", description: "可选，非空时将基于目标发布策略所属应用的ID和发布策略名称查询", max_length: 64}];
    string strategy_id = 3 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "目标发布策略ID", description: "可选，非空时将基于目标发布策略ID查询", max_length: 64}];
    string name        = 4 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "目标发布策略名称", description: "可选，非空时将基于目标发布策略所属应用的ID和发布策略名称查询", max_length: 64}];
}

message QueryStrategyResp {
	option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
		json_schema: {
			title: "QueryStrategyResp"
			description: "查询发布策略信息响应"
			required: ["result", "code", "message"]
		}
        example: { value: '{ "result": true, "code": 0, "message": "OK", "data": {"strategy_id": "b6fb71da-eef5-11e9-aa0e-525400f99278", "app_id": "0b67a798-e9c1-11e9-8c23-525400f99278", "name": "策略1", "content":"{}", "creator": "melo", "memo":"test", "state": 0, "last_modify_by": "melo", "created_at":"2019-07-29 11:57:20", "updated_at":"2019-07-29 11:57:20"}}' }
	};

    bool            result  = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "执行结果", description: ""}];
    common.ErrCode  code    = 2 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "错误码", description: ""}];
    string          message = 3 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "错误描述", description: ""}];
    common.Strategy data    = 4 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "发布策略信息", description: "成功查询后返回目标发布策略详细信息"}];
}

message QueryStrategyListReq {
	option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
		json_schema: {
			title: "QueryStrategyListReq"
			description: "查询发布策略列表请求"
			required: ["biz_id", "app_id", "page"]
		}
        example: { value: '{"page": {"start": 0, "limit": 50}}' }
	};

    string      biz_id = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "所属业务ID", description: "", max_length: 64}];
    string      app_id = 2 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "目标应用ID", description: "", max_length: 64}];
    common.Page page   = 3 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "分页设置", description: ""}];
}

message QueryStrategyListResp {
	option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
		json_schema: {
			title: "QueryStrategyListResp"
			description: "查询发布策略列表响应"
			required: ["result", "code", "message"]
		}
        example: { value: '{ "result": true, "code": 0, "message": "OK", "data": {"total_count": 1, "info": [{"strategy_id": "b6fb71da-eef5-11e9-aa0e-525400f99278", "app_id": "0b67a798-e9c1-11e9-8c23-525400f99278", "name": "策略1", "content":"{}", "creator": "melo", "memo":"test", "state": 0, "last_modify_by": "melo", "created_at":"2019-07-29 11:57:20", "updated_at":"2019-07-29 11:57:20"}]}}' }
	};

    message RespData {
        uint32                   total_count = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "总数据量", description: ""}];
        repeated common.Strategy info        = 2 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "结果", description: ""}];
    }

    bool           result  = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "执行结果", description: ""}];
    common.ErrCode code    = 2 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "错误码", description: ""}];
    string         message = 3 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "错误描述", description: ""}];
    RespData       data    = 4 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "结果", description: ""}];
}

message DeleteStrategyReq {
	option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
		json_schema: {
			title: "DeleteStrategyReq"
			description: "删除发布策略请求"
			required: ["biz_id", "app_id"", strategy_id"]
		}
        example: { value: '{}' }
	};

    string biz_id      = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "所属业务ID", description: "", max_length: 64}];
    string app_id      = 2 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "目标应用ID", description: "", max_length: 64}];
    string strategy_id = 3 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "目标发布策略ID", description: "", max_length: 64}];
}

message DeleteStrategyResp {
	option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
		json_schema: {
			title: "DeleteStrategyResp"
			description: "删除发布策略响应"
			required: ["result", "code", "message"]
		}
        example: { value: '{ "result": true, "code": 0, "message": "OK"}' }
	};

    bool           result  = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "执行结果", description: ""}];
    common.ErrCode code    = 2 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "错误码", description: ""}];
    string         message = 3 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "错误描述", description: ""}];
}

message CreateProcAttrReq {
	option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
		json_schema: {
			title: "CreateProcAttrReq"
			description: "创建应用绑定请求"
			required: ["cloud_id", "ip", "biz_id", "app_id", "path"]
		}
        example: { value: '{ "cloud_id": "1", "ip": "127.0.0.1", "path": "/data/", "memo": "备注"}' }
	};

    string              cloud_id = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "进程环境子网ID", description: "", max_length: 64}];
    string              ip       = 2 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "进程环境主机IP", description: "", max_length: 32}];
    string              biz_id   = 3 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "业务ID", description: "", max_length: 64}];
    string              app_id   = 4 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "应用ID", description: "", max_length: 64}];
    map<string, string> labels   = 5 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "应用实例labels", description: "节点KV标签对(非策略复合OP|VALUE格式), {\"labels\":{\"k1\":\"v1\"}}"}];
    string              path     = 6 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "配置缓存路径设置", description: "", max_length: 128}];
    string              memo     = 7 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "备注", description: "", max_length: 64}];
    bool                override = 8 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "是否强制覆盖已存在的绑定信息", description: ""}];
}

message CreateProcAttrResp {
	option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
		json_schema: {
			title: "CreateProcAttrResp"
			description: "创建应用绑定响应"
			required: ["result", "code", "message"]
		}
        example: { value: '{ "result": true, "code": 0, "message": "OK"}' }
	};

    bool           result  = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "执行结果", description: ""}];
    common.ErrCode code    = 2 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "错误码", description: ""}];
    string         message = 3 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "错误描述", description: ""}];
}

message CreateProcAttrBatchReq {
	option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
		json_schema: {
			title: "CreateProcAttrBatchReq"
			description: "批量创建应用绑定请求"
			required: ["biz_id", "app_id", "data"]
		}
        example: { value: '{ "biz_id": "99278", "app_id": "A-0b67a798-e9c1-11e9-8c23-525400f99278", "data": [{"cloud_id": "1", "ip": "127.0.0.1", "path": "/data/", "memo": "备注"}]}' }
	};

    message ReqData {
        string              cloud_id = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "进程环境子网ID", description: "", max_length: 64}];
        string              ip       = 2 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "进程环境主机IP", description: "", max_length: 32}];
        map<string, string> labels   = 3 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "应用实例labels", description: "节点KV标签对(非策略复合OP|VALUE格式), {\"labels\":{\"k1\":\"v1\"}}"}];
        string              path     = 4 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "配置缓存路径设置", description: "", max_length: 128}];
        string              memo     = 5 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "备注", description: "", max_length: 64}];
    }

    string           biz_id = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "业务ID", description: "", max_length: 64}];
    string           app_id = 2 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "应用ID", description: "", max_length: 64}];
    repeated ReqData data   = 3 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "批量绑定信息", description: ""}];
}

message CreateProcAttrBatchResp {
	option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
		json_schema: {
			title: "CreateProcAttrBatchResp"
			description: "批量创建应用绑定响应"
			required: ["result", "code", "message"]
		}
        example: { value: '{ "result": true, "code": 0, "message": "OK"}' }
	};

    message ProcAttrInfo {
        string              cloud_id = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "进程环境子网ID", description: "", max_length: 64}];
        string              ip       = 2 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "进程环境主机IP", description: "", max_length: 32}];
        map<string, string> labels   = 3 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "应用实例labels", description: "节点KV标签对(非策略复合OP|VALUE格式), {\"labels\":{\"k1\":\"v1\"}}"}];
        string              path     = 4 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "配置缓存路径设置", description: "", max_length: 128}];
        string              memo     = 5 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "备注", description: "", max_length: 64}];
    }

    message FailedInfo {
        ProcAttrInfo   info    = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "失败的绑定信息", description: ""}];
        common.ErrCode code    = 2 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "失败错误码", description: ""}];
        string         message = 3 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "失败错误描述", description: ""}];
    }

    message RespData {
        repeated FailedInfo failed = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "创建失败的列表", description: ""}];
    }

    bool           result  = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "执行结果", description: ""}];
    common.ErrCode code    = 2 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "错误码", description: ""}];
    string         message = 3 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "错误描述", description: ""}];
    RespData       data    = 4 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "结果", description: ""}];
}

message QueryHostProcAttrReq {
	option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
		json_schema: {
			title: "QueryHostProcAttrReq"
			description: "查询主机应用绑定信息请求"
			required: ["cloud_id", "ip", "biz_id", "app_id", "path"]
		}
        example: { value: '{ "cloud_id": "1", "ip": "127.0.0.1", "path": "/etc" }' }
	};

    string cloud_id = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "进程环境子网ID", description: "", max_length: 64}];
    string ip       = 2 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "进程环境主机IP", description: "", max_length: 32}];
    string biz_id   = 3 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "业务ID", description: "", max_length: 64}];
    string app_id   = 4 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "应用ID", description: "", max_length: 64}];
    string path     = 5 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "配置缓存路径设置", description: "", max_length: 128}];
}

message QueryHostProcAttrResp {
	option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
		json_schema: {
			title: "QueryHostProcAttrResp"
			description: "查询主机应用绑定信息响应"
			required: ["result", "code", "message"]
		}
        example: { value: '{ "result": true, "code": 0, "message": "OK", "data": {"cloud_id": "1", "ip": "127.0.0.1", "biz_id": "b6fb71da-eef5-11e9-aa0e-525400f99278", "app_id": "0b67a798-e9c1-11e9-8c23-525400f99278", "path": "/data/", "labels":"{}", "memo":"test", "state": 0, "last_modify_by": "melo", "created_at":"2019-07-29 11:57:20", "updated_at":"2019-07-29 11:57:20"}}' }
	};

    bool            result  = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "执行结果", description: ""}];
    common.ErrCode  code    = 2 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "错误码", description: ""}];
    string          message = 3 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "错误描述", description: ""}];
    common.ProcAttr data    = 4 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "绑定信息", description: "成功查询后返回目标主机上应用的绑定信息"}];
}

message QueryHostProcAttrListReq {
	option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
		json_schema: {
			title: "QueryHostProcAttrListReq"
			description: "查询主机应用绑定列表请求"
			required: ["cloud_id", "ip", "page"]
		}
        example: { value: '{ "cloud_id": "1", "ip": "127.0.0.1", "page": {"start": 0, "limit":50}}' }
	};

    string      cloud_id = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "进程环境子网ID", description: "", max_length: 64}];
    string      ip       = 2 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "进程环境主机IP", description: "", max_length: 32}];
    common.Page page     = 3 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "分页设置", description: ""}];
}

message QueryHostProcAttrListResp {
	option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
		json_schema: {
			title: "QueryHostProcAttrListResp"
			description: "查询主机应用绑定列表响应"
			required: ["result", "code", "message"]
		}
        example: { value: '{ "result": true, "code": 0, "message": "OK", "data": { "total_count": 1, "info":[{"cloud_id": "1", "ip": "127.0.0.1", "biz_id": "b6fb71da-eef5-11e9-aa0e-525400f99278", "app_id": "0b67a798-e9c1-11e9-8c23-525400f99278", "path": "/data/", "labels":"{}", "memo":"test", "state": 0, "last_modify_by": "melo", "created_at":"2019-07-29 11:57:20", "updated_at":"2019-07-29 11:57:20"}]}}' }
	};

    message RespData {
        uint32                   total_count = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "总数据量", description: ""}];
        repeated common.ProcAttr info        = 2 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "结果", description: ""}];
    }

    bool           result  = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "执行结果", description: ""}];
    common.ErrCode code    = 2 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "错误码", description: ""}];
    string         message = 3 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "错误描述", description: ""}];
    RespData       data    = 4 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "结果", description: ""}];
}

message QueryAppProcAttrListReq {
	option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
		json_schema: {
			title: "QueryAppProcAttrListReq"
			description: "查询应用绑定的主机列表请求"
			required: ["biz_id", "app_id", "page"]
		}
        example: { value: '{ "biz_id": "f879ab8f-c7e5-11e9-9dc5-525400f99278", "app_id": "0b67a798-e9c1-11e9-8c23-525400f99278", "page": {"start": 0, "limit":50}}' }
	};

    string      biz_id = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "业务ID", description: "", max_length: 64}];
    string      app_id = 2 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "应用ID", description: "", max_length: 64}];
    common.Page page   = 3 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "分页设置", description: ""}];
}

message QueryAppProcAttrListResp {
	option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
		json_schema: {
			title: "QueryAppProcAttrListResp"
			description: "查询应用绑定的主机列表响应"
			required: ["result", "code", "message"]
		}
        example: { value: '{ "result": true, "code": 0, "message": "OK", "data": {"total_count": 1, "info":[{"cloud_id": "1", "ip": "127.0.0.1", "biz_id": "b6fb71da-eef5-11e9-aa0e-525400f99278", "app_id": "0b67a798-e9c1-11e9-8c23-525400f99278", "path": "/data/", "labels":"{}", "memo":"test", "state": 0, "last_modify_by": "melo", "created_at":"2019-07-29 11:57:20", "updated_at":"2019-07-29 11:57:20"}]}}' }
	};

    message RespData {
        uint32                   total_count = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "总数据量", description: ""}];
        repeated common.ProcAttr info        = 2 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "结果", description: ""}];
    }

    bool           result  = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "执行结果", description: ""}];
    common.ErrCode code    = 2 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "错误码", description: ""}];
    string         message = 3 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "错误描述", description: ""}];
    RespData       data    = 4 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "结果", description: ""}];
}

message UpdateProcAttrReq {
	option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
		json_schema: {
			title: "UpdateProcAttrReq "
			description: "更新主机应用绑定信息请求"
			required: ["cloud_id", "ip", "biz_id", "app_id", "path"]
		}
        example: { value: '{ "cloud_id": "1", "ip": "127.0.0.1", "path": "/data/", "memo": "备注"}' }
	};

    string              cloud_id  = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "进程环境子网ID", description: "", max_length: 64}];
    string              ip        = 2 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "进程环境主机IP", description: "", max_length: 32}];
    string              biz_id    = 3 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "业务ID", description: "", max_length: 64}];
    string              app_id    = 4 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "应用ID", description: "", max_length: 64}];
    string              path      = 5 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "更新配置缓存路径设置", description: "", max_length: 128}];
    map<string, string> labels    = 6 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "更新应用实例labels", description: "节点KV标签对(非策略复合OP|VALUE格式), {\"labels\":{\"k1\":\"v1\"}}"}];
    string              memo      = 7 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "更新备注", description: "", max_length: 64}];
}

message UpdateProcAttrResp {
	option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
		json_schema: {
			title: "UpdateProcAttrResp"
			description: "更新主机应用绑定信息响应"
			required: ["result", "code", "message"]
		}
        example: { value: '{ "result": true, "code": 0, "message": "OK"}' }
	};

    bool           result  = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "执行结果", description: ""}];
    common.ErrCode code    = 2 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "错误码", description: ""}];
    string         message = 3 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "错误描述", description: ""}];
}

message DeleteProcAttrReq {
	option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
		json_schema: {
			title: "DeleteProcAttrReq "
			description: "删除主机应用绑定信息请求"
			required: ["cloud_id", "ip", "biz_id", "app_id", "path"]
		}
        example: { value: '{ "cloud_id": "1", "ip": "127.0.0.1", "path":"/etc"}' }
	};

    string cloud_id = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "进程环境子网ID", description: "", max_length: 64}];
    string ip       = 2 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "进程环境主机IP", description: "", max_length: 32}];
    string biz_id   = 3 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "业务ID", description: "", max_length: 64}];
    string app_id   = 4 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "应用ID", description: "", max_length: 64}];
    string path     = 5 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "更新配置缓存路径设置", description: "", max_length: 128}];
}

message DeleteProcAttrResp {
	option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
		json_schema: {
			title: "DeleteProcAttrReq"
			description: "删除主机应用绑定信息响应"
			required: ["result", "code", "message"]
		}
        example: { value: '{ "result": true, "code": 0, "message": "OK"}' }
	};

    bool           result  = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "执行结果", description: ""}];
    common.ErrCode code    = 2 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "错误码", description: ""}];
    string         message = 3 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "错误描述", description: ""}];
}

message QueryAuditListReq {
	option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
		json_schema: {
			title: "QueryAuditListReq"
			description: "查询历史审计记录请求"
			required: ["biz_id", "source_type", "op_type", "page"]
		}
        example: { value: '{"source_type": 0, "op_type": 0, "page": {"start": 0, "limit": 50}}' }
	};

    string      biz_id      = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "所属业务ID", description: "", max_length: 64}];
    int32       source_type = 2 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "目标资源类型", description: "", minimum: 0}];
    int32       op_type     = 3 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "目标资源操作类型", description: "", minimum: 0}];
    string      source_id   = 4 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "资源对象ID", description: "", max_length: 64}];
    string      operator    = 5 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "操作人名称", description: "", max_length: 64}];
    common.Page page        = 6 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "分页设置", description: ""}];
}

message QueryAuditListResp {
	option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
		json_schema: {
			title: "QueryAuditListResp"
			description: "查询历史审计记录响应"
			required: ["result", "code", "message"]
		}
        example: { value: '{ "result": true, "code": 0, "message": "OK", "data":{"total_count": 1, "info":[{}]}}' }
	};

    message RespData {
        uint32                total_count = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "总数据量", description: ""}];
        repeated common.Audit info        = 2 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "结果", description: ""}];
    }

    bool           result  = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "执行结果", description: ""}];
    common.ErrCode code    = 2 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "错误码", description: ""}];
    string         message = 3 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "错误描述", description: ""}];
    RespData       data    = 4 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "结果", description: ""}];
}

message HealthzReq {
    string seq = 1;
}

message HealthzResp {
    string                   seq     = 1;
    common.ErrCode           code    = 2;
    string                   message = 3;
    common.ModuleHealthzInfo data    = 4;
}
