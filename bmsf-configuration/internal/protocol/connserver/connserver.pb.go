// Code generated by protoc-gen-go.
// source: connserver.proto
// DO NOT EDIT!

/*
Package connserver is a generated protocol buffer package.

It is generated from these files:
	connserver.proto

It has these top-level messages:
	QueryAppMetadataReq
	QueryAppMetadataResp
	AccessReq
	AccessResp
	SCCMDPing
	SCCMDPushNotification
	SCCMDPushRollbackNotification
	SCCMDPushReloadNotification
	SignallingChannelDownStream
	SignallingChannelUpStream
	ReportReq
	ReportResp
	PullReleaseReq
	PullReleaseResp
	PullConfigListReq
	PullConfigListResp
	HealthzReq
	HealthzResp
*/
package connserver

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import common "bk-bscp/internal/protocol/common"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type SignallingChannelCmd int32

const (
	SignallingChannelCmd_SCCMD_C2S_PING                       SignallingChannelCmd = 0
	SignallingChannelCmd_SCCMD_S2C_PONG                       SignallingChannelCmd = 1
	SignallingChannelCmd_SCCMD_S2C_PUSH_NOTIFICATION          SignallingChannelCmd = 2
	SignallingChannelCmd_SCCMD_S2C_PUSH_ROLLBACK_NOTIFICATION SignallingChannelCmd = 3
	SignallingChannelCmd_SCCMD_S2C_PUSH_RELOAD_NOTIFICATION   SignallingChannelCmd = 4
)

var SignallingChannelCmd_name = map[int32]string{
	0: "SCCMD_C2S_PING",
	1: "SCCMD_S2C_PONG",
	2: "SCCMD_S2C_PUSH_NOTIFICATION",
	3: "SCCMD_S2C_PUSH_ROLLBACK_NOTIFICATION",
	4: "SCCMD_S2C_PUSH_RELOAD_NOTIFICATION",
}
var SignallingChannelCmd_value = map[string]int32{
	"SCCMD_C2S_PING":                       0,
	"SCCMD_S2C_PONG":                       1,
	"SCCMD_S2C_PUSH_NOTIFICATION":          2,
	"SCCMD_S2C_PUSH_ROLLBACK_NOTIFICATION": 3,
	"SCCMD_S2C_PUSH_RELOAD_NOTIFICATION":   4,
}

func (x SignallingChannelCmd) String() string {
	return proto.EnumName(SignallingChannelCmd_name, int32(x))
}
func (SignallingChannelCmd) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type QueryAppMetadataReq struct {
	Seq   string `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	BizId string `protobuf:"bytes,2,opt,name=biz_id,json=bizId" json:"biz_id,omitempty"`
	AppId string `protobuf:"bytes,3,opt,name=app_id,json=appId" json:"app_id,omitempty"`
}

func (m *QueryAppMetadataReq) Reset()                    { *m = QueryAppMetadataReq{} }
func (m *QueryAppMetadataReq) String() string            { return proto.CompactTextString(m) }
func (*QueryAppMetadataReq) ProtoMessage()               {}
func (*QueryAppMetadataReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *QueryAppMetadataReq) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *QueryAppMetadataReq) GetBizId() string {
	if m != nil {
		return m.BizId
	}
	return ""
}

func (m *QueryAppMetadataReq) GetAppId() string {
	if m != nil {
		return m.AppId
	}
	return ""
}

type QueryAppMetadataResp struct {
	Seq     string         `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	Code    common.ErrCode `protobuf:"varint,2,opt,name=code,enum=common.ErrCode" json:"code,omitempty"`
	Message string         `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *QueryAppMetadataResp) Reset()                    { *m = QueryAppMetadataResp{} }
func (m *QueryAppMetadataResp) String() string            { return proto.CompactTextString(m) }
func (*QueryAppMetadataResp) ProtoMessage()               {}
func (*QueryAppMetadataResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *QueryAppMetadataResp) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *QueryAppMetadataResp) GetCode() common.ErrCode {
	if m != nil {
		return m.Code
	}
	return common.ErrCode_E_OK
}

func (m *QueryAppMetadataResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type AccessReq struct {
	Seq     string `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	BizId   string `protobuf:"bytes,2,opt,name=biz_id,json=bizId" json:"biz_id,omitempty"`
	AppId   string `protobuf:"bytes,3,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	CloudId string `protobuf:"bytes,4,opt,name=cloud_id,json=cloudId" json:"cloud_id,omitempty"`
	Ip      string `protobuf:"bytes,5,opt,name=ip" json:"ip,omitempty"`
	Path    string `protobuf:"bytes,6,opt,name=path" json:"path,omitempty"`
	Labels  string `protobuf:"bytes,7,opt,name=labels" json:"labels,omitempty"`
}

func (m *AccessReq) Reset()                    { *m = AccessReq{} }
func (m *AccessReq) String() string            { return proto.CompactTextString(m) }
func (*AccessReq) ProtoMessage()               {}
func (*AccessReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *AccessReq) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *AccessReq) GetBizId() string {
	if m != nil {
		return m.BizId
	}
	return ""
}

func (m *AccessReq) GetAppId() string {
	if m != nil {
		return m.AppId
	}
	return ""
}

func (m *AccessReq) GetCloudId() string {
	if m != nil {
		return m.CloudId
	}
	return ""
}

func (m *AccessReq) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *AccessReq) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *AccessReq) GetLabels() string {
	if m != nil {
		return m.Labels
	}
	return ""
}

type AccessResp struct {
	Seq       string             `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	Code      common.ErrCode     `protobuf:"varint,2,opt,name=code,enum=common.ErrCode" json:"code,omitempty"`
	Message   string             `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
	Endpoints []*common.Endpoint `protobuf:"bytes,4,rep,name=endpoints" json:"endpoints,omitempty"`
}

func (m *AccessResp) Reset()                    { *m = AccessResp{} }
func (m *AccessResp) String() string            { return proto.CompactTextString(m) }
func (*AccessResp) ProtoMessage()               {}
func (*AccessResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *AccessResp) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *AccessResp) GetCode() common.ErrCode {
	if m != nil {
		return m.Code
	}
	return common.ErrCode_E_OK
}

func (m *AccessResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *AccessResp) GetEndpoints() []*common.Endpoint {
	if m != nil {
		return m.Endpoints
	}
	return nil
}

type SCCMDPing struct {
	BizId   string `protobuf:"bytes,1,opt,name=biz_id,json=bizId" json:"biz_id,omitempty"`
	AppId   string `protobuf:"bytes,2,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	CloudId string `protobuf:"bytes,3,opt,name=cloud_id,json=cloudId" json:"cloud_id,omitempty"`
	Ip      string `protobuf:"bytes,4,opt,name=ip" json:"ip,omitempty"`
	Path    string `protobuf:"bytes,5,opt,name=path" json:"path,omitempty"`
	Labels  string `protobuf:"bytes,6,opt,name=labels" json:"labels,omitempty"`
	Timeout int64  `protobuf:"varint,7,opt,name=timeout" json:"timeout,omitempty"`
}

func (m *SCCMDPing) Reset()                    { *m = SCCMDPing{} }
func (m *SCCMDPing) String() string            { return proto.CompactTextString(m) }
func (*SCCMDPing) ProtoMessage()               {}
func (*SCCMDPing) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *SCCMDPing) GetBizId() string {
	if m != nil {
		return m.BizId
	}
	return ""
}

func (m *SCCMDPing) GetAppId() string {
	if m != nil {
		return m.AppId
	}
	return ""
}

func (m *SCCMDPing) GetCloudId() string {
	if m != nil {
		return m.CloudId
	}
	return ""
}

func (m *SCCMDPing) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *SCCMDPing) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *SCCMDPing) GetLabels() string {
	if m != nil {
		return m.Labels
	}
	return ""
}

func (m *SCCMDPing) GetTimeout() int64 {
	if m != nil {
		return m.Timeout
	}
	return 0
}

type SCCMDPushNotification struct {
	BizId     string `protobuf:"bytes,1,opt,name=biz_id,json=bizId" json:"biz_id,omitempty"`
	AppId     string `protobuf:"bytes,2,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	CfgId     string `protobuf:"bytes,3,opt,name=cfg_id,json=cfgId" json:"cfg_id,omitempty"`
	CfgName   string `protobuf:"bytes,4,opt,name=cfg_name,json=cfgName" json:"cfg_name,omitempty"`
	CfgFpath  string `protobuf:"bytes,5,opt,name=cfg_fpath,json=cfgFpath" json:"cfg_fpath,omitempty"`
	Serialno  uint64 `protobuf:"varint,6,opt,name=serialno" json:"serialno,omitempty"`
	ReleaseId string `protobuf:"bytes,7,opt,name=release_id,json=releaseId" json:"release_id,omitempty"`
}

func (m *SCCMDPushNotification) Reset()                    { *m = SCCMDPushNotification{} }
func (m *SCCMDPushNotification) String() string            { return proto.CompactTextString(m) }
func (*SCCMDPushNotification) ProtoMessage()               {}
func (*SCCMDPushNotification) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *SCCMDPushNotification) GetBizId() string {
	if m != nil {
		return m.BizId
	}
	return ""
}

func (m *SCCMDPushNotification) GetAppId() string {
	if m != nil {
		return m.AppId
	}
	return ""
}

func (m *SCCMDPushNotification) GetCfgId() string {
	if m != nil {
		return m.CfgId
	}
	return ""
}

func (m *SCCMDPushNotification) GetCfgName() string {
	if m != nil {
		return m.CfgName
	}
	return ""
}

func (m *SCCMDPushNotification) GetCfgFpath() string {
	if m != nil {
		return m.CfgFpath
	}
	return ""
}

func (m *SCCMDPushNotification) GetSerialno() uint64 {
	if m != nil {
		return m.Serialno
	}
	return 0
}

func (m *SCCMDPushNotification) GetReleaseId() string {
	if m != nil {
		return m.ReleaseId
	}
	return ""
}

type SCCMDPushRollbackNotification struct {
	BizId     string `protobuf:"bytes,1,opt,name=biz_id,json=bizId" json:"biz_id,omitempty"`
	AppId     string `protobuf:"bytes,2,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	CfgId     string `protobuf:"bytes,3,opt,name=cfg_id,json=cfgId" json:"cfg_id,omitempty"`
	CfgName   string `protobuf:"bytes,4,opt,name=cfg_name,json=cfgName" json:"cfg_name,omitempty"`
	CfgFpath  string `protobuf:"bytes,5,opt,name=cfg_fpath,json=cfgFpath" json:"cfg_fpath,omitempty"`
	Serialno  uint64 `protobuf:"varint,6,opt,name=serialno" json:"serialno,omitempty"`
	ReleaseId string `protobuf:"bytes,7,opt,name=release_id,json=releaseId" json:"release_id,omitempty"`
}

func (m *SCCMDPushRollbackNotification) Reset()                    { *m = SCCMDPushRollbackNotification{} }
func (m *SCCMDPushRollbackNotification) String() string            { return proto.CompactTextString(m) }
func (*SCCMDPushRollbackNotification) ProtoMessage()               {}
func (*SCCMDPushRollbackNotification) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *SCCMDPushRollbackNotification) GetBizId() string {
	if m != nil {
		return m.BizId
	}
	return ""
}

func (m *SCCMDPushRollbackNotification) GetAppId() string {
	if m != nil {
		return m.AppId
	}
	return ""
}

func (m *SCCMDPushRollbackNotification) GetCfgId() string {
	if m != nil {
		return m.CfgId
	}
	return ""
}

func (m *SCCMDPushRollbackNotification) GetCfgName() string {
	if m != nil {
		return m.CfgName
	}
	return ""
}

func (m *SCCMDPushRollbackNotification) GetCfgFpath() string {
	if m != nil {
		return m.CfgFpath
	}
	return ""
}

func (m *SCCMDPushRollbackNotification) GetSerialno() uint64 {
	if m != nil {
		return m.Serialno
	}
	return 0
}

func (m *SCCMDPushRollbackNotification) GetReleaseId() string {
	if m != nil {
		return m.ReleaseId
	}
	return ""
}

type SCCMDPushReloadNotification struct {
	BizId      string             `protobuf:"bytes,1,opt,name=biz_id,json=bizId" json:"biz_id,omitempty"`
	AppId      string             `protobuf:"bytes,2,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	ReloadSpec *common.ReloadSpec `protobuf:"bytes,3,opt,name=reload_spec,json=reloadSpec" json:"reload_spec,omitempty"`
}

func (m *SCCMDPushReloadNotification) Reset()                    { *m = SCCMDPushReloadNotification{} }
func (m *SCCMDPushReloadNotification) String() string            { return proto.CompactTextString(m) }
func (*SCCMDPushReloadNotification) ProtoMessage()               {}
func (*SCCMDPushReloadNotification) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *SCCMDPushReloadNotification) GetBizId() string {
	if m != nil {
		return m.BizId
	}
	return ""
}

func (m *SCCMDPushReloadNotification) GetAppId() string {
	if m != nil {
		return m.AppId
	}
	return ""
}

func (m *SCCMDPushReloadNotification) GetReloadSpec() *common.ReloadSpec {
	if m != nil {
		return m.ReloadSpec
	}
	return nil
}

type SignallingChannelDownStream struct {
	Seq     string               `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	Cmd     SignallingChannelCmd `protobuf:"varint,2,opt,name=cmd,enum=connserver.SignallingChannelCmd" json:"cmd,omitempty"`
	CmdPing *SCCMDPing           `protobuf:"bytes,3,opt,name=cmd_ping,json=cmdPing" json:"cmd_ping,omitempty"`
}

func (m *SignallingChannelDownStream) Reset()                    { *m = SignallingChannelDownStream{} }
func (m *SignallingChannelDownStream) String() string            { return proto.CompactTextString(m) }
func (*SignallingChannelDownStream) ProtoMessage()               {}
func (*SignallingChannelDownStream) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *SignallingChannelDownStream) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *SignallingChannelDownStream) GetCmd() SignallingChannelCmd {
	if m != nil {
		return m.Cmd
	}
	return SignallingChannelCmd_SCCMD_C2S_PING
}

func (m *SignallingChannelDownStream) GetCmdPing() *SCCMDPing {
	if m != nil {
		return m.CmdPing
	}
	return nil
}

type SignallingChannelUpStream struct {
	Seq         string                         `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	Cmd         SignallingChannelCmd           `protobuf:"varint,2,opt,name=cmd,enum=connserver.SignallingChannelCmd" json:"cmd,omitempty"`
	CmdPush     *SCCMDPushNotification         `protobuf:"bytes,3,opt,name=cmd_push,json=cmdPush" json:"cmd_push,omitempty"`
	CmdRollback *SCCMDPushRollbackNotification `protobuf:"bytes,4,opt,name=cmd_rollback,json=cmdRollback" json:"cmd_rollback,omitempty"`
	CmdReload   *SCCMDPushReloadNotification   `protobuf:"bytes,5,opt,name=cmd_reload,json=cmdReload" json:"cmd_reload,omitempty"`
}

func (m *SignallingChannelUpStream) Reset()                    { *m = SignallingChannelUpStream{} }
func (m *SignallingChannelUpStream) String() string            { return proto.CompactTextString(m) }
func (*SignallingChannelUpStream) ProtoMessage()               {}
func (*SignallingChannelUpStream) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *SignallingChannelUpStream) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *SignallingChannelUpStream) GetCmd() SignallingChannelCmd {
	if m != nil {
		return m.Cmd
	}
	return SignallingChannelCmd_SCCMD_C2S_PING
}

func (m *SignallingChannelUpStream) GetCmdPush() *SCCMDPushNotification {
	if m != nil {
		return m.CmdPush
	}
	return nil
}

func (m *SignallingChannelUpStream) GetCmdRollback() *SCCMDPushRollbackNotification {
	if m != nil {
		return m.CmdRollback
	}
	return nil
}

func (m *SignallingChannelUpStream) GetCmdReload() *SCCMDPushReloadNotification {
	if m != nil {
		return m.CmdReload
	}
	return nil
}

type ReportReq struct {
	Seq     string               `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	BizId   string               `protobuf:"bytes,2,opt,name=biz_id,json=bizId" json:"biz_id,omitempty"`
	AppId   string               `protobuf:"bytes,3,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	CloudId string               `protobuf:"bytes,4,opt,name=cloud_id,json=cloudId" json:"cloud_id,omitempty"`
	Ip      string               `protobuf:"bytes,5,opt,name=ip" json:"ip,omitempty"`
	Path    string               `protobuf:"bytes,6,opt,name=path" json:"path,omitempty"`
	Labels  string               `protobuf:"bytes,7,opt,name=labels" json:"labels,omitempty"`
	Infos   []*common.ReportInfo `protobuf:"bytes,8,rep,name=infos" json:"infos,omitempty"`
}

func (m *ReportReq) Reset()                    { *m = ReportReq{} }
func (m *ReportReq) String() string            { return proto.CompactTextString(m) }
func (*ReportReq) ProtoMessage()               {}
func (*ReportReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *ReportReq) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *ReportReq) GetBizId() string {
	if m != nil {
		return m.BizId
	}
	return ""
}

func (m *ReportReq) GetAppId() string {
	if m != nil {
		return m.AppId
	}
	return ""
}

func (m *ReportReq) GetCloudId() string {
	if m != nil {
		return m.CloudId
	}
	return ""
}

func (m *ReportReq) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *ReportReq) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *ReportReq) GetLabels() string {
	if m != nil {
		return m.Labels
	}
	return ""
}

func (m *ReportReq) GetInfos() []*common.ReportInfo {
	if m != nil {
		return m.Infos
	}
	return nil
}

type ReportResp struct {
	Seq     string         `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	Code    common.ErrCode `protobuf:"varint,2,opt,name=code,enum=common.ErrCode" json:"code,omitempty"`
	Message string         `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *ReportResp) Reset()                    { *m = ReportResp{} }
func (m *ReportResp) String() string            { return proto.CompactTextString(m) }
func (*ReportResp) ProtoMessage()               {}
func (*ReportResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *ReportResp) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *ReportResp) GetCode() common.ErrCode {
	if m != nil {
		return m.Code
	}
	return common.ErrCode_E_OK
}

func (m *ReportResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type PullReleaseReq struct {
	Seq            string `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	BizId          string `protobuf:"bytes,2,opt,name=biz_id,json=bizId" json:"biz_id,omitempty"`
	AppId          string `protobuf:"bytes,3,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	CloudId        string `protobuf:"bytes,4,opt,name=cloud_id,json=cloudId" json:"cloud_id,omitempty"`
	Ip             string `protobuf:"bytes,5,opt,name=ip" json:"ip,omitempty"`
	Path           string `protobuf:"bytes,6,opt,name=path" json:"path,omitempty"`
	Labels         string `protobuf:"bytes,7,opt,name=labels" json:"labels,omitempty"`
	CfgId          string `protobuf:"bytes,8,opt,name=cfg_id,json=cfgId" json:"cfg_id,omitempty"`
	LocalReleaseId string `protobuf:"bytes,9,opt,name=local_release_id,json=localReleaseId" json:"local_release_id,omitempty"`
	ReleaseId      string `protobuf:"bytes,10,opt,name=release_id,json=releaseId" json:"release_id,omitempty"`
}

func (m *PullReleaseReq) Reset()                    { *m = PullReleaseReq{} }
func (m *PullReleaseReq) String() string            { return proto.CompactTextString(m) }
func (*PullReleaseReq) ProtoMessage()               {}
func (*PullReleaseReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *PullReleaseReq) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *PullReleaseReq) GetBizId() string {
	if m != nil {
		return m.BizId
	}
	return ""
}

func (m *PullReleaseReq) GetAppId() string {
	if m != nil {
		return m.AppId
	}
	return ""
}

func (m *PullReleaseReq) GetCloudId() string {
	if m != nil {
		return m.CloudId
	}
	return ""
}

func (m *PullReleaseReq) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *PullReleaseReq) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *PullReleaseReq) GetLabels() string {
	if m != nil {
		return m.Labels
	}
	return ""
}

func (m *PullReleaseReq) GetCfgId() string {
	if m != nil {
		return m.CfgId
	}
	return ""
}

func (m *PullReleaseReq) GetLocalReleaseId() string {
	if m != nil {
		return m.LocalReleaseId
	}
	return ""
}

func (m *PullReleaseReq) GetReleaseId() string {
	if m != nil {
		return m.ReleaseId
	}
	return ""
}

type PullReleaseResp struct {
	Seq         string          `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	Code        common.ErrCode  `protobuf:"varint,2,opt,name=code,enum=common.ErrCode" json:"code,omitempty"`
	Message     string          `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
	NeedEffect  bool            `protobuf:"varint,4,opt,name=need_effect,json=needEffect" json:"need_effect,omitempty"`
	Release     *common.Release `protobuf:"bytes,5,opt,name=release" json:"release,omitempty"`
	ContentId   string          `protobuf:"bytes,6,opt,name=content_id,json=contentId" json:"content_id,omitempty"`
	ContentSize uint32          `protobuf:"varint,7,opt,name=content_size,json=contentSize" json:"content_size,omitempty"`
}

func (m *PullReleaseResp) Reset()                    { *m = PullReleaseResp{} }
func (m *PullReleaseResp) String() string            { return proto.CompactTextString(m) }
func (*PullReleaseResp) ProtoMessage()               {}
func (*PullReleaseResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *PullReleaseResp) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *PullReleaseResp) GetCode() common.ErrCode {
	if m != nil {
		return m.Code
	}
	return common.ErrCode_E_OK
}

func (m *PullReleaseResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *PullReleaseResp) GetNeedEffect() bool {
	if m != nil {
		return m.NeedEffect
	}
	return false
}

func (m *PullReleaseResp) GetRelease() *common.Release {
	if m != nil {
		return m.Release
	}
	return nil
}

func (m *PullReleaseResp) GetContentId() string {
	if m != nil {
		return m.ContentId
	}
	return ""
}

func (m *PullReleaseResp) GetContentSize() uint32 {
	if m != nil {
		return m.ContentSize
	}
	return 0
}

type PullConfigListReq struct {
	Seq   string       `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	BizId string       `protobuf:"bytes,2,opt,name=biz_id,json=bizId" json:"biz_id,omitempty"`
	AppId string       `protobuf:"bytes,3,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	Page  *common.Page `protobuf:"bytes,4,opt,name=page" json:"page,omitempty"`
}

func (m *PullConfigListReq) Reset()                    { *m = PullConfigListReq{} }
func (m *PullConfigListReq) String() string            { return proto.CompactTextString(m) }
func (*PullConfigListReq) ProtoMessage()               {}
func (*PullConfigListReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *PullConfigListReq) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *PullConfigListReq) GetBizId() string {
	if m != nil {
		return m.BizId
	}
	return ""
}

func (m *PullConfigListReq) GetAppId() string {
	if m != nil {
		return m.AppId
	}
	return ""
}

func (m *PullConfigListReq) GetPage() *common.Page {
	if m != nil {
		return m.Page
	}
	return nil
}

type PullConfigListResp struct {
	Seq     string           `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	Code    common.ErrCode   `protobuf:"varint,2,opt,name=code,enum=common.ErrCode" json:"code,omitempty"`
	Message string           `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
	Configs []*common.Config `protobuf:"bytes,4,rep,name=configs" json:"configs,omitempty"`
}

func (m *PullConfigListResp) Reset()                    { *m = PullConfigListResp{} }
func (m *PullConfigListResp) String() string            { return proto.CompactTextString(m) }
func (*PullConfigListResp) ProtoMessage()               {}
func (*PullConfigListResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *PullConfigListResp) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *PullConfigListResp) GetCode() common.ErrCode {
	if m != nil {
		return m.Code
	}
	return common.ErrCode_E_OK
}

func (m *PullConfigListResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *PullConfigListResp) GetConfigs() []*common.Config {
	if m != nil {
		return m.Configs
	}
	return nil
}

type HealthzReq struct {
	Seq string `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
}

func (m *HealthzReq) Reset()                    { *m = HealthzReq{} }
func (m *HealthzReq) String() string            { return proto.CompactTextString(m) }
func (*HealthzReq) ProtoMessage()               {}
func (*HealthzReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *HealthzReq) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

type HealthzResp struct {
	Seq     string                    `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	Code    common.ErrCode            `protobuf:"varint,2,opt,name=code,enum=common.ErrCode" json:"code,omitempty"`
	Message string                    `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
	Data    *common.ModuleHealthzInfo `protobuf:"bytes,4,opt,name=data" json:"data,omitempty"`
}

func (m *HealthzResp) Reset()                    { *m = HealthzResp{} }
func (m *HealthzResp) String() string            { return proto.CompactTextString(m) }
func (*HealthzResp) ProtoMessage()               {}
func (*HealthzResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *HealthzResp) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *HealthzResp) GetCode() common.ErrCode {
	if m != nil {
		return m.Code
	}
	return common.ErrCode_E_OK
}

func (m *HealthzResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *HealthzResp) GetData() *common.ModuleHealthzInfo {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryAppMetadataReq)(nil), "connserver.QueryAppMetadataReq")
	proto.RegisterType((*QueryAppMetadataResp)(nil), "connserver.QueryAppMetadataResp")
	proto.RegisterType((*AccessReq)(nil), "connserver.AccessReq")
	proto.RegisterType((*AccessResp)(nil), "connserver.AccessResp")
	proto.RegisterType((*SCCMDPing)(nil), "connserver.SCCMDPing")
	proto.RegisterType((*SCCMDPushNotification)(nil), "connserver.SCCMDPushNotification")
	proto.RegisterType((*SCCMDPushRollbackNotification)(nil), "connserver.SCCMDPushRollbackNotification")
	proto.RegisterType((*SCCMDPushReloadNotification)(nil), "connserver.SCCMDPushReloadNotification")
	proto.RegisterType((*SignallingChannelDownStream)(nil), "connserver.SignallingChannelDownStream")
	proto.RegisterType((*SignallingChannelUpStream)(nil), "connserver.SignallingChannelUpStream")
	proto.RegisterType((*ReportReq)(nil), "connserver.ReportReq")
	proto.RegisterType((*ReportResp)(nil), "connserver.ReportResp")
	proto.RegisterType((*PullReleaseReq)(nil), "connserver.PullReleaseReq")
	proto.RegisterType((*PullReleaseResp)(nil), "connserver.PullReleaseResp")
	proto.RegisterType((*PullConfigListReq)(nil), "connserver.PullConfigListReq")
	proto.RegisterType((*PullConfigListResp)(nil), "connserver.PullConfigListResp")
	proto.RegisterType((*HealthzReq)(nil), "connserver.HealthzReq")
	proto.RegisterType((*HealthzResp)(nil), "connserver.HealthzResp")
	proto.RegisterEnum("connserver.SignallingChannelCmd", SignallingChannelCmd_name, SignallingChannelCmd_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Connection service

type ConnectionClient interface {
	QueryAppMetadata(ctx context.Context, in *QueryAppMetadataReq, opts ...grpc.CallOption) (*QueryAppMetadataResp, error)
	Access(ctx context.Context, in *AccessReq, opts ...grpc.CallOption) (*AccessResp, error)
	SignallingChannel(ctx context.Context, opts ...grpc.CallOption) (Connection_SignallingChannelClient, error)
	Report(ctx context.Context, in *ReportReq, opts ...grpc.CallOption) (*ReportResp, error)
	PullRelease(ctx context.Context, in *PullReleaseReq, opts ...grpc.CallOption) (*PullReleaseResp, error)
	PullConfigList(ctx context.Context, in *PullConfigListReq, opts ...grpc.CallOption) (*PullConfigListResp, error)
	Healthz(ctx context.Context, in *HealthzReq, opts ...grpc.CallOption) (*HealthzResp, error)
}

type connectionClient struct {
	cc *grpc.ClientConn
}

func NewConnectionClient(cc *grpc.ClientConn) ConnectionClient {
	return &connectionClient{cc}
}

func (c *connectionClient) QueryAppMetadata(ctx context.Context, in *QueryAppMetadataReq, opts ...grpc.CallOption) (*QueryAppMetadataResp, error) {
	out := new(QueryAppMetadataResp)
	err := grpc.Invoke(ctx, "/connserver.Connection/QueryAppMetadata", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectionClient) Access(ctx context.Context, in *AccessReq, opts ...grpc.CallOption) (*AccessResp, error) {
	out := new(AccessResp)
	err := grpc.Invoke(ctx, "/connserver.Connection/Access", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectionClient) SignallingChannel(ctx context.Context, opts ...grpc.CallOption) (Connection_SignallingChannelClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Connection_serviceDesc.Streams[0], c.cc, "/connserver.Connection/SignallingChannel", opts...)
	if err != nil {
		return nil, err
	}
	x := &connectionSignallingChannelClient{stream}
	return x, nil
}

type Connection_SignallingChannelClient interface {
	Send(*SignallingChannelDownStream) error
	Recv() (*SignallingChannelUpStream, error)
	grpc.ClientStream
}

type connectionSignallingChannelClient struct {
	grpc.ClientStream
}

func (x *connectionSignallingChannelClient) Send(m *SignallingChannelDownStream) error {
	return x.ClientStream.SendMsg(m)
}

func (x *connectionSignallingChannelClient) Recv() (*SignallingChannelUpStream, error) {
	m := new(SignallingChannelUpStream)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *connectionClient) Report(ctx context.Context, in *ReportReq, opts ...grpc.CallOption) (*ReportResp, error) {
	out := new(ReportResp)
	err := grpc.Invoke(ctx, "/connserver.Connection/Report", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectionClient) PullRelease(ctx context.Context, in *PullReleaseReq, opts ...grpc.CallOption) (*PullReleaseResp, error) {
	out := new(PullReleaseResp)
	err := grpc.Invoke(ctx, "/connserver.Connection/PullRelease", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectionClient) PullConfigList(ctx context.Context, in *PullConfigListReq, opts ...grpc.CallOption) (*PullConfigListResp, error) {
	out := new(PullConfigListResp)
	err := grpc.Invoke(ctx, "/connserver.Connection/PullConfigList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectionClient) Healthz(ctx context.Context, in *HealthzReq, opts ...grpc.CallOption) (*HealthzResp, error) {
	out := new(HealthzResp)
	err := grpc.Invoke(ctx, "/connserver.Connection/Healthz", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Connection service

type ConnectionServer interface {
	QueryAppMetadata(context.Context, *QueryAppMetadataReq) (*QueryAppMetadataResp, error)
	Access(context.Context, *AccessReq) (*AccessResp, error)
	SignallingChannel(Connection_SignallingChannelServer) error
	Report(context.Context, *ReportReq) (*ReportResp, error)
	PullRelease(context.Context, *PullReleaseReq) (*PullReleaseResp, error)
	PullConfigList(context.Context, *PullConfigListReq) (*PullConfigListResp, error)
	Healthz(context.Context, *HealthzReq) (*HealthzResp, error)
}

func RegisterConnectionServer(s *grpc.Server, srv ConnectionServer) {
	s.RegisterService(&_Connection_serviceDesc, srv)
}

func _Connection_QueryAppMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAppMetadataReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectionServer).QueryAppMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/connserver.Connection/QueryAppMetadata",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectionServer).QueryAppMetadata(ctx, req.(*QueryAppMetadataReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Connection_Access_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccessReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectionServer).Access(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/connserver.Connection/Access",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectionServer).Access(ctx, req.(*AccessReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Connection_SignallingChannel_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ConnectionServer).SignallingChannel(&connectionSignallingChannelServer{stream})
}

type Connection_SignallingChannelServer interface {
	Send(*SignallingChannelUpStream) error
	Recv() (*SignallingChannelDownStream, error)
	grpc.ServerStream
}

type connectionSignallingChannelServer struct {
	grpc.ServerStream
}

func (x *connectionSignallingChannelServer) Send(m *SignallingChannelUpStream) error {
	return x.ServerStream.SendMsg(m)
}

func (x *connectionSignallingChannelServer) Recv() (*SignallingChannelDownStream, error) {
	m := new(SignallingChannelDownStream)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Connection_Report_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectionServer).Report(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/connserver.Connection/Report",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectionServer).Report(ctx, req.(*ReportReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Connection_PullRelease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PullReleaseReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectionServer).PullRelease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/connserver.Connection/PullRelease",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectionServer).PullRelease(ctx, req.(*PullReleaseReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Connection_PullConfigList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PullConfigListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectionServer).PullConfigList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/connserver.Connection/PullConfigList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectionServer).PullConfigList(ctx, req.(*PullConfigListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Connection_Healthz_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthzReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectionServer).Healthz(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/connserver.Connection/Healthz",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectionServer).Healthz(ctx, req.(*HealthzReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Connection_serviceDesc = grpc.ServiceDesc{
	ServiceName: "connserver.Connection",
	HandlerType: (*ConnectionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "QueryAppMetadata",
			Handler:    _Connection_QueryAppMetadata_Handler,
		},
		{
			MethodName: "Access",
			Handler:    _Connection_Access_Handler,
		},
		{
			MethodName: "Report",
			Handler:    _Connection_Report_Handler,
		},
		{
			MethodName: "PullRelease",
			Handler:    _Connection_PullRelease_Handler,
		},
		{
			MethodName: "PullConfigList",
			Handler:    _Connection_PullConfigList_Handler,
		},
		{
			MethodName: "Healthz",
			Handler:    _Connection_Healthz_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SignallingChannel",
			Handler:       _Connection_SignallingChannel_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "connserver.proto",
}

func init() { proto.RegisterFile("connserver.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1138 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xdc, 0x57, 0x4d, 0x6f, 0xdb, 0x36,
	0x18, 0x8e, 0x6c, 0xc7, 0x1f, 0xaf, 0x33, 0xc7, 0xe5, 0x9a, 0xce, 0x71, 0x90, 0x26, 0xd5, 0x3e,
	0xea, 0x0e, 0x48, 0x52, 0xb8, 0xa7, 0x01, 0xbd, 0x64, 0x4a, 0xd2, 0x18, 0x4b, 0x9c, 0x54, 0x6e,
	0xb0, 0xd3, 0x60, 0xd0, 0x14, 0x25, 0x13, 0x95, 0x48, 0x55, 0x92, 0x37, 0x2c, 0xa7, 0xdd, 0x76,
	0x1a, 0x76, 0xda, 0x0f, 0xd8, 0x8e, 0xbb, 0xed, 0xb0, 0x7f, 0x31, 0x60, 0xc7, 0xfd, 0x8d, 0xfd,
	0x84, 0x81, 0x94, 0x64, 0xcb, 0xb6, 0x1a, 0x60, 0x58, 0x02, 0x14, 0x3b, 0x59, 0x7a, 0xde, 0x97,
	0x2f, 0x9f, 0xf7, 0x11, 0xf9, 0x90, 0x86, 0x26, 0x11, 0x9c, 0x87, 0x34, 0xf8, 0x9a, 0x06, 0xfb,
	0x7e, 0x20, 0x22, 0x81, 0x60, 0x86, 0xb4, 0xf7, 0x46, 0xaf, 0xf7, 0x46, 0x21, 0xf1, 0x0f, 0x18,
	0x8f, 0x68, 0xc0, 0xb1, 0x7b, 0xa0, 0x72, 0x88, 0x70, 0x0f, 0x88, 0xf0, 0x3c, 0xc1, 0x93, 0x9f,
	0x78, 0xa8, 0x7e, 0x05, 0xef, 0xbf, 0x9c, 0xd0, 0xe0, 0xdb, 0x43, 0xdf, 0x3f, 0xa7, 0x11, 0xb6,
	0x70, 0x84, 0x4d, 0xfa, 0x06, 0x35, 0xa1, 0x18, 0xd2, 0x37, 0x2d, 0x6d, 0x57, 0xeb, 0xd4, 0x4c,
	0xf9, 0x88, 0x36, 0xa0, 0x3c, 0x62, 0xd7, 0x43, 0x66, 0xb5, 0x0a, 0x0a, 0x5c, 0x1d, 0xb1, 0xeb,
	0x9e, 0x25, 0x61, 0xec, 0xfb, 0x12, 0x2e, 0xc6, 0x30, 0xf6, 0xfd, 0x9e, 0xa5, 0x3b, 0x70, 0x7f,
	0xb9, 0x6c, 0xe8, 0xe7, 0xd4, 0xfd, 0x10, 0x4a, 0x44, 0x58, 0x54, 0x55, 0x6d, 0x74, 0xd7, 0xf7,
	0x13, 0x76, 0xc7, 0x41, 0x60, 0x08, 0x8b, 0x9a, 0x2a, 0x88, 0x5a, 0x50, 0xf1, 0x68, 0x18, 0x62,
	0x87, 0x26, 0xd3, 0xa4, 0xaf, 0xfa, 0x2f, 0x1a, 0xd4, 0x0e, 0x09, 0xa1, 0x61, 0x78, 0x0b, 0xb4,
	0xd1, 0x26, 0x54, 0x89, 0x2b, 0x26, 0x96, 0x0c, 0x94, 0xe2, 0x89, 0xd4, 0x7b, 0xcf, 0x42, 0x0d,
	0x28, 0x30, 0xbf, 0xb5, 0xaa, 0xc0, 0x02, 0xf3, 0x11, 0x82, 0x92, 0x8f, 0xa3, 0x71, 0xab, 0xac,
	0x10, 0xf5, 0x8c, 0x1e, 0x40, 0xd9, 0xc5, 0x23, 0xea, 0x86, 0xad, 0x8a, 0x42, 0x93, 0x37, 0xfd,
	0x07, 0x0d, 0x20, 0x25, 0x79, 0x07, 0x22, 0xa0, 0x7d, 0xa8, 0x51, 0x6e, 0xf9, 0x82, 0xf1, 0x28,
	0x6c, 0x95, 0x76, 0x8b, 0x9d, 0x7a, 0xb7, 0x39, 0xad, 0x91, 0x04, 0xcc, 0x59, 0x8a, 0xfe, 0xab,
	0x06, 0xb5, 0x81, 0x61, 0x9c, 0x1f, 0x5d, 0x32, 0xee, 0x64, 0x24, 0xd2, 0xf2, 0x25, 0x2a, 0xbc,
	0x4d, 0xa2, 0x62, 0x9e, 0x44, 0xa5, 0x25, 0x89, 0x56, 0x73, 0x25, 0x2a, 0x67, 0x25, 0x92, 0xcd,
	0x45, 0xcc, 0xa3, 0x62, 0x12, 0x29, 0xed, 0x8a, 0x66, 0xfa, 0xaa, 0xff, 0xa9, 0xc1, 0x46, 0x4c,
	0x76, 0x12, 0x8e, 0xfb, 0x22, 0x62, 0x36, 0x23, 0x38, 0x62, 0x82, 0xff, 0x4b, 0xe2, 0x1b, 0x50,
	0x26, 0xb6, 0x93, 0xf9, 0xe4, 0xc4, 0x76, 0x92, 0x7e, 0x6c, 0x67, 0xc8, 0xb1, 0x47, 0xa7, 0x9f,
	0xdc, 0x76, 0xfa, 0xd8, 0xa3, 0x68, 0x0b, 0x6a, 0x32, 0x64, 0x67, 0x9a, 0x90, 0xb9, 0x27, 0xaa,
	0x91, 0x36, 0x54, 0x43, 0x1a, 0x30, 0xec, 0x72, 0xa1, 0x5a, 0x29, 0x99, 0xd3, 0x77, 0xb4, 0x0d,
	0x10, 0x50, 0x97, 0xe2, 0x90, 0xca, 0xe9, 0xe2, 0xb5, 0x50, 0x4b, 0x90, 0x9e, 0xa5, 0xff, 0xa5,
	0xc1, 0xf6, 0xb4, 0x23, 0x53, 0xb8, 0xee, 0x08, 0x93, 0xd7, 0xff, 0x8b, 0xce, 0xbe, 0xd3, 0x60,
	0x6b, 0xd6, 0x19, 0x75, 0x05, 0xb6, 0xfe, 0x43, 0x5f, 0xcf, 0xa0, 0x1e, 0xa8, 0x1a, 0xc3, 0xd0,
	0xa7, 0x44, 0x35, 0x57, 0xef, 0xa2, 0x74, 0x61, 0xc7, 0xe5, 0x07, 0x3e, 0x25, 0x26, 0x04, 0xd3,
	0x67, 0xfd, 0x27, 0x49, 0x81, 0x39, 0x1c, 0xbb, 0x2e, 0xe3, 0x8e, 0x31, 0xc6, 0x9c, 0x53, 0xf7,
	0x48, 0x7c, 0xc3, 0x07, 0x51, 0x40, 0xb1, 0x97, 0xb3, 0xf9, 0xba, 0x50, 0x24, 0x9e, 0x95, 0xec,
	0xbd, 0xdd, 0xfd, 0x8c, 0xbb, 0x2e, 0xd5, 0x31, 0x3c, 0xcb, 0x94, 0xc9, 0xe8, 0x29, 0x54, 0x89,
	0x67, 0x0d, 0x7d, 0xc6, 0x9d, 0x84, 0xd7, 0xc6, 0xdc, 0xc0, 0x74, 0x73, 0x99, 0x15, 0xe2, 0x59,
	0xf2, 0x41, 0xff, 0xbd, 0x00, 0x9b, 0x4b, 0xf5, 0xae, 0xfc, 0x5b, 0x65, 0xf5, 0x3c, 0x61, 0x35,
	0x09, 0xc7, 0x09, 0xab, 0x47, 0xcb, 0xac, 0x16, 0x76, 0x51, 0xcc, 0x70, 0x12, 0x8e, 0xd1, 0x19,
	0xac, 0xc9, 0xd1, 0x41, 0xb2, 0x20, 0xd5, 0x9a, 0xa9, 0x77, 0x9f, 0xe4, 0x56, 0xc8, 0x5b, 0xb5,
	0x66, 0x9d, 0x78, 0x56, 0x1a, 0x40, 0x27, 0x00, 0xaa, 0x9a, 0xfa, 0x32, 0x6a, 0x8d, 0xd5, 0xbb,
	0x8f, 0xf3, 0x6b, 0x2d, 0xad, 0x13, 0xb3, 0x26, 0x2b, 0x29, 0x58, 0xff, 0x43, 0x83, 0x9a, 0x49,
	0x7d, 0x11, 0x44, 0xef, 0xae, 0xc1, 0xa3, 0x0e, 0xac, 0x32, 0x6e, 0x8b, 0xb0, 0x55, 0x55, 0xe6,
	0x9b, 0x59, 0xa3, 0x92, 0x78, 0x8f, 0xdb, 0xc2, 0x8c, 0x13, 0xf4, 0xaf, 0x00, 0xd2, 0x6e, 0xee,
	0xe2, 0x38, 0xfc, 0xbe, 0x00, 0x8d, 0xcb, 0x89, 0xeb, 0x9a, 0xf1, 0x96, 0x7c, 0x87, 0x25, 0x9b,
	0x99, 0x56, 0x35, 0x6b, 0x5a, 0x1d, 0x68, 0xba, 0x82, 0x60, 0x77, 0x98, 0xb1, 0x99, 0x9a, 0x4a,
	0x68, 0x28, 0xdc, 0x4c, 0xbd, 0x66, 0xc1, 0x8a, 0x60, 0xd1, 0x8a, 0xfe, 0xd6, 0x60, 0x7d, 0x4e,
	0x89, 0xbb, 0x38, 0x78, 0x77, 0xa0, 0xce, 0x29, 0xb5, 0x86, 0xd4, 0xb6, 0x29, 0x89, 0x94, 0x3c,
	0x55, 0x13, 0x24, 0x74, 0xac, 0x10, 0xf4, 0x04, 0x2a, 0x09, 0xa5, 0x64, 0x0b, 0xac, 0x67, 0xec,
	0x4b, 0xf1, 0x4a, 0xe3, 0xb2, 0x1f, 0x22, 0x78, 0x44, 0x79, 0x24, 0xfb, 0x89, 0x25, 0xac, 0x25,
	0x48, 0xcf, 0x42, 0x8f, 0x60, 0x2d, 0x0d, 0x87, 0xec, 0x9a, 0x2a, 0x35, 0xdf, 0x33, 0xeb, 0x09,
	0x36, 0x60, 0xd7, 0x54, 0x9f, 0xc0, 0x3d, 0xd9, 0xb1, 0x21, 0xb8, 0xcd, 0x9c, 0x33, 0x16, 0xde,
	0xca, 0x8e, 0xd9, 0x95, 0xdf, 0xd4, 0xa1, 0x89, 0x1b, 0xac, 0xa5, 0xf4, 0x2f, 0xb1, 0x43, 0x4d,
	0x15, 0xd1, 0x7f, 0xd4, 0x00, 0x2d, 0xce, 0x7b, 0x17, 0x62, 0x77, 0xa0, 0x42, 0xd4, 0x14, 0xe9,
	0x1d, 0xa7, 0x91, 0x56, 0x88, 0x67, 0x36, 0xd3, 0xb0, 0xfe, 0x10, 0xe0, 0x94, 0x62, 0x37, 0x1a,
	0x5f, 0xe7, 0x2a, 0x20, 0xef, 0x63, 0xf5, 0x69, 0xc2, 0x5d, 0x50, 0xdd, 0x83, 0x92, 0xbc, 0xf2,
	0x26, 0xa2, 0x6d, 0xa6, 0xc3, 0xcf, 0x85, 0x35, 0x71, 0x69, 0x32, 0xb3, 0x72, 0x05, 0x95, 0xf6,
	0xe9, 0x6f, 0x1a, 0xdc, 0xcf, 0x73, 0x75, 0x84, 0xa0, 0xa1, 0x6c, 0x72, 0x68, 0x74, 0x07, 0xc3,
	0xcb, 0x5e, 0xff, 0x45, 0x73, 0x65, 0x86, 0x0d, 0xba, 0xc6, 0xf0, 0xf2, 0xa2, 0xff, 0xa2, 0xa9,
	0xa1, 0x9d, 0xe4, 0xd8, 0x8d, 0xb1, 0xab, 0xc1, 0xe9, 0xb0, 0x7f, 0xf1, 0xaa, 0x77, 0xd2, 0x33,
	0x0e, 0x5f, 0xf5, 0x2e, 0xfa, 0xcd, 0x02, 0xea, 0xc0, 0x47, 0x0b, 0x09, 0xe6, 0xc5, 0xd9, 0xd9,
	0xe7, 0x87, 0xc6, 0x17, 0xf3, 0x99, 0x45, 0xf4, 0x09, 0xe8, 0x8b, 0x99, 0xc7, 0x67, 0x17, 0x87,
	0x47, 0xf3, 0x79, 0xa5, 0xee, 0xcf, 0x25, 0x00, 0x43, 0x70, 0x4e, 0x89, 0x3a, 0xd9, 0xbf, 0x84,
	0xe6, 0xe2, 0x85, 0x1f, 0xed, 0x64, 0xed, 0x3e, 0xe7, 0x5f, 0x46, 0x7b, 0xf7, 0xe6, 0x84, 0xd0,
	0xd7, 0x57, 0xd0, 0x67, 0x50, 0x8e, 0xaf, 0xce, 0x68, 0xee, 0x84, 0x9d, 0xde, 0xf9, 0xdb, 0x0f,
	0xf2, 0x60, 0x35, 0x94, 0xc1, 0xbd, 0x25, 0x55, 0xd1, 0xe3, 0x1b, 0x8f, 0xd2, 0xd9, 0x45, 0xa1,
	0xfd, 0xf1, 0x8d, 0x89, 0xe9, 0xc9, 0xad, 0xaf, 0x74, 0xb4, 0xa7, 0x9a, 0x64, 0x19, 0xdb, 0xfa,
	0x3c, 0xcb, 0xe9, 0xc1, 0x35, 0xcf, 0x72, 0x76, 0x02, 0xe8, 0x2b, 0xe8, 0x14, 0xea, 0x19, 0x9f,
	0x42, 0xed, 0x6c, 0xe2, 0xbc, 0x95, 0xb7, 0xb7, 0xde, 0x1a, 0x53, 0x95, 0x5e, 0xc6, 0xde, 0x3f,
	0xdb, 0x87, 0x68, 0x7b, 0x71, 0xc0, 0x9c, 0x37, 0xb4, 0x1f, 0xde, 0x14, 0x56, 0x25, 0x9f, 0x43,
	0x25, 0x59, 0xae, 0x68, 0xae, 0x83, 0xd9, 0xf6, 0x6a, 0x7f, 0x90, 0x8b, 0xcb, 0xd1, 0xa3, 0xb2,
	0xfa, 0x8f, 0xf9, 0xec, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x33, 0x5b, 0x7d, 0x7b, 0xb2, 0x0e,
	0x00, 0x00,
}
