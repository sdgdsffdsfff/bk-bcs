// Code generated by protoc-gen-go.
// source: datamanager.proto
// DO NOT EDIT!

/*
Package datamanager is a generated protocol buffer package.

It is generated from these files:
	datamanager.proto

It has these top-level messages:
	QueryAppMetadataReq
	QueryAppMetadataResp
	CreateAppReq
	CreateAppResp
	QueryAppReq
	QueryAppResp
	QueryAppListReq
	QueryAppListResp
	UpdateAppReq
	UpdateAppResp
	DeleteAppReq
	DeleteAppResp
	CreateTemplateBindReq
	CreateTemplateBindResp
	QueryTemplateBindReq
	QueryTemplateBindResp
	QueryTemplateBindListReq
	QueryTemplateBindListResp
	DeleteTemplateBindReq
	DeleteTemplateBindResp
	CreateConfigTemplateReq
	CreateConfigTemplateResp
	QueryConfigTemplateReq
	QueryConfigTemplateResp
	QueryConfigTemplateListReq
	QueryConfigTemplateListResp
	UpdateConfigTemplateReq
	UpdateConfigTemplateResp
	DeleteConfigTemplateReq
	DeleteConfigTemplateResp
	CreateConfigTemplateVersionReq
	CreateConfigTemplateVersionResp
	QueryConfigTemplateVersionReq
	QueryConfigTemplateVersionResp
	QueryConfigTemplateVersionListReq
	QueryConfigTemplateVersionListResp
	UpdateConfigTemplateVersionReq
	UpdateConfigTemplateVersionResp
	DeleteConfigTemplateVersionReq
	DeleteConfigTemplateVersionResp
	CreateVariableGroupReq
	CreateVariableGroupResp
	QueryVariableGroupReq
	QueryVariableGroupResp
	QueryVariableGroupListReq
	QueryVariableGroupListResp
	DeleteVariableGroupReq
	DeleteVariableGroupResp
	CreateVariableReq
	CreateVariableResp
	UpdateVariableReq
	UpdateVariableResp
	QueryVariableReq
	QueryVariableResp
	QueryVariableListReq
	QueryVariableListResp
	DeleteVariableReq
	DeleteVariableResp
	CreateConfigReq
	CreateConfigResp
	QueryConfigReq
	QueryConfigResp
	QueryConfigListReq
	QueryConfigListResp
	UpdateConfigReq
	UpdateConfigResp
	DeleteConfigReq
	DeleteConfigResp
	CreateConfigContentReq
	CreateConfigContentResp
	QueryConfigContentReq
	QueryConfigContentResp
	QueryReleaseConfigContentReq
	QueryReleaseConfigContentResp
	QueryConfigContentListReq
	QueryConfigContentListResp
	CreateCommitReq
	CreateCommitResp
	QueryCommitReq
	QueryCommitResp
	QueryHistoryCommitsReq
	QueryHistoryCommitsResp
	UpdateCommitReq
	UpdateCommitResp
	CancelCommitReq
	CancelCommitResp
	ConfirmCommitReq
	ConfirmCommitResp
	CreateMultiCommitWithContentReq
	CreateMultiCommitWithContentResp
	CreateMultiCommitReq
	CreateMultiCommitResp
	QueryMultiCommitReq
	QueryMultiCommitResp
	QueryHistoryMultiCommitsReq
	QueryHistoryMultiCommitsResp
	QueryMultiCommitSubListReq
	QueryMultiCommitSubListResp
	UpdateMultiCommitReq
	UpdateMultiCommitResp
	CancelMultiCommitReq
	CancelMultiCommitResp
	ConfirmMultiCommitReq
	ConfirmMultiCommitResp
	CreateReleaseReq
	CreateReleaseResp
	QueryReleaseReq
	QueryReleaseResp
	QueryNewestReleasesReq
	QueryNewestReleasesResp
	QueryHistoryReleasesReq
	QueryHistoryReleasesResp
	UpdateReleaseReq
	UpdateReleaseResp
	CancelReleaseReq
	CancelReleaseResp
	RollbackReleaseReq
	RollbackReleaseResp
	PublishReleaseReq
	PublishReleaseResp
	CreateMultiReleaseReq
	CreateMultiReleaseResp
	QueryMultiReleaseReq
	QueryMultiReleaseResp
	QueryHistoryMultiReleasesReq
	QueryHistoryMultiReleasesResp
	UpdateMultiReleaseReq
	UpdateMultiReleaseResp
	QueryMultiReleaseSubListReq
	QueryMultiReleaseSubListResp
	CancelMultiReleaseReq
	CancelMultiReleaseResp
	PublishMultiReleaseReq
	PublishMultiReleaseResp
	RollbackMultiReleaseReq
	RollbackMultiReleaseResp
	CreateAppInstanceReq
	CreateAppInstanceResp
	QueryReachableAppInstancesReq
	QueryReachableAppInstancesResp
	UpdateAppInstanceReq
	UpdateAppInstanceResp
	CreateAppInstanceReleaseReq
	CreateAppInstanceReleaseResp
	QueryAppInstanceReleaseReq
	QueryAppInstanceReleaseResp
	QueryMatchedAppInstancesReq
	QueryMatchedAppInstancesResp
	QueryEffectedAppInstancesReq
	QueryEffectedAppInstancesResp
	CreateStrategyReq
	CreateStrategyResp
	QueryStrategyReq
	QueryStrategyResp
	QueryStrategyListReq
	QueryStrategyListResp
	DeleteStrategyReq
	DeleteStrategyResp
	CreateProcAttrReq
	CreateProcAttrResp
	QueryHostProcAttrReq
	QueryHostProcAttrResp
	QueryHostProcAttrListReq
	QueryHostProcAttrListResp
	QueryAppProcAttrListReq
	QueryAppProcAttrListResp
	UpdateProcAttrReq
	UpdateProcAttrResp
	DeleteProcAttrReq
	DeleteProcAttrResp
	InitShardingDBReq
	InitShardingDBResp
	CreateShardingDBReq
	CreateShardingDBResp
	QueryShardingDBReq
	QueryShardingDBResp
	QueryShardingDBListReq
	QueryShardingDBListResp
	UpdateShardingDBReq
	UpdateShardingDBResp
	CreateShardingReq
	CreateShardingResp
	QueryShardingReq
	QueryShardingResp
	QueryShardingListReq
	QueryShardingListResp
	UpdateShardingReq
	UpdateShardingResp
	CreateAuditReq
	CreateAuditResp
	QueryAuditListReq
	QueryAuditListResp
	HealthzReq
	HealthzResp
*/
package datamanager

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import common "bk-bscp/internal/protocol/common"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type QueryAppMetadataReq struct {
	Seq   string `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	BizId string `protobuf:"bytes,2,opt,name=biz_id,json=bizId" json:"biz_id,omitempty"`
	AppId string `protobuf:"bytes,3,opt,name=app_id,json=appId" json:"app_id,omitempty"`
}

func (m *QueryAppMetadataReq) Reset()                    { *m = QueryAppMetadataReq{} }
func (m *QueryAppMetadataReq) String() string            { return proto.CompactTextString(m) }
func (*QueryAppMetadataReq) ProtoMessage()               {}
func (*QueryAppMetadataReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *QueryAppMetadataReq) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *QueryAppMetadataReq) GetBizId() string {
	if m != nil {
		return m.BizId
	}
	return ""
}

func (m *QueryAppMetadataReq) GetAppId() string {
	if m != nil {
		return m.AppId
	}
	return ""
}

type QueryAppMetadataResp struct {
	Seq     string         `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	Code    common.ErrCode `protobuf:"varint,2,opt,name=code,enum=common.ErrCode" json:"code,omitempty"`
	Message string         `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *QueryAppMetadataResp) Reset()                    { *m = QueryAppMetadataResp{} }
func (m *QueryAppMetadataResp) String() string            { return proto.CompactTextString(m) }
func (*QueryAppMetadataResp) ProtoMessage()               {}
func (*QueryAppMetadataResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *QueryAppMetadataResp) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *QueryAppMetadataResp) GetCode() common.ErrCode {
	if m != nil {
		return m.Code
	}
	return common.ErrCode_E_OK
}

func (m *QueryAppMetadataResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type CreateAppReq struct {
	Seq        string `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	BizId      string `protobuf:"bytes,2,opt,name=biz_id,json=bizId" json:"biz_id,omitempty"`
	AppId      string `protobuf:"bytes,3,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	Name       string `protobuf:"bytes,4,opt,name=name" json:"name,omitempty"`
	DeployType int32  `protobuf:"varint,5,opt,name=deploy_type,json=deployType" json:"deploy_type,omitempty"`
	State      int32  `protobuf:"varint,6,opt,name=state" json:"state,omitempty"`
	Creator    string `protobuf:"bytes,7,opt,name=creator" json:"creator,omitempty"`
	Memo       string `protobuf:"bytes,8,opt,name=memo" json:"memo,omitempty"`
}

func (m *CreateAppReq) Reset()                    { *m = CreateAppReq{} }
func (m *CreateAppReq) String() string            { return proto.CompactTextString(m) }
func (*CreateAppReq) ProtoMessage()               {}
func (*CreateAppReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *CreateAppReq) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *CreateAppReq) GetBizId() string {
	if m != nil {
		return m.BizId
	}
	return ""
}

func (m *CreateAppReq) GetAppId() string {
	if m != nil {
		return m.AppId
	}
	return ""
}

func (m *CreateAppReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CreateAppReq) GetDeployType() int32 {
	if m != nil {
		return m.DeployType
	}
	return 0
}

func (m *CreateAppReq) GetState() int32 {
	if m != nil {
		return m.State
	}
	return 0
}

func (m *CreateAppReq) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *CreateAppReq) GetMemo() string {
	if m != nil {
		return m.Memo
	}
	return ""
}

type CreateAppResp struct {
	Seq     string                  `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	Code    common.ErrCode          `protobuf:"varint,2,opt,name=code,enum=common.ErrCode" json:"code,omitempty"`
	Message string                  `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
	Data    *CreateAppResp_RespData `protobuf:"bytes,4,opt,name=data" json:"data,omitempty"`
}

func (m *CreateAppResp) Reset()                    { *m = CreateAppResp{} }
func (m *CreateAppResp) String() string            { return proto.CompactTextString(m) }
func (*CreateAppResp) ProtoMessage()               {}
func (*CreateAppResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *CreateAppResp) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *CreateAppResp) GetCode() common.ErrCode {
	if m != nil {
		return m.Code
	}
	return common.ErrCode_E_OK
}

func (m *CreateAppResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *CreateAppResp) GetData() *CreateAppResp_RespData {
	if m != nil {
		return m.Data
	}
	return nil
}

type CreateAppResp_RespData struct {
	AppId string `protobuf:"bytes,1,opt,name=app_id,json=appId" json:"app_id,omitempty"`
}

func (m *CreateAppResp_RespData) Reset()                    { *m = CreateAppResp_RespData{} }
func (m *CreateAppResp_RespData) String() string            { return proto.CompactTextString(m) }
func (*CreateAppResp_RespData) ProtoMessage()               {}
func (*CreateAppResp_RespData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3, 0} }

func (m *CreateAppResp_RespData) GetAppId() string {
	if m != nil {
		return m.AppId
	}
	return ""
}

type QueryAppReq struct {
	Seq   string `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	BizId string `protobuf:"bytes,2,opt,name=biz_id,json=bizId" json:"biz_id,omitempty"`
	AppId string `protobuf:"bytes,3,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	Name  string `protobuf:"bytes,4,opt,name=name" json:"name,omitempty"`
}

func (m *QueryAppReq) Reset()                    { *m = QueryAppReq{} }
func (m *QueryAppReq) String() string            { return proto.CompactTextString(m) }
func (*QueryAppReq) ProtoMessage()               {}
func (*QueryAppReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *QueryAppReq) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *QueryAppReq) GetBizId() string {
	if m != nil {
		return m.BizId
	}
	return ""
}

func (m *QueryAppReq) GetAppId() string {
	if m != nil {
		return m.AppId
	}
	return ""
}

func (m *QueryAppReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type QueryAppResp struct {
	Seq     string         `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	Code    common.ErrCode `protobuf:"varint,2,opt,name=code,enum=common.ErrCode" json:"code,omitempty"`
	Message string         `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
	Data    *common.App    `protobuf:"bytes,4,opt,name=data" json:"data,omitempty"`
}

func (m *QueryAppResp) Reset()                    { *m = QueryAppResp{} }
func (m *QueryAppResp) String() string            { return proto.CompactTextString(m) }
func (*QueryAppResp) ProtoMessage()               {}
func (*QueryAppResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *QueryAppResp) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *QueryAppResp) GetCode() common.ErrCode {
	if m != nil {
		return m.Code
	}
	return common.ErrCode_E_OK
}

func (m *QueryAppResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *QueryAppResp) GetData() *common.App {
	if m != nil {
		return m.Data
	}
	return nil
}

type QueryAppListReq struct {
	Seq   string       `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	BizId string       `protobuf:"bytes,2,opt,name=biz_id,json=bizId" json:"biz_id,omitempty"`
	Page  *common.Page `protobuf:"bytes,3,opt,name=page" json:"page,omitempty"`
}

func (m *QueryAppListReq) Reset()                    { *m = QueryAppListReq{} }
func (m *QueryAppListReq) String() string            { return proto.CompactTextString(m) }
func (*QueryAppListReq) ProtoMessage()               {}
func (*QueryAppListReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *QueryAppListReq) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *QueryAppListReq) GetBizId() string {
	if m != nil {
		return m.BizId
	}
	return ""
}

func (m *QueryAppListReq) GetPage() *common.Page {
	if m != nil {
		return m.Page
	}
	return nil
}

type QueryAppListResp struct {
	Seq     string                     `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	Code    common.ErrCode             `protobuf:"varint,2,opt,name=code,enum=common.ErrCode" json:"code,omitempty"`
	Message string                     `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
	Data    *QueryAppListResp_RespData `protobuf:"bytes,4,opt,name=data" json:"data,omitempty"`
}

func (m *QueryAppListResp) Reset()                    { *m = QueryAppListResp{} }
func (m *QueryAppListResp) String() string            { return proto.CompactTextString(m) }
func (*QueryAppListResp) ProtoMessage()               {}
func (*QueryAppListResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *QueryAppListResp) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *QueryAppListResp) GetCode() common.ErrCode {
	if m != nil {
		return m.Code
	}
	return common.ErrCode_E_OK
}

func (m *QueryAppListResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *QueryAppListResp) GetData() *QueryAppListResp_RespData {
	if m != nil {
		return m.Data
	}
	return nil
}

type QueryAppListResp_RespData struct {
	TotalCount uint32        `protobuf:"varint,1,opt,name=total_count,json=totalCount" json:"total_count,omitempty"`
	Info       []*common.App `protobuf:"bytes,2,rep,name=info" json:"info,omitempty"`
}

func (m *QueryAppListResp_RespData) Reset()                    { *m = QueryAppListResp_RespData{} }
func (m *QueryAppListResp_RespData) String() string            { return proto.CompactTextString(m) }
func (*QueryAppListResp_RespData) ProtoMessage()               {}
func (*QueryAppListResp_RespData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7, 0} }

func (m *QueryAppListResp_RespData) GetTotalCount() uint32 {
	if m != nil {
		return m.TotalCount
	}
	return 0
}

func (m *QueryAppListResp_RespData) GetInfo() []*common.App {
	if m != nil {
		return m.Info
	}
	return nil
}

type UpdateAppReq struct {
	Seq        string `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	BizId      string `protobuf:"bytes,2,opt,name=biz_id,json=bizId" json:"biz_id,omitempty"`
	AppId      string `protobuf:"bytes,3,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	Name       string `protobuf:"bytes,4,opt,name=name" json:"name,omitempty"`
	DeployType int32  `protobuf:"varint,5,opt,name=deploy_type,json=deployType" json:"deploy_type,omitempty"`
	Memo       string `protobuf:"bytes,6,opt,name=memo" json:"memo,omitempty"`
	State      int32  `protobuf:"varint,7,opt,name=state" json:"state,omitempty"`
	Operator   string `protobuf:"bytes,8,opt,name=operator" json:"operator,omitempty"`
}

func (m *UpdateAppReq) Reset()                    { *m = UpdateAppReq{} }
func (m *UpdateAppReq) String() string            { return proto.CompactTextString(m) }
func (*UpdateAppReq) ProtoMessage()               {}
func (*UpdateAppReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *UpdateAppReq) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *UpdateAppReq) GetBizId() string {
	if m != nil {
		return m.BizId
	}
	return ""
}

func (m *UpdateAppReq) GetAppId() string {
	if m != nil {
		return m.AppId
	}
	return ""
}

func (m *UpdateAppReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UpdateAppReq) GetDeployType() int32 {
	if m != nil {
		return m.DeployType
	}
	return 0
}

func (m *UpdateAppReq) GetMemo() string {
	if m != nil {
		return m.Memo
	}
	return ""
}

func (m *UpdateAppReq) GetState() int32 {
	if m != nil {
		return m.State
	}
	return 0
}

func (m *UpdateAppReq) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

type UpdateAppResp struct {
	Seq     string         `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	Code    common.ErrCode `protobuf:"varint,2,opt,name=code,enum=common.ErrCode" json:"code,omitempty"`
	Message string         `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *UpdateAppResp) Reset()                    { *m = UpdateAppResp{} }
func (m *UpdateAppResp) String() string            { return proto.CompactTextString(m) }
func (*UpdateAppResp) ProtoMessage()               {}
func (*UpdateAppResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *UpdateAppResp) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *UpdateAppResp) GetCode() common.ErrCode {
	if m != nil {
		return m.Code
	}
	return common.ErrCode_E_OK
}

func (m *UpdateAppResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type DeleteAppReq struct {
	Seq      string `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	BizId    string `protobuf:"bytes,2,opt,name=biz_id,json=bizId" json:"biz_id,omitempty"`
	AppId    string `protobuf:"bytes,3,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	Operator string `protobuf:"bytes,4,opt,name=operator" json:"operator,omitempty"`
}

func (m *DeleteAppReq) Reset()                    { *m = DeleteAppReq{} }
func (m *DeleteAppReq) String() string            { return proto.CompactTextString(m) }
func (*DeleteAppReq) ProtoMessage()               {}
func (*DeleteAppReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *DeleteAppReq) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *DeleteAppReq) GetBizId() string {
	if m != nil {
		return m.BizId
	}
	return ""
}

func (m *DeleteAppReq) GetAppId() string {
	if m != nil {
		return m.AppId
	}
	return ""
}

func (m *DeleteAppReq) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

type DeleteAppResp struct {
	Seq     string         `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	Code    common.ErrCode `protobuf:"varint,2,opt,name=code,enum=common.ErrCode" json:"code,omitempty"`
	Message string         `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *DeleteAppResp) Reset()                    { *m = DeleteAppResp{} }
func (m *DeleteAppResp) String() string            { return proto.CompactTextString(m) }
func (*DeleteAppResp) ProtoMessage()               {}
func (*DeleteAppResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *DeleteAppResp) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *DeleteAppResp) GetCode() common.ErrCode {
	if m != nil {
		return m.Code
	}
	return common.ErrCode_E_OK
}

func (m *DeleteAppResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type CreateTemplateBindReq struct {
	Seq        string `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	BizId      string `protobuf:"bytes,2,opt,name=biz_id,json=bizId" json:"biz_id,omitempty"`
	TemplateId string `protobuf:"bytes,3,opt,name=template_id,json=templateId" json:"template_id,omitempty"`
	AppId      string `protobuf:"bytes,4,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	CfgId      string `protobuf:"bytes,5,opt,name=cfg_id,json=cfgId" json:"cfg_id,omitempty"`
	State      int32  `protobuf:"varint,6,opt,name=state" json:"state,omitempty"`
	Creator    string `protobuf:"bytes,7,opt,name=creator" json:"creator,omitempty"`
}

func (m *CreateTemplateBindReq) Reset()                    { *m = CreateTemplateBindReq{} }
func (m *CreateTemplateBindReq) String() string            { return proto.CompactTextString(m) }
func (*CreateTemplateBindReq) ProtoMessage()               {}
func (*CreateTemplateBindReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *CreateTemplateBindReq) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *CreateTemplateBindReq) GetBizId() string {
	if m != nil {
		return m.BizId
	}
	return ""
}

func (m *CreateTemplateBindReq) GetTemplateId() string {
	if m != nil {
		return m.TemplateId
	}
	return ""
}

func (m *CreateTemplateBindReq) GetAppId() string {
	if m != nil {
		return m.AppId
	}
	return ""
}

func (m *CreateTemplateBindReq) GetCfgId() string {
	if m != nil {
		return m.CfgId
	}
	return ""
}

func (m *CreateTemplateBindReq) GetState() int32 {
	if m != nil {
		return m.State
	}
	return 0
}

func (m *CreateTemplateBindReq) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

type CreateTemplateBindResp struct {
	Seq     string                           `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	Code    common.ErrCode                   `protobuf:"varint,2,opt,name=code,enum=common.ErrCode" json:"code,omitempty"`
	Message string                           `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
	Data    *CreateTemplateBindResp_RespData `protobuf:"bytes,4,opt,name=data" json:"data,omitempty"`
}

func (m *CreateTemplateBindResp) Reset()                    { *m = CreateTemplateBindResp{} }
func (m *CreateTemplateBindResp) String() string            { return proto.CompactTextString(m) }
func (*CreateTemplateBindResp) ProtoMessage()               {}
func (*CreateTemplateBindResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *CreateTemplateBindResp) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *CreateTemplateBindResp) GetCode() common.ErrCode {
	if m != nil {
		return m.Code
	}
	return common.ErrCode_E_OK
}

func (m *CreateTemplateBindResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *CreateTemplateBindResp) GetData() *CreateTemplateBindResp_RespData {
	if m != nil {
		return m.Data
	}
	return nil
}

type CreateTemplateBindResp_RespData struct {
	CfgId string `protobuf:"bytes,1,opt,name=cfg_id,json=cfgId" json:"cfg_id,omitempty"`
}

func (m *CreateTemplateBindResp_RespData) Reset()         { *m = CreateTemplateBindResp_RespData{} }
func (m *CreateTemplateBindResp_RespData) String() string { return proto.CompactTextString(m) }
func (*CreateTemplateBindResp_RespData) ProtoMessage()    {}
func (*CreateTemplateBindResp_RespData) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{13, 0}
}

func (m *CreateTemplateBindResp_RespData) GetCfgId() string {
	if m != nil {
		return m.CfgId
	}
	return ""
}

type QueryTemplateBindReq struct {
	Seq        string `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	BizId      string `protobuf:"bytes,2,opt,name=biz_id,json=bizId" json:"biz_id,omitempty"`
	TemplateId string `protobuf:"bytes,3,opt,name=template_id,json=templateId" json:"template_id,omitempty"`
	AppId      string `protobuf:"bytes,4,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	CfgId      string `protobuf:"bytes,5,opt,name=cfg_id,json=cfgId" json:"cfg_id,omitempty"`
}

func (m *QueryTemplateBindReq) Reset()                    { *m = QueryTemplateBindReq{} }
func (m *QueryTemplateBindReq) String() string            { return proto.CompactTextString(m) }
func (*QueryTemplateBindReq) ProtoMessage()               {}
func (*QueryTemplateBindReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *QueryTemplateBindReq) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *QueryTemplateBindReq) GetBizId() string {
	if m != nil {
		return m.BizId
	}
	return ""
}

func (m *QueryTemplateBindReq) GetTemplateId() string {
	if m != nil {
		return m.TemplateId
	}
	return ""
}

func (m *QueryTemplateBindReq) GetAppId() string {
	if m != nil {
		return m.AppId
	}
	return ""
}

func (m *QueryTemplateBindReq) GetCfgId() string {
	if m != nil {
		return m.CfgId
	}
	return ""
}

type QueryTemplateBindResp struct {
	Seq     string               `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	Code    common.ErrCode       `protobuf:"varint,2,opt,name=code,enum=common.ErrCode" json:"code,omitempty"`
	Message string               `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
	Data    *common.TemplateBind `protobuf:"bytes,4,opt,name=data" json:"data,omitempty"`
}

func (m *QueryTemplateBindResp) Reset()                    { *m = QueryTemplateBindResp{} }
func (m *QueryTemplateBindResp) String() string            { return proto.CompactTextString(m) }
func (*QueryTemplateBindResp) ProtoMessage()               {}
func (*QueryTemplateBindResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *QueryTemplateBindResp) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *QueryTemplateBindResp) GetCode() common.ErrCode {
	if m != nil {
		return m.Code
	}
	return common.ErrCode_E_OK
}

func (m *QueryTemplateBindResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *QueryTemplateBindResp) GetData() *common.TemplateBind {
	if m != nil {
		return m.Data
	}
	return nil
}

type QueryTemplateBindListReq struct {
	Seq        string       `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	BizId      string       `protobuf:"bytes,2,opt,name=biz_id,json=bizId" json:"biz_id,omitempty"`
	TemplateId string       `protobuf:"bytes,3,opt,name=template_id,json=templateId" json:"template_id,omitempty"`
	AppId      string       `protobuf:"bytes,4,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	Page       *common.Page `protobuf:"bytes,5,opt,name=page" json:"page,omitempty"`
}

func (m *QueryTemplateBindListReq) Reset()                    { *m = QueryTemplateBindListReq{} }
func (m *QueryTemplateBindListReq) String() string            { return proto.CompactTextString(m) }
func (*QueryTemplateBindListReq) ProtoMessage()               {}
func (*QueryTemplateBindListReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *QueryTemplateBindListReq) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *QueryTemplateBindListReq) GetBizId() string {
	if m != nil {
		return m.BizId
	}
	return ""
}

func (m *QueryTemplateBindListReq) GetTemplateId() string {
	if m != nil {
		return m.TemplateId
	}
	return ""
}

func (m *QueryTemplateBindListReq) GetAppId() string {
	if m != nil {
		return m.AppId
	}
	return ""
}

func (m *QueryTemplateBindListReq) GetPage() *common.Page {
	if m != nil {
		return m.Page
	}
	return nil
}

type QueryTemplateBindListResp struct {
	Seq     string                              `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	Code    common.ErrCode                      `protobuf:"varint,2,opt,name=code,enum=common.ErrCode" json:"code,omitempty"`
	Message string                              `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
	Data    *QueryTemplateBindListResp_RespData `protobuf:"bytes,4,opt,name=data" json:"data,omitempty"`
}

func (m *QueryTemplateBindListResp) Reset()                    { *m = QueryTemplateBindListResp{} }
func (m *QueryTemplateBindListResp) String() string            { return proto.CompactTextString(m) }
func (*QueryTemplateBindListResp) ProtoMessage()               {}
func (*QueryTemplateBindListResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *QueryTemplateBindListResp) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *QueryTemplateBindListResp) GetCode() common.ErrCode {
	if m != nil {
		return m.Code
	}
	return common.ErrCode_E_OK
}

func (m *QueryTemplateBindListResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *QueryTemplateBindListResp) GetData() *QueryTemplateBindListResp_RespData {
	if m != nil {
		return m.Data
	}
	return nil
}

type QueryTemplateBindListResp_RespData struct {
	TotalCount uint32                 `protobuf:"varint,1,opt,name=total_count,json=totalCount" json:"total_count,omitempty"`
	Info       []*common.TemplateBind `protobuf:"bytes,2,rep,name=info" json:"info,omitempty"`
}

func (m *QueryTemplateBindListResp_RespData) Reset()         { *m = QueryTemplateBindListResp_RespData{} }
func (m *QueryTemplateBindListResp_RespData) String() string { return proto.CompactTextString(m) }
func (*QueryTemplateBindListResp_RespData) ProtoMessage()    {}
func (*QueryTemplateBindListResp_RespData) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{17, 0}
}

func (m *QueryTemplateBindListResp_RespData) GetTotalCount() uint32 {
	if m != nil {
		return m.TotalCount
	}
	return 0
}

func (m *QueryTemplateBindListResp_RespData) GetInfo() []*common.TemplateBind {
	if m != nil {
		return m.Info
	}
	return nil
}

type DeleteTemplateBindReq struct {
	Seq        string `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	BizId      string `protobuf:"bytes,2,opt,name=biz_id,json=bizId" json:"biz_id,omitempty"`
	TemplateId string `protobuf:"bytes,3,opt,name=template_id,json=templateId" json:"template_id,omitempty"`
	AppId      string `protobuf:"bytes,4,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	CfgId      string `protobuf:"bytes,5,opt,name=cfg_id,json=cfgId" json:"cfg_id,omitempty"`
	Operator   string `protobuf:"bytes,6,opt,name=operator" json:"operator,omitempty"`
}

func (m *DeleteTemplateBindReq) Reset()                    { *m = DeleteTemplateBindReq{} }
func (m *DeleteTemplateBindReq) String() string            { return proto.CompactTextString(m) }
func (*DeleteTemplateBindReq) ProtoMessage()               {}
func (*DeleteTemplateBindReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *DeleteTemplateBindReq) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *DeleteTemplateBindReq) GetBizId() string {
	if m != nil {
		return m.BizId
	}
	return ""
}

func (m *DeleteTemplateBindReq) GetTemplateId() string {
	if m != nil {
		return m.TemplateId
	}
	return ""
}

func (m *DeleteTemplateBindReq) GetAppId() string {
	if m != nil {
		return m.AppId
	}
	return ""
}

func (m *DeleteTemplateBindReq) GetCfgId() string {
	if m != nil {
		return m.CfgId
	}
	return ""
}

func (m *DeleteTemplateBindReq) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

type DeleteTemplateBindResp struct {
	Seq     string         `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	Code    common.ErrCode `protobuf:"varint,2,opt,name=code,enum=common.ErrCode" json:"code,omitempty"`
	Message string         `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *DeleteTemplateBindResp) Reset()                    { *m = DeleteTemplateBindResp{} }
func (m *DeleteTemplateBindResp) String() string            { return proto.CompactTextString(m) }
func (*DeleteTemplateBindResp) ProtoMessage()               {}
func (*DeleteTemplateBindResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *DeleteTemplateBindResp) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *DeleteTemplateBindResp) GetCode() common.ErrCode {
	if m != nil {
		return m.Code
	}
	return common.ErrCode_E_OK
}

func (m *DeleteTemplateBindResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type CreateConfigTemplateReq struct {
	Seq           string `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	TemplateId    string `protobuf:"bytes,2,opt,name=template_id,json=templateId" json:"template_id,omitempty"`
	BizId         string `protobuf:"bytes,3,opt,name=biz_id,json=bizId" json:"biz_id,omitempty"`
	Name          string `protobuf:"bytes,4,opt,name=name" json:"name,omitempty"`
	CfgName       string `protobuf:"bytes,5,opt,name=cfg_name,json=cfgName" json:"cfg_name,omitempty"`
	CfgFpath      string `protobuf:"bytes,6,opt,name=cfg_fpath,json=cfgFpath" json:"cfg_fpath,omitempty"`
	User          string `protobuf:"bytes,7,opt,name=user" json:"user,omitempty"`
	UserGroup     string `protobuf:"bytes,8,opt,name=user_group,json=userGroup" json:"user_group,omitempty"`
	FilePrivilege string `protobuf:"bytes,9,opt,name=file_privilege,json=filePrivilege" json:"file_privilege,omitempty"`
	FileFormat    string `protobuf:"bytes,10,opt,name=file_format,json=fileFormat" json:"file_format,omitempty"`
	FileMode      int32  `protobuf:"varint,11,opt,name=file_mode,json=fileMode" json:"file_mode,omitempty"`
	EngineType    int32  `protobuf:"varint,12,opt,name=engine_type,json=engineType" json:"engine_type,omitempty"`
	Memo          string `protobuf:"bytes,13,opt,name=memo" json:"memo,omitempty"`
	State         int32  `protobuf:"varint,14,opt,name=state" json:"state,omitempty"`
	Creator       string `protobuf:"bytes,15,opt,name=creator" json:"creator,omitempty"`
}

func (m *CreateConfigTemplateReq) Reset()                    { *m = CreateConfigTemplateReq{} }
func (m *CreateConfigTemplateReq) String() string            { return proto.CompactTextString(m) }
func (*CreateConfigTemplateReq) ProtoMessage()               {}
func (*CreateConfigTemplateReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *CreateConfigTemplateReq) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *CreateConfigTemplateReq) GetTemplateId() string {
	if m != nil {
		return m.TemplateId
	}
	return ""
}

func (m *CreateConfigTemplateReq) GetBizId() string {
	if m != nil {
		return m.BizId
	}
	return ""
}

func (m *CreateConfigTemplateReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CreateConfigTemplateReq) GetCfgName() string {
	if m != nil {
		return m.CfgName
	}
	return ""
}

func (m *CreateConfigTemplateReq) GetCfgFpath() string {
	if m != nil {
		return m.CfgFpath
	}
	return ""
}

func (m *CreateConfigTemplateReq) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

func (m *CreateConfigTemplateReq) GetUserGroup() string {
	if m != nil {
		return m.UserGroup
	}
	return ""
}

func (m *CreateConfigTemplateReq) GetFilePrivilege() string {
	if m != nil {
		return m.FilePrivilege
	}
	return ""
}

func (m *CreateConfigTemplateReq) GetFileFormat() string {
	if m != nil {
		return m.FileFormat
	}
	return ""
}

func (m *CreateConfigTemplateReq) GetFileMode() int32 {
	if m != nil {
		return m.FileMode
	}
	return 0
}

func (m *CreateConfigTemplateReq) GetEngineType() int32 {
	if m != nil {
		return m.EngineType
	}
	return 0
}

func (m *CreateConfigTemplateReq) GetMemo() string {
	if m != nil {
		return m.Memo
	}
	return ""
}

func (m *CreateConfigTemplateReq) GetState() int32 {
	if m != nil {
		return m.State
	}
	return 0
}

func (m *CreateConfigTemplateReq) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

type CreateConfigTemplateResp struct {
	Seq     string                             `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	Code    common.ErrCode                     `protobuf:"varint,2,opt,name=code,enum=common.ErrCode" json:"code,omitempty"`
	Message string                             `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
	Data    *CreateConfigTemplateResp_RespData `protobuf:"bytes,4,opt,name=data" json:"data,omitempty"`
}

func (m *CreateConfigTemplateResp) Reset()                    { *m = CreateConfigTemplateResp{} }
func (m *CreateConfigTemplateResp) String() string            { return proto.CompactTextString(m) }
func (*CreateConfigTemplateResp) ProtoMessage()               {}
func (*CreateConfigTemplateResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *CreateConfigTemplateResp) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *CreateConfigTemplateResp) GetCode() common.ErrCode {
	if m != nil {
		return m.Code
	}
	return common.ErrCode_E_OK
}

func (m *CreateConfigTemplateResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *CreateConfigTemplateResp) GetData() *CreateConfigTemplateResp_RespData {
	if m != nil {
		return m.Data
	}
	return nil
}

type CreateConfigTemplateResp_RespData struct {
	TemplateId string `protobuf:"bytes,1,opt,name=template_id,json=templateId" json:"template_id,omitempty"`
}

func (m *CreateConfigTemplateResp_RespData) Reset()         { *m = CreateConfigTemplateResp_RespData{} }
func (m *CreateConfigTemplateResp_RespData) String() string { return proto.CompactTextString(m) }
func (*CreateConfigTemplateResp_RespData) ProtoMessage()    {}
func (*CreateConfigTemplateResp_RespData) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{21, 0}
}

func (m *CreateConfigTemplateResp_RespData) GetTemplateId() string {
	if m != nil {
		return m.TemplateId
	}
	return ""
}

type QueryConfigTemplateReq struct {
	Seq        string `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	BizId      string `protobuf:"bytes,2,opt,name=biz_id,json=bizId" json:"biz_id,omitempty"`
	TemplateId string `protobuf:"bytes,3,opt,name=template_id,json=templateId" json:"template_id,omitempty"`
}

func (m *QueryConfigTemplateReq) Reset()                    { *m = QueryConfigTemplateReq{} }
func (m *QueryConfigTemplateReq) String() string            { return proto.CompactTextString(m) }
func (*QueryConfigTemplateReq) ProtoMessage()               {}
func (*QueryConfigTemplateReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func (m *QueryConfigTemplateReq) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *QueryConfigTemplateReq) GetBizId() string {
	if m != nil {
		return m.BizId
	}
	return ""
}

func (m *QueryConfigTemplateReq) GetTemplateId() string {
	if m != nil {
		return m.TemplateId
	}
	return ""
}

type QueryConfigTemplateResp struct {
	Seq     string                 `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	Code    common.ErrCode         `protobuf:"varint,2,opt,name=code,enum=common.ErrCode" json:"code,omitempty"`
	Message string                 `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
	Data    *common.ConfigTemplate `protobuf:"bytes,4,opt,name=data" json:"data,omitempty"`
}

func (m *QueryConfigTemplateResp) Reset()                    { *m = QueryConfigTemplateResp{} }
func (m *QueryConfigTemplateResp) String() string            { return proto.CompactTextString(m) }
func (*QueryConfigTemplateResp) ProtoMessage()               {}
func (*QueryConfigTemplateResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

func (m *QueryConfigTemplateResp) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *QueryConfigTemplateResp) GetCode() common.ErrCode {
	if m != nil {
		return m.Code
	}
	return common.ErrCode_E_OK
}

func (m *QueryConfigTemplateResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *QueryConfigTemplateResp) GetData() *common.ConfigTemplate {
	if m != nil {
		return m.Data
	}
	return nil
}

type QueryConfigTemplateListReq struct {
	Seq   string       `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	BizId string       `protobuf:"bytes,2,opt,name=biz_id,json=bizId" json:"biz_id,omitempty"`
	Page  *common.Page `protobuf:"bytes,3,opt,name=page" json:"page,omitempty"`
}

func (m *QueryConfigTemplateListReq) Reset()                    { *m = QueryConfigTemplateListReq{} }
func (m *QueryConfigTemplateListReq) String() string            { return proto.CompactTextString(m) }
func (*QueryConfigTemplateListReq) ProtoMessage()               {}
func (*QueryConfigTemplateListReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24} }

func (m *QueryConfigTemplateListReq) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *QueryConfigTemplateListReq) GetBizId() string {
	if m != nil {
		return m.BizId
	}
	return ""
}

func (m *QueryConfigTemplateListReq) GetPage() *common.Page {
	if m != nil {
		return m.Page
	}
	return nil
}

type QueryConfigTemplateListResp struct {
	Seq     string                                `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	Code    common.ErrCode                        `protobuf:"varint,2,opt,name=code,enum=common.ErrCode" json:"code,omitempty"`
	Message string                                `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
	Data    *QueryConfigTemplateListResp_RespData `protobuf:"bytes,4,opt,name=data" json:"data,omitempty"`
}

func (m *QueryConfigTemplateListResp) Reset()                    { *m = QueryConfigTemplateListResp{} }
func (m *QueryConfigTemplateListResp) String() string            { return proto.CompactTextString(m) }
func (*QueryConfigTemplateListResp) ProtoMessage()               {}
func (*QueryConfigTemplateListResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{25} }

func (m *QueryConfigTemplateListResp) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *QueryConfigTemplateListResp) GetCode() common.ErrCode {
	if m != nil {
		return m.Code
	}
	return common.ErrCode_E_OK
}

func (m *QueryConfigTemplateListResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *QueryConfigTemplateListResp) GetData() *QueryConfigTemplateListResp_RespData {
	if m != nil {
		return m.Data
	}
	return nil
}

type QueryConfigTemplateListResp_RespData struct {
	TotalCount uint32                   `protobuf:"varint,1,opt,name=total_count,json=totalCount" json:"total_count,omitempty"`
	Info       []*common.ConfigTemplate `protobuf:"bytes,2,rep,name=info" json:"info,omitempty"`
}

func (m *QueryConfigTemplateListResp_RespData) Reset()         { *m = QueryConfigTemplateListResp_RespData{} }
func (m *QueryConfigTemplateListResp_RespData) String() string { return proto.CompactTextString(m) }
func (*QueryConfigTemplateListResp_RespData) ProtoMessage()    {}
func (*QueryConfigTemplateListResp_RespData) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{25, 0}
}

func (m *QueryConfigTemplateListResp_RespData) GetTotalCount() uint32 {
	if m != nil {
		return m.TotalCount
	}
	return 0
}

func (m *QueryConfigTemplateListResp_RespData) GetInfo() []*common.ConfigTemplate {
	if m != nil {
		return m.Info
	}
	return nil
}

type UpdateConfigTemplateReq struct {
	Seq           string `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	BizId         string `protobuf:"bytes,2,opt,name=biz_id,json=bizId" json:"biz_id,omitempty"`
	TemplateId    string `protobuf:"bytes,3,opt,name=template_id,json=templateId" json:"template_id,omitempty"`
	Name          string `protobuf:"bytes,4,opt,name=name" json:"name,omitempty"`
	CfgName       string `protobuf:"bytes,5,opt,name=cfg_name,json=cfgName" json:"cfg_name,omitempty"`
	CfgFpath      string `protobuf:"bytes,6,opt,name=cfg_fpath,json=cfgFpath" json:"cfg_fpath,omitempty"`
	User          string `protobuf:"bytes,7,opt,name=user" json:"user,omitempty"`
	UserGroup     string `protobuf:"bytes,8,opt,name=user_group,json=userGroup" json:"user_group,omitempty"`
	FilePrivilege string `protobuf:"bytes,9,opt,name=file_privilege,json=filePrivilege" json:"file_privilege,omitempty"`
	FileFormat    string `protobuf:"bytes,10,opt,name=file_format,json=fileFormat" json:"file_format,omitempty"`
	FileMode      int32  `protobuf:"varint,11,opt,name=file_mode,json=fileMode" json:"file_mode,omitempty"`
	EngineType    int32  `protobuf:"varint,12,opt,name=engine_type,json=engineType" json:"engine_type,omitempty"`
	Memo          string `protobuf:"bytes,13,opt,name=memo" json:"memo,omitempty"`
	State         int32  `protobuf:"varint,14,opt,name=state" json:"state,omitempty"`
	Operator      string `protobuf:"bytes,15,opt,name=operator" json:"operator,omitempty"`
}

func (m *UpdateConfigTemplateReq) Reset()                    { *m = UpdateConfigTemplateReq{} }
func (m *UpdateConfigTemplateReq) String() string            { return proto.CompactTextString(m) }
func (*UpdateConfigTemplateReq) ProtoMessage()               {}
func (*UpdateConfigTemplateReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{26} }

func (m *UpdateConfigTemplateReq) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *UpdateConfigTemplateReq) GetBizId() string {
	if m != nil {
		return m.BizId
	}
	return ""
}

func (m *UpdateConfigTemplateReq) GetTemplateId() string {
	if m != nil {
		return m.TemplateId
	}
	return ""
}

func (m *UpdateConfigTemplateReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UpdateConfigTemplateReq) GetCfgName() string {
	if m != nil {
		return m.CfgName
	}
	return ""
}

func (m *UpdateConfigTemplateReq) GetCfgFpath() string {
	if m != nil {
		return m.CfgFpath
	}
	return ""
}

func (m *UpdateConfigTemplateReq) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

func (m *UpdateConfigTemplateReq) GetUserGroup() string {
	if m != nil {
		return m.UserGroup
	}
	return ""
}

func (m *UpdateConfigTemplateReq) GetFilePrivilege() string {
	if m != nil {
		return m.FilePrivilege
	}
	return ""
}

func (m *UpdateConfigTemplateReq) GetFileFormat() string {
	if m != nil {
		return m.FileFormat
	}
	return ""
}

func (m *UpdateConfigTemplateReq) GetFileMode() int32 {
	if m != nil {
		return m.FileMode
	}
	return 0
}

func (m *UpdateConfigTemplateReq) GetEngineType() int32 {
	if m != nil {
		return m.EngineType
	}
	return 0
}

func (m *UpdateConfigTemplateReq) GetMemo() string {
	if m != nil {
		return m.Memo
	}
	return ""
}

func (m *UpdateConfigTemplateReq) GetState() int32 {
	if m != nil {
		return m.State
	}
	return 0
}

func (m *UpdateConfigTemplateReq) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

type UpdateConfigTemplateResp struct {
	Seq     string         `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	Code    common.ErrCode `protobuf:"varint,2,opt,name=code,enum=common.ErrCode" json:"code,omitempty"`
	Message string         `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *UpdateConfigTemplateResp) Reset()                    { *m = UpdateConfigTemplateResp{} }
func (m *UpdateConfigTemplateResp) String() string            { return proto.CompactTextString(m) }
func (*UpdateConfigTemplateResp) ProtoMessage()               {}
func (*UpdateConfigTemplateResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{27} }

func (m *UpdateConfigTemplateResp) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *UpdateConfigTemplateResp) GetCode() common.ErrCode {
	if m != nil {
		return m.Code
	}
	return common.ErrCode_E_OK
}

func (m *UpdateConfigTemplateResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type DeleteConfigTemplateReq struct {
	Seq        string `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	BizId      string `protobuf:"bytes,2,opt,name=biz_id,json=bizId" json:"biz_id,omitempty"`
	TemplateId string `protobuf:"bytes,3,opt,name=template_id,json=templateId" json:"template_id,omitempty"`
	Operator   string `protobuf:"bytes,4,opt,name=operator" json:"operator,omitempty"`
}

func (m *DeleteConfigTemplateReq) Reset()                    { *m = DeleteConfigTemplateReq{} }
func (m *DeleteConfigTemplateReq) String() string            { return proto.CompactTextString(m) }
func (*DeleteConfigTemplateReq) ProtoMessage()               {}
func (*DeleteConfigTemplateReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{28} }

func (m *DeleteConfigTemplateReq) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *DeleteConfigTemplateReq) GetBizId() string {
	if m != nil {
		return m.BizId
	}
	return ""
}

func (m *DeleteConfigTemplateReq) GetTemplateId() string {
	if m != nil {
		return m.TemplateId
	}
	return ""
}

func (m *DeleteConfigTemplateReq) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

type DeleteConfigTemplateResp struct {
	Seq     string         `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	Code    common.ErrCode `protobuf:"varint,2,opt,name=code,enum=common.ErrCode" json:"code,omitempty"`
	Message string         `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *DeleteConfigTemplateResp) Reset()                    { *m = DeleteConfigTemplateResp{} }
func (m *DeleteConfigTemplateResp) String() string            { return proto.CompactTextString(m) }
func (*DeleteConfigTemplateResp) ProtoMessage()               {}
func (*DeleteConfigTemplateResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{29} }

func (m *DeleteConfigTemplateResp) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *DeleteConfigTemplateResp) GetCode() common.ErrCode {
	if m != nil {
		return m.Code
	}
	return common.ErrCode_E_OK
}

func (m *DeleteConfigTemplateResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type CreateConfigTemplateVersionReq struct {
	Seq         string `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	VersionId   string `protobuf:"bytes,2,opt,name=version_id,json=versionId" json:"version_id,omitempty"`
	BizId       string `protobuf:"bytes,3,opt,name=biz_id,json=bizId" json:"biz_id,omitempty"`
	TemplateId  string `protobuf:"bytes,4,opt,name=template_id,json=templateId" json:"template_id,omitempty"`
	VersionTag  string `protobuf:"bytes,5,opt,name=version_tag,json=versionTag" json:"version_tag,omitempty"`
	ContentId   string `protobuf:"bytes,6,opt,name=content_id,json=contentId" json:"content_id,omitempty"`
	ContentSize uint32 `protobuf:"varint,7,opt,name=content_size,json=contentSize" json:"content_size,omitempty"`
	Memo        string `protobuf:"bytes,8,opt,name=memo" json:"memo,omitempty"`
	State       int32  `protobuf:"varint,9,opt,name=state" json:"state,omitempty"`
	Creator     string `protobuf:"bytes,10,opt,name=creator" json:"creator,omitempty"`
}

func (m *CreateConfigTemplateVersionReq) Reset()         { *m = CreateConfigTemplateVersionReq{} }
func (m *CreateConfigTemplateVersionReq) String() string { return proto.CompactTextString(m) }
func (*CreateConfigTemplateVersionReq) ProtoMessage()    {}
func (*CreateConfigTemplateVersionReq) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{30}
}

func (m *CreateConfigTemplateVersionReq) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *CreateConfigTemplateVersionReq) GetVersionId() string {
	if m != nil {
		return m.VersionId
	}
	return ""
}

func (m *CreateConfigTemplateVersionReq) GetBizId() string {
	if m != nil {
		return m.BizId
	}
	return ""
}

func (m *CreateConfigTemplateVersionReq) GetTemplateId() string {
	if m != nil {
		return m.TemplateId
	}
	return ""
}

func (m *CreateConfigTemplateVersionReq) GetVersionTag() string {
	if m != nil {
		return m.VersionTag
	}
	return ""
}

func (m *CreateConfigTemplateVersionReq) GetContentId() string {
	if m != nil {
		return m.ContentId
	}
	return ""
}

func (m *CreateConfigTemplateVersionReq) GetContentSize() uint32 {
	if m != nil {
		return m.ContentSize
	}
	return 0
}

func (m *CreateConfigTemplateVersionReq) GetMemo() string {
	if m != nil {
		return m.Memo
	}
	return ""
}

func (m *CreateConfigTemplateVersionReq) GetState() int32 {
	if m != nil {
		return m.State
	}
	return 0
}

func (m *CreateConfigTemplateVersionReq) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

type CreateConfigTemplateVersionResp struct {
	Seq     string                                    `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	Code    common.ErrCode                            `protobuf:"varint,2,opt,name=code,enum=common.ErrCode" json:"code,omitempty"`
	Message string                                    `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
	Data    *CreateConfigTemplateVersionResp_RespData `protobuf:"bytes,4,opt,name=data" json:"data,omitempty"`
}

func (m *CreateConfigTemplateVersionResp) Reset()         { *m = CreateConfigTemplateVersionResp{} }
func (m *CreateConfigTemplateVersionResp) String() string { return proto.CompactTextString(m) }
func (*CreateConfigTemplateVersionResp) ProtoMessage()    {}
func (*CreateConfigTemplateVersionResp) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{31}
}

func (m *CreateConfigTemplateVersionResp) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *CreateConfigTemplateVersionResp) GetCode() common.ErrCode {
	if m != nil {
		return m.Code
	}
	return common.ErrCode_E_OK
}

func (m *CreateConfigTemplateVersionResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *CreateConfigTemplateVersionResp) GetData() *CreateConfigTemplateVersionResp_RespData {
	if m != nil {
		return m.Data
	}
	return nil
}

type CreateConfigTemplateVersionResp_RespData struct {
	VersionId string `protobuf:"bytes,1,opt,name=version_id,json=versionId" json:"version_id,omitempty"`
}

func (m *CreateConfigTemplateVersionResp_RespData) Reset() {
	*m = CreateConfigTemplateVersionResp_RespData{}
}
func (m *CreateConfigTemplateVersionResp_RespData) String() string { return proto.CompactTextString(m) }
func (*CreateConfigTemplateVersionResp_RespData) ProtoMessage()    {}
func (*CreateConfigTemplateVersionResp_RespData) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{31, 0}
}

func (m *CreateConfigTemplateVersionResp_RespData) GetVersionId() string {
	if m != nil {
		return m.VersionId
	}
	return ""
}

type QueryConfigTemplateVersionReq struct {
	Seq       string `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	BizId     string `protobuf:"bytes,2,opt,name=biz_id,json=bizId" json:"biz_id,omitempty"`
	VersionId string `protobuf:"bytes,3,opt,name=version_id,json=versionId" json:"version_id,omitempty"`
}

func (m *QueryConfigTemplateVersionReq) Reset()                    { *m = QueryConfigTemplateVersionReq{} }
func (m *QueryConfigTemplateVersionReq) String() string            { return proto.CompactTextString(m) }
func (*QueryConfigTemplateVersionReq) ProtoMessage()               {}
func (*QueryConfigTemplateVersionReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{32} }

func (m *QueryConfigTemplateVersionReq) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *QueryConfigTemplateVersionReq) GetBizId() string {
	if m != nil {
		return m.BizId
	}
	return ""
}

func (m *QueryConfigTemplateVersionReq) GetVersionId() string {
	if m != nil {
		return m.VersionId
	}
	return ""
}

type QueryConfigTemplateVersionResp struct {
	Seq     string                        `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	Code    common.ErrCode                `protobuf:"varint,2,opt,name=code,enum=common.ErrCode" json:"code,omitempty"`
	Message string                        `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
	Data    *common.ConfigTemplateVersion `protobuf:"bytes,4,opt,name=data" json:"data,omitempty"`
}

func (m *QueryConfigTemplateVersionResp) Reset()         { *m = QueryConfigTemplateVersionResp{} }
func (m *QueryConfigTemplateVersionResp) String() string { return proto.CompactTextString(m) }
func (*QueryConfigTemplateVersionResp) ProtoMessage()    {}
func (*QueryConfigTemplateVersionResp) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{33}
}

func (m *QueryConfigTemplateVersionResp) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *QueryConfigTemplateVersionResp) GetCode() common.ErrCode {
	if m != nil {
		return m.Code
	}
	return common.ErrCode_E_OK
}

func (m *QueryConfigTemplateVersionResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *QueryConfigTemplateVersionResp) GetData() *common.ConfigTemplateVersion {
	if m != nil {
		return m.Data
	}
	return nil
}

type QueryConfigTemplateVersionListReq struct {
	Seq        string       `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	BizId      string       `protobuf:"bytes,2,opt,name=biz_id,json=bizId" json:"biz_id,omitempty"`
	TemplateId string       `protobuf:"bytes,3,opt,name=template_id,json=templateId" json:"template_id,omitempty"`
	Page       *common.Page `protobuf:"bytes,4,opt,name=page" json:"page,omitempty"`
}

func (m *QueryConfigTemplateVersionListReq) Reset()         { *m = QueryConfigTemplateVersionListReq{} }
func (m *QueryConfigTemplateVersionListReq) String() string { return proto.CompactTextString(m) }
func (*QueryConfigTemplateVersionListReq) ProtoMessage()    {}
func (*QueryConfigTemplateVersionListReq) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{34}
}

func (m *QueryConfigTemplateVersionListReq) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *QueryConfigTemplateVersionListReq) GetBizId() string {
	if m != nil {
		return m.BizId
	}
	return ""
}

func (m *QueryConfigTemplateVersionListReq) GetTemplateId() string {
	if m != nil {
		return m.TemplateId
	}
	return ""
}

func (m *QueryConfigTemplateVersionListReq) GetPage() *common.Page {
	if m != nil {
		return m.Page
	}
	return nil
}

type QueryConfigTemplateVersionListResp struct {
	Seq     string                                       `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	Code    common.ErrCode                               `protobuf:"varint,2,opt,name=code,enum=common.ErrCode" json:"code,omitempty"`
	Message string                                       `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
	Data    *QueryConfigTemplateVersionListResp_RespData `protobuf:"bytes,4,opt,name=data" json:"data,omitempty"`
}

func (m *QueryConfigTemplateVersionListResp) Reset()         { *m = QueryConfigTemplateVersionListResp{} }
func (m *QueryConfigTemplateVersionListResp) String() string { return proto.CompactTextString(m) }
func (*QueryConfigTemplateVersionListResp) ProtoMessage()    {}
func (*QueryConfigTemplateVersionListResp) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{35}
}

func (m *QueryConfigTemplateVersionListResp) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *QueryConfigTemplateVersionListResp) GetCode() common.ErrCode {
	if m != nil {
		return m.Code
	}
	return common.ErrCode_E_OK
}

func (m *QueryConfigTemplateVersionListResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *QueryConfigTemplateVersionListResp) GetData() *QueryConfigTemplateVersionListResp_RespData {
	if m != nil {
		return m.Data
	}
	return nil
}

type QueryConfigTemplateVersionListResp_RespData struct {
	TotalCount uint32                          `protobuf:"varint,1,opt,name=total_count,json=totalCount" json:"total_count,omitempty"`
	Info       []*common.ConfigTemplateVersion `protobuf:"bytes,2,rep,name=info" json:"info,omitempty"`
}

func (m *QueryConfigTemplateVersionListResp_RespData) Reset() {
	*m = QueryConfigTemplateVersionListResp_RespData{}
}
func (m *QueryConfigTemplateVersionListResp_RespData) String() string {
	return proto.CompactTextString(m)
}
func (*QueryConfigTemplateVersionListResp_RespData) ProtoMessage() {}
func (*QueryConfigTemplateVersionListResp_RespData) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{35, 0}
}

func (m *QueryConfigTemplateVersionListResp_RespData) GetTotalCount() uint32 {
	if m != nil {
		return m.TotalCount
	}
	return 0
}

func (m *QueryConfigTemplateVersionListResp_RespData) GetInfo() []*common.ConfigTemplateVersion {
	if m != nil {
		return m.Info
	}
	return nil
}

type UpdateConfigTemplateVersionReq struct {
	Seq         string `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	BizId       string `protobuf:"bytes,2,opt,name=biz_id,json=bizId" json:"biz_id,omitempty"`
	VersionId   string `protobuf:"bytes,3,opt,name=version_id,json=versionId" json:"version_id,omitempty"`
	ContentId   string `protobuf:"bytes,4,opt,name=content_id,json=contentId" json:"content_id,omitempty"`
	ContentSize uint32 `protobuf:"varint,5,opt,name=content_size,json=contentSize" json:"content_size,omitempty"`
	Memo        string `protobuf:"bytes,6,opt,name=memo" json:"memo,omitempty"`
	State       int32  `protobuf:"varint,7,opt,name=state" json:"state,omitempty"`
	Operator    string `protobuf:"bytes,8,opt,name=operator" json:"operator,omitempty"`
}

func (m *UpdateConfigTemplateVersionReq) Reset()         { *m = UpdateConfigTemplateVersionReq{} }
func (m *UpdateConfigTemplateVersionReq) String() string { return proto.CompactTextString(m) }
func (*UpdateConfigTemplateVersionReq) ProtoMessage()    {}
func (*UpdateConfigTemplateVersionReq) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{36}
}

func (m *UpdateConfigTemplateVersionReq) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *UpdateConfigTemplateVersionReq) GetBizId() string {
	if m != nil {
		return m.BizId
	}
	return ""
}

func (m *UpdateConfigTemplateVersionReq) GetVersionId() string {
	if m != nil {
		return m.VersionId
	}
	return ""
}

func (m *UpdateConfigTemplateVersionReq) GetContentId() string {
	if m != nil {
		return m.ContentId
	}
	return ""
}

func (m *UpdateConfigTemplateVersionReq) GetContentSize() uint32 {
	if m != nil {
		return m.ContentSize
	}
	return 0
}

func (m *UpdateConfigTemplateVersionReq) GetMemo() string {
	if m != nil {
		return m.Memo
	}
	return ""
}

func (m *UpdateConfigTemplateVersionReq) GetState() int32 {
	if m != nil {
		return m.State
	}
	return 0
}

func (m *UpdateConfigTemplateVersionReq) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

type UpdateConfigTemplateVersionResp struct {
	Seq     string         `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	Code    common.ErrCode `protobuf:"varint,2,opt,name=code,enum=common.ErrCode" json:"code,omitempty"`
	Message string         `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *UpdateConfigTemplateVersionResp) Reset()         { *m = UpdateConfigTemplateVersionResp{} }
func (m *UpdateConfigTemplateVersionResp) String() string { return proto.CompactTextString(m) }
func (*UpdateConfigTemplateVersionResp) ProtoMessage()    {}
func (*UpdateConfigTemplateVersionResp) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{37}
}

func (m *UpdateConfigTemplateVersionResp) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *UpdateConfigTemplateVersionResp) GetCode() common.ErrCode {
	if m != nil {
		return m.Code
	}
	return common.ErrCode_E_OK
}

func (m *UpdateConfigTemplateVersionResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type DeleteConfigTemplateVersionReq struct {
	Seq       string `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	BizId     string `protobuf:"bytes,2,opt,name=biz_id,json=bizId" json:"biz_id,omitempty"`
	VersionId string `protobuf:"bytes,3,opt,name=version_id,json=versionId" json:"version_id,omitempty"`
	Operator  string `protobuf:"bytes,4,opt,name=operator" json:"operator,omitempty"`
}

func (m *DeleteConfigTemplateVersionReq) Reset()         { *m = DeleteConfigTemplateVersionReq{} }
func (m *DeleteConfigTemplateVersionReq) String() string { return proto.CompactTextString(m) }
func (*DeleteConfigTemplateVersionReq) ProtoMessage()    {}
func (*DeleteConfigTemplateVersionReq) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{38}
}

func (m *DeleteConfigTemplateVersionReq) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *DeleteConfigTemplateVersionReq) GetBizId() string {
	if m != nil {
		return m.BizId
	}
	return ""
}

func (m *DeleteConfigTemplateVersionReq) GetVersionId() string {
	if m != nil {
		return m.VersionId
	}
	return ""
}

func (m *DeleteConfigTemplateVersionReq) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

type DeleteConfigTemplateVersionResp struct {
	Seq     string         `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	Code    common.ErrCode `protobuf:"varint,2,opt,name=code,enum=common.ErrCode" json:"code,omitempty"`
	Message string         `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *DeleteConfigTemplateVersionResp) Reset()         { *m = DeleteConfigTemplateVersionResp{} }
func (m *DeleteConfigTemplateVersionResp) String() string { return proto.CompactTextString(m) }
func (*DeleteConfigTemplateVersionResp) ProtoMessage()    {}
func (*DeleteConfigTemplateVersionResp) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{39}
}

func (m *DeleteConfigTemplateVersionResp) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *DeleteConfigTemplateVersionResp) GetCode() common.ErrCode {
	if m != nil {
		return m.Code
	}
	return common.ErrCode_E_OK
}

func (m *DeleteConfigTemplateVersionResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type CreateVariableGroupReq struct {
	Seq        string `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	BizId      string `protobuf:"bytes,2,opt,name=biz_id,json=bizId" json:"biz_id,omitempty"`
	VarGroupId string `protobuf:"bytes,3,opt,name=var_group_id,json=varGroupId" json:"var_group_id,omitempty"`
	Name       string `protobuf:"bytes,4,opt,name=name" json:"name,omitempty"`
	Memo       string `protobuf:"bytes,5,opt,name=memo" json:"memo,omitempty"`
	Creator    string `protobuf:"bytes,6,opt,name=creator" json:"creator,omitempty"`
}

func (m *CreateVariableGroupReq) Reset()                    { *m = CreateVariableGroupReq{} }
func (m *CreateVariableGroupReq) String() string            { return proto.CompactTextString(m) }
func (*CreateVariableGroupReq) ProtoMessage()               {}
func (*CreateVariableGroupReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{40} }

func (m *CreateVariableGroupReq) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *CreateVariableGroupReq) GetBizId() string {
	if m != nil {
		return m.BizId
	}
	return ""
}

func (m *CreateVariableGroupReq) GetVarGroupId() string {
	if m != nil {
		return m.VarGroupId
	}
	return ""
}

func (m *CreateVariableGroupReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CreateVariableGroupReq) GetMemo() string {
	if m != nil {
		return m.Memo
	}
	return ""
}

func (m *CreateVariableGroupReq) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

type CreateVariableGroupResp struct {
	Seq     string                            `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	Code    common.ErrCode                    `protobuf:"varint,2,opt,name=code,enum=common.ErrCode" json:"code,omitempty"`
	Message string                            `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
	Data    *CreateVariableGroupResp_RespData `protobuf:"bytes,4,opt,name=data" json:"data,omitempty"`
}

func (m *CreateVariableGroupResp) Reset()                    { *m = CreateVariableGroupResp{} }
func (m *CreateVariableGroupResp) String() string            { return proto.CompactTextString(m) }
func (*CreateVariableGroupResp) ProtoMessage()               {}
func (*CreateVariableGroupResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{41} }

func (m *CreateVariableGroupResp) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *CreateVariableGroupResp) GetCode() common.ErrCode {
	if m != nil {
		return m.Code
	}
	return common.ErrCode_E_OK
}

func (m *CreateVariableGroupResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *CreateVariableGroupResp) GetData() *CreateVariableGroupResp_RespData {
	if m != nil {
		return m.Data
	}
	return nil
}

type CreateVariableGroupResp_RespData struct {
	VarGroupId string `protobuf:"bytes,1,opt,name=var_group_id,json=varGroupId" json:"var_group_id,omitempty"`
}

func (m *CreateVariableGroupResp_RespData) Reset()         { *m = CreateVariableGroupResp_RespData{} }
func (m *CreateVariableGroupResp_RespData) String() string { return proto.CompactTextString(m) }
func (*CreateVariableGroupResp_RespData) ProtoMessage()    {}
func (*CreateVariableGroupResp_RespData) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{41, 0}
}

func (m *CreateVariableGroupResp_RespData) GetVarGroupId() string {
	if m != nil {
		return m.VarGroupId
	}
	return ""
}

type QueryVariableGroupReq struct {
	Seq        string `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	BizId      string `protobuf:"bytes,2,opt,name=biz_id,json=bizId" json:"biz_id,omitempty"`
	VarGroupId string `protobuf:"bytes,3,opt,name=var_group_id,json=varGroupId" json:"var_group_id,omitempty"`
	Name       string `protobuf:"bytes,4,opt,name=name" json:"name,omitempty"`
}

func (m *QueryVariableGroupReq) Reset()                    { *m = QueryVariableGroupReq{} }
func (m *QueryVariableGroupReq) String() string            { return proto.CompactTextString(m) }
func (*QueryVariableGroupReq) ProtoMessage()               {}
func (*QueryVariableGroupReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{42} }

func (m *QueryVariableGroupReq) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *QueryVariableGroupReq) GetBizId() string {
	if m != nil {
		return m.BizId
	}
	return ""
}

func (m *QueryVariableGroupReq) GetVarGroupId() string {
	if m != nil {
		return m.VarGroupId
	}
	return ""
}

func (m *QueryVariableGroupReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type QueryVariableGroupResp struct {
	Seq     string                `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	Code    common.ErrCode        `protobuf:"varint,2,opt,name=code,enum=common.ErrCode" json:"code,omitempty"`
	Message string                `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
	Data    *common.VariableGroup `protobuf:"bytes,4,opt,name=data" json:"data,omitempty"`
}

func (m *QueryVariableGroupResp) Reset()                    { *m = QueryVariableGroupResp{} }
func (m *QueryVariableGroupResp) String() string            { return proto.CompactTextString(m) }
func (*QueryVariableGroupResp) ProtoMessage()               {}
func (*QueryVariableGroupResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{43} }

func (m *QueryVariableGroupResp) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *QueryVariableGroupResp) GetCode() common.ErrCode {
	if m != nil {
		return m.Code
	}
	return common.ErrCode_E_OK
}

func (m *QueryVariableGroupResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *QueryVariableGroupResp) GetData() *common.VariableGroup {
	if m != nil {
		return m.Data
	}
	return nil
}

type QueryVariableGroupListReq struct {
	Seq   string       `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	BizId string       `protobuf:"bytes,2,opt,name=biz_id,json=bizId" json:"biz_id,omitempty"`
	Page  *common.Page `protobuf:"bytes,3,opt,name=page" json:"page,omitempty"`
}

func (m *QueryVariableGroupListReq) Reset()                    { *m = QueryVariableGroupListReq{} }
func (m *QueryVariableGroupListReq) String() string            { return proto.CompactTextString(m) }
func (*QueryVariableGroupListReq) ProtoMessage()               {}
func (*QueryVariableGroupListReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{44} }

func (m *QueryVariableGroupListReq) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *QueryVariableGroupListReq) GetBizId() string {
	if m != nil {
		return m.BizId
	}
	return ""
}

func (m *QueryVariableGroupListReq) GetPage() *common.Page {
	if m != nil {
		return m.Page
	}
	return nil
}

type QueryVariableGroupListResp struct {
	Seq     string                               `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	Code    common.ErrCode                       `protobuf:"varint,2,opt,name=code,enum=common.ErrCode" json:"code,omitempty"`
	Message string                               `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
	Data    *QueryVariableGroupListResp_RespData `protobuf:"bytes,4,opt,name=data" json:"data,omitempty"`
}

func (m *QueryVariableGroupListResp) Reset()                    { *m = QueryVariableGroupListResp{} }
func (m *QueryVariableGroupListResp) String() string            { return proto.CompactTextString(m) }
func (*QueryVariableGroupListResp) ProtoMessage()               {}
func (*QueryVariableGroupListResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{45} }

func (m *QueryVariableGroupListResp) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *QueryVariableGroupListResp) GetCode() common.ErrCode {
	if m != nil {
		return m.Code
	}
	return common.ErrCode_E_OK
}

func (m *QueryVariableGroupListResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *QueryVariableGroupListResp) GetData() *QueryVariableGroupListResp_RespData {
	if m != nil {
		return m.Data
	}
	return nil
}

type QueryVariableGroupListResp_RespData struct {
	TotalCount uint32                  `protobuf:"varint,1,opt,name=total_count,json=totalCount" json:"total_count,omitempty"`
	Info       []*common.VariableGroup `protobuf:"bytes,2,rep,name=info" json:"info,omitempty"`
}

func (m *QueryVariableGroupListResp_RespData) Reset()         { *m = QueryVariableGroupListResp_RespData{} }
func (m *QueryVariableGroupListResp_RespData) String() string { return proto.CompactTextString(m) }
func (*QueryVariableGroupListResp_RespData) ProtoMessage()    {}
func (*QueryVariableGroupListResp_RespData) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{45, 0}
}

func (m *QueryVariableGroupListResp_RespData) GetTotalCount() uint32 {
	if m != nil {
		return m.TotalCount
	}
	return 0
}

func (m *QueryVariableGroupListResp_RespData) GetInfo() []*common.VariableGroup {
	if m != nil {
		return m.Info
	}
	return nil
}

type DeleteVariableGroupReq struct {
	Seq        string `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	BizId      string `protobuf:"bytes,2,opt,name=biz_id,json=bizId" json:"biz_id,omitempty"`
	VarGroupId string `protobuf:"bytes,3,opt,name=var_group_id,json=varGroupId" json:"var_group_id,omitempty"`
	Operator   string `protobuf:"bytes,4,opt,name=operator" json:"operator,omitempty"`
}

func (m *DeleteVariableGroupReq) Reset()                    { *m = DeleteVariableGroupReq{} }
func (m *DeleteVariableGroupReq) String() string            { return proto.CompactTextString(m) }
func (*DeleteVariableGroupReq) ProtoMessage()               {}
func (*DeleteVariableGroupReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{46} }

func (m *DeleteVariableGroupReq) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *DeleteVariableGroupReq) GetBizId() string {
	if m != nil {
		return m.BizId
	}
	return ""
}

func (m *DeleteVariableGroupReq) GetVarGroupId() string {
	if m != nil {
		return m.VarGroupId
	}
	return ""
}

func (m *DeleteVariableGroupReq) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

type DeleteVariableGroupResp struct {
	Seq     string         `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	Code    common.ErrCode `protobuf:"varint,2,opt,name=code,enum=common.ErrCode" json:"code,omitempty"`
	Message string         `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *DeleteVariableGroupResp) Reset()                    { *m = DeleteVariableGroupResp{} }
func (m *DeleteVariableGroupResp) String() string            { return proto.CompactTextString(m) }
func (*DeleteVariableGroupResp) ProtoMessage()               {}
func (*DeleteVariableGroupResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{47} }

func (m *DeleteVariableGroupResp) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *DeleteVariableGroupResp) GetCode() common.ErrCode {
	if m != nil {
		return m.Code
	}
	return common.ErrCode_E_OK
}

func (m *DeleteVariableGroupResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type CreateVariableReq struct {
	Seq        string `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	BizId      string `protobuf:"bytes,2,opt,name=biz_id,json=bizId" json:"biz_id,omitempty"`
	VarId      string `protobuf:"bytes,3,opt,name=var_id,json=varId" json:"var_id,omitempty"`
	Name       string `protobuf:"bytes,4,opt,name=name" json:"name,omitempty"`
	Value      string `protobuf:"bytes,5,opt,name=value" json:"value,omitempty"`
	VarGroupId string `protobuf:"bytes,6,opt,name=var_group_id,json=varGroupId" json:"var_group_id,omitempty"`
	Creator    string `protobuf:"bytes,7,opt,name=creator" json:"creator,omitempty"`
}

func (m *CreateVariableReq) Reset()                    { *m = CreateVariableReq{} }
func (m *CreateVariableReq) String() string            { return proto.CompactTextString(m) }
func (*CreateVariableReq) ProtoMessage()               {}
func (*CreateVariableReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{48} }

func (m *CreateVariableReq) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *CreateVariableReq) GetBizId() string {
	if m != nil {
		return m.BizId
	}
	return ""
}

func (m *CreateVariableReq) GetVarId() string {
	if m != nil {
		return m.VarId
	}
	return ""
}

func (m *CreateVariableReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CreateVariableReq) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *CreateVariableReq) GetVarGroupId() string {
	if m != nil {
		return m.VarGroupId
	}
	return ""
}

func (m *CreateVariableReq) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

type CreateVariableResp struct {
	Seq     string                       `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	Code    common.ErrCode               `protobuf:"varint,2,opt,name=code,enum=common.ErrCode" json:"code,omitempty"`
	Message string                       `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
	Data    *CreateVariableResp_RespData `protobuf:"bytes,4,opt,name=data" json:"data,omitempty"`
}

func (m *CreateVariableResp) Reset()                    { *m = CreateVariableResp{} }
func (m *CreateVariableResp) String() string            { return proto.CompactTextString(m) }
func (*CreateVariableResp) ProtoMessage()               {}
func (*CreateVariableResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{49} }

func (m *CreateVariableResp) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *CreateVariableResp) GetCode() common.ErrCode {
	if m != nil {
		return m.Code
	}
	return common.ErrCode_E_OK
}

func (m *CreateVariableResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *CreateVariableResp) GetData() *CreateVariableResp_RespData {
	if m != nil {
		return m.Data
	}
	return nil
}

type CreateVariableResp_RespData struct {
	VarId string `protobuf:"bytes,1,opt,name=var_id,json=varId" json:"var_id,omitempty"`
}

func (m *CreateVariableResp_RespData) Reset()         { *m = CreateVariableResp_RespData{} }
func (m *CreateVariableResp_RespData) String() string { return proto.CompactTextString(m) }
func (*CreateVariableResp_RespData) ProtoMessage()    {}
func (*CreateVariableResp_RespData) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{49, 0}
}

func (m *CreateVariableResp_RespData) GetVarId() string {
	if m != nil {
		return m.VarId
	}
	return ""
}

type UpdateVariableReq struct {
	Seq      string `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	BizId    string `protobuf:"bytes,2,opt,name=biz_id,json=bizId" json:"biz_id,omitempty"`
	VarId    string `protobuf:"bytes,3,opt,name=var_id,json=varId" json:"var_id,omitempty"`
	Value    string `protobuf:"bytes,4,opt,name=value" json:"value,omitempty"`
	Operator string `protobuf:"bytes,5,opt,name=operator" json:"operator,omitempty"`
}

func (m *UpdateVariableReq) Reset()                    { *m = UpdateVariableReq{} }
func (m *UpdateVariableReq) String() string            { return proto.CompactTextString(m) }
func (*UpdateVariableReq) ProtoMessage()               {}
func (*UpdateVariableReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{50} }

func (m *UpdateVariableReq) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *UpdateVariableReq) GetBizId() string {
	if m != nil {
		return m.BizId
	}
	return ""
}

func (m *UpdateVariableReq) GetVarId() string {
	if m != nil {
		return m.VarId
	}
	return ""
}

func (m *UpdateVariableReq) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *UpdateVariableReq) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

type UpdateVariableResp struct {
	Seq     string         `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	Code    common.ErrCode `protobuf:"varint,2,opt,name=code,enum=common.ErrCode" json:"code,omitempty"`
	Message string         `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *UpdateVariableResp) Reset()                    { *m = UpdateVariableResp{} }
func (m *UpdateVariableResp) String() string            { return proto.CompactTextString(m) }
func (*UpdateVariableResp) ProtoMessage()               {}
func (*UpdateVariableResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{51} }

func (m *UpdateVariableResp) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *UpdateVariableResp) GetCode() common.ErrCode {
	if m != nil {
		return m.Code
	}
	return common.ErrCode_E_OK
}

func (m *UpdateVariableResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type QueryVariableReq struct {
	Seq        string `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	BizId      string `protobuf:"bytes,2,opt,name=biz_id,json=bizId" json:"biz_id,omitempty"`
	VarId      string `protobuf:"bytes,3,opt,name=var_id,json=varId" json:"var_id,omitempty"`
	VarGroupId string `protobuf:"bytes,4,opt,name=var_group_id,json=varGroupId" json:"var_group_id,omitempty"`
	Name       string `protobuf:"bytes,5,opt,name=name" json:"name,omitempty"`
}

func (m *QueryVariableReq) Reset()                    { *m = QueryVariableReq{} }
func (m *QueryVariableReq) String() string            { return proto.CompactTextString(m) }
func (*QueryVariableReq) ProtoMessage()               {}
func (*QueryVariableReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{52} }

func (m *QueryVariableReq) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *QueryVariableReq) GetBizId() string {
	if m != nil {
		return m.BizId
	}
	return ""
}

func (m *QueryVariableReq) GetVarId() string {
	if m != nil {
		return m.VarId
	}
	return ""
}

func (m *QueryVariableReq) GetVarGroupId() string {
	if m != nil {
		return m.VarGroupId
	}
	return ""
}

func (m *QueryVariableReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type QueryVariableResp struct {
	Seq     string           `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	Code    common.ErrCode   `protobuf:"varint,2,opt,name=code,enum=common.ErrCode" json:"code,omitempty"`
	Message string           `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
	Data    *common.Variable `protobuf:"bytes,4,opt,name=data" json:"data,omitempty"`
}

func (m *QueryVariableResp) Reset()                    { *m = QueryVariableResp{} }
func (m *QueryVariableResp) String() string            { return proto.CompactTextString(m) }
func (*QueryVariableResp) ProtoMessage()               {}
func (*QueryVariableResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{53} }

func (m *QueryVariableResp) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *QueryVariableResp) GetCode() common.ErrCode {
	if m != nil {
		return m.Code
	}
	return common.ErrCode_E_OK
}

func (m *QueryVariableResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *QueryVariableResp) GetData() *common.Variable {
	if m != nil {
		return m.Data
	}
	return nil
}

type QueryVariableListReq struct {
	Seq        string       `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	BizId      string       `protobuf:"bytes,2,opt,name=biz_id,json=bizId" json:"biz_id,omitempty"`
	VarGroupId string       `protobuf:"bytes,3,opt,name=var_group_id,json=varGroupId" json:"var_group_id,omitempty"`
	Page       *common.Page `protobuf:"bytes,4,opt,name=page" json:"page,omitempty"`
}

func (m *QueryVariableListReq) Reset()                    { *m = QueryVariableListReq{} }
func (m *QueryVariableListReq) String() string            { return proto.CompactTextString(m) }
func (*QueryVariableListReq) ProtoMessage()               {}
func (*QueryVariableListReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{54} }

func (m *QueryVariableListReq) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *QueryVariableListReq) GetBizId() string {
	if m != nil {
		return m.BizId
	}
	return ""
}

func (m *QueryVariableListReq) GetVarGroupId() string {
	if m != nil {
		return m.VarGroupId
	}
	return ""
}

func (m *QueryVariableListReq) GetPage() *common.Page {
	if m != nil {
		return m.Page
	}
	return nil
}

type QueryVariableListResp struct {
	Seq     string                          `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	Code    common.ErrCode                  `protobuf:"varint,2,opt,name=code,enum=common.ErrCode" json:"code,omitempty"`
	Message string                          `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
	Data    *QueryVariableListResp_RespData `protobuf:"bytes,4,opt,name=data" json:"data,omitempty"`
}

func (m *QueryVariableListResp) Reset()                    { *m = QueryVariableListResp{} }
func (m *QueryVariableListResp) String() string            { return proto.CompactTextString(m) }
func (*QueryVariableListResp) ProtoMessage()               {}
func (*QueryVariableListResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{55} }

func (m *QueryVariableListResp) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *QueryVariableListResp) GetCode() common.ErrCode {
	if m != nil {
		return m.Code
	}
	return common.ErrCode_E_OK
}

func (m *QueryVariableListResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *QueryVariableListResp) GetData() *QueryVariableListResp_RespData {
	if m != nil {
		return m.Data
	}
	return nil
}

type QueryVariableListResp_RespData struct {
	TotalCount uint32             `protobuf:"varint,1,opt,name=total_count,json=totalCount" json:"total_count,omitempty"`
	Info       []*common.Variable `protobuf:"bytes,2,rep,name=info" json:"info,omitempty"`
}

func (m *QueryVariableListResp_RespData) Reset()         { *m = QueryVariableListResp_RespData{} }
func (m *QueryVariableListResp_RespData) String() string { return proto.CompactTextString(m) }
func (*QueryVariableListResp_RespData) ProtoMessage()    {}
func (*QueryVariableListResp_RespData) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{55, 0}
}

func (m *QueryVariableListResp_RespData) GetTotalCount() uint32 {
	if m != nil {
		return m.TotalCount
	}
	return 0
}

func (m *QueryVariableListResp_RespData) GetInfo() []*common.Variable {
	if m != nil {
		return m.Info
	}
	return nil
}

type DeleteVariableReq struct {
	Seq      string `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	BizId    string `protobuf:"bytes,2,opt,name=biz_id,json=bizId" json:"biz_id,omitempty"`
	VarId    string `protobuf:"bytes,3,opt,name=var_id,json=varId" json:"var_id,omitempty"`
	Operator string `protobuf:"bytes,4,opt,name=operator" json:"operator,omitempty"`
}

func (m *DeleteVariableReq) Reset()                    { *m = DeleteVariableReq{} }
func (m *DeleteVariableReq) String() string            { return proto.CompactTextString(m) }
func (*DeleteVariableReq) ProtoMessage()               {}
func (*DeleteVariableReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{56} }

func (m *DeleteVariableReq) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *DeleteVariableReq) GetBizId() string {
	if m != nil {
		return m.BizId
	}
	return ""
}

func (m *DeleteVariableReq) GetVarId() string {
	if m != nil {
		return m.VarId
	}
	return ""
}

func (m *DeleteVariableReq) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

type DeleteVariableResp struct {
	Seq     string         `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	Code    common.ErrCode `protobuf:"varint,2,opt,name=code,enum=common.ErrCode" json:"code,omitempty"`
	Message string         `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *DeleteVariableResp) Reset()                    { *m = DeleteVariableResp{} }
func (m *DeleteVariableResp) String() string            { return proto.CompactTextString(m) }
func (*DeleteVariableResp) ProtoMessage()               {}
func (*DeleteVariableResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{57} }

func (m *DeleteVariableResp) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *DeleteVariableResp) GetCode() common.ErrCode {
	if m != nil {
		return m.Code
	}
	return common.ErrCode_E_OK
}

func (m *DeleteVariableResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type CreateConfigReq struct {
	Seq           string `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	BizId         string `protobuf:"bytes,2,opt,name=biz_id,json=bizId" json:"biz_id,omitempty"`
	AppId         string `protobuf:"bytes,3,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	CfgId         string `protobuf:"bytes,4,opt,name=cfg_id,json=cfgId" json:"cfg_id,omitempty"`
	Name          string `protobuf:"bytes,5,opt,name=name" json:"name,omitempty"`
	Fpath         string `protobuf:"bytes,6,opt,name=fpath" json:"fpath,omitempty"`
	User          string `protobuf:"bytes,7,opt,name=user" json:"user,omitempty"`
	UserGroup     string `protobuf:"bytes,8,opt,name=user_group,json=userGroup" json:"user_group,omitempty"`
	FilePrivilege string `protobuf:"bytes,9,opt,name=file_privilege,json=filePrivilege" json:"file_privilege,omitempty"`
	FileFormat    string `protobuf:"bytes,10,opt,name=file_format,json=fileFormat" json:"file_format,omitempty"`
	FileMode      int32  `protobuf:"varint,11,opt,name=file_mode,json=fileMode" json:"file_mode,omitempty"`
	State         int32  `protobuf:"varint,12,opt,name=state" json:"state,omitempty"`
	Creator       string `protobuf:"bytes,13,opt,name=creator" json:"creator,omitempty"`
	Memo          string `protobuf:"bytes,14,opt,name=memo" json:"memo,omitempty"`
}

func (m *CreateConfigReq) Reset()                    { *m = CreateConfigReq{} }
func (m *CreateConfigReq) String() string            { return proto.CompactTextString(m) }
func (*CreateConfigReq) ProtoMessage()               {}
func (*CreateConfigReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{58} }

func (m *CreateConfigReq) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *CreateConfigReq) GetBizId() string {
	if m != nil {
		return m.BizId
	}
	return ""
}

func (m *CreateConfigReq) GetAppId() string {
	if m != nil {
		return m.AppId
	}
	return ""
}

func (m *CreateConfigReq) GetCfgId() string {
	if m != nil {
		return m.CfgId
	}
	return ""
}

func (m *CreateConfigReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CreateConfigReq) GetFpath() string {
	if m != nil {
		return m.Fpath
	}
	return ""
}

func (m *CreateConfigReq) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

func (m *CreateConfigReq) GetUserGroup() string {
	if m != nil {
		return m.UserGroup
	}
	return ""
}

func (m *CreateConfigReq) GetFilePrivilege() string {
	if m != nil {
		return m.FilePrivilege
	}
	return ""
}

func (m *CreateConfigReq) GetFileFormat() string {
	if m != nil {
		return m.FileFormat
	}
	return ""
}

func (m *CreateConfigReq) GetFileMode() int32 {
	if m != nil {
		return m.FileMode
	}
	return 0
}

func (m *CreateConfigReq) GetState() int32 {
	if m != nil {
		return m.State
	}
	return 0
}

func (m *CreateConfigReq) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *CreateConfigReq) GetMemo() string {
	if m != nil {
		return m.Memo
	}
	return ""
}

type CreateConfigResp struct {
	Seq     string                     `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	Code    common.ErrCode             `protobuf:"varint,2,opt,name=code,enum=common.ErrCode" json:"code,omitempty"`
	Message string                     `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
	Data    *CreateConfigResp_RespData `protobuf:"bytes,4,opt,name=data" json:"data,omitempty"`
}

func (m *CreateConfigResp) Reset()                    { *m = CreateConfigResp{} }
func (m *CreateConfigResp) String() string            { return proto.CompactTextString(m) }
func (*CreateConfigResp) ProtoMessage()               {}
func (*CreateConfigResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{59} }

func (m *CreateConfigResp) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *CreateConfigResp) GetCode() common.ErrCode {
	if m != nil {
		return m.Code
	}
	return common.ErrCode_E_OK
}

func (m *CreateConfigResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *CreateConfigResp) GetData() *CreateConfigResp_RespData {
	if m != nil {
		return m.Data
	}
	return nil
}

type CreateConfigResp_RespData struct {
	CfgId string `protobuf:"bytes,1,opt,name=cfg_id,json=cfgId" json:"cfg_id,omitempty"`
}

func (m *CreateConfigResp_RespData) Reset()                    { *m = CreateConfigResp_RespData{} }
func (m *CreateConfigResp_RespData) String() string            { return proto.CompactTextString(m) }
func (*CreateConfigResp_RespData) ProtoMessage()               {}
func (*CreateConfigResp_RespData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{59, 0} }

func (m *CreateConfigResp_RespData) GetCfgId() string {
	if m != nil {
		return m.CfgId
	}
	return ""
}

type QueryConfigReq struct {
	Seq   string `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	BizId string `protobuf:"bytes,2,opt,name=biz_id,json=bizId" json:"biz_id,omitempty"`
	AppId string `protobuf:"bytes,3,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	CfgId string `protobuf:"bytes,4,opt,name=cfg_id,json=cfgId" json:"cfg_id,omitempty"`
	Name  string `protobuf:"bytes,5,opt,name=name" json:"name,omitempty"`
	Fpath string `protobuf:"bytes,6,opt,name=fpath" json:"fpath,omitempty"`
}

func (m *QueryConfigReq) Reset()                    { *m = QueryConfigReq{} }
func (m *QueryConfigReq) String() string            { return proto.CompactTextString(m) }
func (*QueryConfigReq) ProtoMessage()               {}
func (*QueryConfigReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{60} }

func (m *QueryConfigReq) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *QueryConfigReq) GetBizId() string {
	if m != nil {
		return m.BizId
	}
	return ""
}

func (m *QueryConfigReq) GetAppId() string {
	if m != nil {
		return m.AppId
	}
	return ""
}

func (m *QueryConfigReq) GetCfgId() string {
	if m != nil {
		return m.CfgId
	}
	return ""
}

func (m *QueryConfigReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *QueryConfigReq) GetFpath() string {
	if m != nil {
		return m.Fpath
	}
	return ""
}

type QueryConfigResp struct {
	Seq     string         `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	Code    common.ErrCode `protobuf:"varint,2,opt,name=code,enum=common.ErrCode" json:"code,omitempty"`
	Message string         `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
	Data    *common.Config `protobuf:"bytes,4,opt,name=data" json:"data,omitempty"`
}

func (m *QueryConfigResp) Reset()                    { *m = QueryConfigResp{} }
func (m *QueryConfigResp) String() string            { return proto.CompactTextString(m) }
func (*QueryConfigResp) ProtoMessage()               {}
func (*QueryConfigResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{61} }

func (m *QueryConfigResp) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *QueryConfigResp) GetCode() common.ErrCode {
	if m != nil {
		return m.Code
	}
	return common.ErrCode_E_OK
}

func (m *QueryConfigResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *QueryConfigResp) GetData() *common.Config {
	if m != nil {
		return m.Data
	}
	return nil
}

type QueryConfigListReq struct {
	Seq       string       `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	BizId     string       `protobuf:"bytes,2,opt,name=biz_id,json=bizId" json:"biz_id,omitempty"`
	AppId     string       `protobuf:"bytes,3,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	AppName   string       `protobuf:"bytes,4,opt,name=app_name,json=appName" json:"app_name,omitempty"`
	Page      *common.Page `protobuf:"bytes,5,opt,name=page" json:"page,omitempty"`
	QueryType int32        `protobuf:"varint,6,opt,name=query_type,json=queryType" json:"query_type,omitempty"`
}

func (m *QueryConfigListReq) Reset()                    { *m = QueryConfigListReq{} }
func (m *QueryConfigListReq) String() string            { return proto.CompactTextString(m) }
func (*QueryConfigListReq) ProtoMessage()               {}
func (*QueryConfigListReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{62} }

func (m *QueryConfigListReq) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *QueryConfigListReq) GetBizId() string {
	if m != nil {
		return m.BizId
	}
	return ""
}

func (m *QueryConfigListReq) GetAppId() string {
	if m != nil {
		return m.AppId
	}
	return ""
}

func (m *QueryConfigListReq) GetAppName() string {
	if m != nil {
		return m.AppName
	}
	return ""
}

func (m *QueryConfigListReq) GetPage() *common.Page {
	if m != nil {
		return m.Page
	}
	return nil
}

func (m *QueryConfigListReq) GetQueryType() int32 {
	if m != nil {
		return m.QueryType
	}
	return 0
}

type QueryConfigListResp struct {
	Seq     string                        `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	Code    common.ErrCode                `protobuf:"varint,2,opt,name=code,enum=common.ErrCode" json:"code,omitempty"`
	Message string                        `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
	Data    *QueryConfigListResp_RespData `protobuf:"bytes,4,opt,name=data" json:"data,omitempty"`
}

func (m *QueryConfigListResp) Reset()                    { *m = QueryConfigListResp{} }
func (m *QueryConfigListResp) String() string            { return proto.CompactTextString(m) }
func (*QueryConfigListResp) ProtoMessage()               {}
func (*QueryConfigListResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{63} }

func (m *QueryConfigListResp) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *QueryConfigListResp) GetCode() common.ErrCode {
	if m != nil {
		return m.Code
	}
	return common.ErrCode_E_OK
}

func (m *QueryConfigListResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *QueryConfigListResp) GetData() *QueryConfigListResp_RespData {
	if m != nil {
		return m.Data
	}
	return nil
}

type QueryConfigListResp_RespData struct {
	TotalCount uint32           `protobuf:"varint,1,opt,name=total_count,json=totalCount" json:"total_count,omitempty"`
	Info       []*common.Config `protobuf:"bytes,2,rep,name=info" json:"info,omitempty"`
}

func (m *QueryConfigListResp_RespData) Reset()         { *m = QueryConfigListResp_RespData{} }
func (m *QueryConfigListResp_RespData) String() string { return proto.CompactTextString(m) }
func (*QueryConfigListResp_RespData) ProtoMessage()    {}
func (*QueryConfigListResp_RespData) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{63, 0}
}

func (m *QueryConfigListResp_RespData) GetTotalCount() uint32 {
	if m != nil {
		return m.TotalCount
	}
	return 0
}

func (m *QueryConfigListResp_RespData) GetInfo() []*common.Config {
	if m != nil {
		return m.Info
	}
	return nil
}

type UpdateConfigReq struct {
	Seq           string `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	BizId         string `protobuf:"bytes,2,opt,name=biz_id,json=bizId" json:"biz_id,omitempty"`
	CfgId         string `protobuf:"bytes,3,opt,name=cfg_id,json=cfgId" json:"cfg_id,omitempty"`
	Name          string `protobuf:"bytes,4,opt,name=name" json:"name,omitempty"`
	Fpath         string `protobuf:"bytes,5,opt,name=fpath" json:"fpath,omitempty"`
	User          string `protobuf:"bytes,6,opt,name=user" json:"user,omitempty"`
	UserGroup     string `protobuf:"bytes,7,opt,name=user_group,json=userGroup" json:"user_group,omitempty"`
	FilePrivilege string `protobuf:"bytes,8,opt,name=file_privilege,json=filePrivilege" json:"file_privilege,omitempty"`
	FileFormat    string `protobuf:"bytes,9,opt,name=file_format,json=fileFormat" json:"file_format,omitempty"`
	FileMode      int32  `protobuf:"varint,10,opt,name=file_mode,json=fileMode" json:"file_mode,omitempty"`
	Memo          string `protobuf:"bytes,11,opt,name=memo" json:"memo,omitempty"`
	State         int32  `protobuf:"varint,12,opt,name=state" json:"state,omitempty"`
	Operator      string `protobuf:"bytes,13,opt,name=operator" json:"operator,omitempty"`
}

func (m *UpdateConfigReq) Reset()                    { *m = UpdateConfigReq{} }
func (m *UpdateConfigReq) String() string            { return proto.CompactTextString(m) }
func (*UpdateConfigReq) ProtoMessage()               {}
func (*UpdateConfigReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{64} }

func (m *UpdateConfigReq) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *UpdateConfigReq) GetBizId() string {
	if m != nil {
		return m.BizId
	}
	return ""
}

func (m *UpdateConfigReq) GetCfgId() string {
	if m != nil {
		return m.CfgId
	}
	return ""
}

func (m *UpdateConfigReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UpdateConfigReq) GetFpath() string {
	if m != nil {
		return m.Fpath
	}
	return ""
}

func (m *UpdateConfigReq) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

func (m *UpdateConfigReq) GetUserGroup() string {
	if m != nil {
		return m.UserGroup
	}
	return ""
}

func (m *UpdateConfigReq) GetFilePrivilege() string {
	if m != nil {
		return m.FilePrivilege
	}
	return ""
}

func (m *UpdateConfigReq) GetFileFormat() string {
	if m != nil {
		return m.FileFormat
	}
	return ""
}

func (m *UpdateConfigReq) GetFileMode() int32 {
	if m != nil {
		return m.FileMode
	}
	return 0
}

func (m *UpdateConfigReq) GetMemo() string {
	if m != nil {
		return m.Memo
	}
	return ""
}

func (m *UpdateConfigReq) GetState() int32 {
	if m != nil {
		return m.State
	}
	return 0
}

func (m *UpdateConfigReq) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

type UpdateConfigResp struct {
	Seq     string         `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	Code    common.ErrCode `protobuf:"varint,2,opt,name=code,enum=common.ErrCode" json:"code,omitempty"`
	Message string         `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *UpdateConfigResp) Reset()                    { *m = UpdateConfigResp{} }
func (m *UpdateConfigResp) String() string            { return proto.CompactTextString(m) }
func (*UpdateConfigResp) ProtoMessage()               {}
func (*UpdateConfigResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{65} }

func (m *UpdateConfigResp) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *UpdateConfigResp) GetCode() common.ErrCode {
	if m != nil {
		return m.Code
	}
	return common.ErrCode_E_OK
}

func (m *UpdateConfigResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type DeleteConfigReq struct {
	Seq      string `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	BizId    string `protobuf:"bytes,2,opt,name=biz_id,json=bizId" json:"biz_id,omitempty"`
	CfgId    string `protobuf:"bytes,3,opt,name=cfg_id,json=cfgId" json:"cfg_id,omitempty"`
	Operator string `protobuf:"bytes,4,opt,name=operator" json:"operator,omitempty"`
}

func (m *DeleteConfigReq) Reset()                    { *m = DeleteConfigReq{} }
func (m *DeleteConfigReq) String() string            { return proto.CompactTextString(m) }
func (*DeleteConfigReq) ProtoMessage()               {}
func (*DeleteConfigReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{66} }

func (m *DeleteConfigReq) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *DeleteConfigReq) GetBizId() string {
	if m != nil {
		return m.BizId
	}
	return ""
}

func (m *DeleteConfigReq) GetCfgId() string {
	if m != nil {
		return m.CfgId
	}
	return ""
}

func (m *DeleteConfigReq) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

type DeleteConfigResp struct {
	Seq     string         `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	Code    common.ErrCode `protobuf:"varint,2,opt,name=code,enum=common.ErrCode" json:"code,omitempty"`
	Message string         `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *DeleteConfigResp) Reset()                    { *m = DeleteConfigResp{} }
func (m *DeleteConfigResp) String() string            { return proto.CompactTextString(m) }
func (*DeleteConfigResp) ProtoMessage()               {}
func (*DeleteConfigResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{67} }

func (m *DeleteConfigResp) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *DeleteConfigResp) GetCode() common.ErrCode {
	if m != nil {
		return m.Code
	}
	return common.ErrCode_E_OK
}

func (m *DeleteConfigResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type CreateConfigContentReq struct {
	Seq         string `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	BizId       string `protobuf:"bytes,2,opt,name=biz_id,json=bizId" json:"biz_id,omitempty"`
	AppId       string `protobuf:"bytes,3,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	CfgId       string `protobuf:"bytes,4,opt,name=cfg_id,json=cfgId" json:"cfg_id,omitempty"`
	CommitId    string `protobuf:"bytes,5,opt,name=commit_id,json=commitId" json:"commit_id,omitempty"`
	Index       string `protobuf:"bytes,6,opt,name=index" json:"index,omitempty"`
	ContentId   string `protobuf:"bytes,7,opt,name=content_id,json=contentId" json:"content_id,omitempty"`
	ContentSize uint32 `protobuf:"varint,8,opt,name=content_size,json=contentSize" json:"content_size,omitempty"`
	Creator     string `protobuf:"bytes,9,opt,name=creator" json:"creator,omitempty"`
	Memo        string `protobuf:"bytes,10,opt,name=memo" json:"memo,omitempty"`
	State       int32  `protobuf:"varint,11,opt,name=state" json:"state,omitempty"`
}

func (m *CreateConfigContentReq) Reset()                    { *m = CreateConfigContentReq{} }
func (m *CreateConfigContentReq) String() string            { return proto.CompactTextString(m) }
func (*CreateConfigContentReq) ProtoMessage()               {}
func (*CreateConfigContentReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{68} }

func (m *CreateConfigContentReq) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *CreateConfigContentReq) GetBizId() string {
	if m != nil {
		return m.BizId
	}
	return ""
}

func (m *CreateConfigContentReq) GetAppId() string {
	if m != nil {
		return m.AppId
	}
	return ""
}

func (m *CreateConfigContentReq) GetCfgId() string {
	if m != nil {
		return m.CfgId
	}
	return ""
}

func (m *CreateConfigContentReq) GetCommitId() string {
	if m != nil {
		return m.CommitId
	}
	return ""
}

func (m *CreateConfigContentReq) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

func (m *CreateConfigContentReq) GetContentId() string {
	if m != nil {
		return m.ContentId
	}
	return ""
}

func (m *CreateConfigContentReq) GetContentSize() uint32 {
	if m != nil {
		return m.ContentSize
	}
	return 0
}

func (m *CreateConfigContentReq) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *CreateConfigContentReq) GetMemo() string {
	if m != nil {
		return m.Memo
	}
	return ""
}

func (m *CreateConfigContentReq) GetState() int32 {
	if m != nil {
		return m.State
	}
	return 0
}

type CreateConfigContentResp struct {
	Seq     string         `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	Code    common.ErrCode `protobuf:"varint,2,opt,name=code,enum=common.ErrCode" json:"code,omitempty"`
	Message string         `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *CreateConfigContentResp) Reset()                    { *m = CreateConfigContentResp{} }
func (m *CreateConfigContentResp) String() string            { return proto.CompactTextString(m) }
func (*CreateConfigContentResp) ProtoMessage()               {}
func (*CreateConfigContentResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{69} }

func (m *CreateConfigContentResp) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *CreateConfigContentResp) GetCode() common.ErrCode {
	if m != nil {
		return m.Code
	}
	return common.ErrCode_E_OK
}

func (m *CreateConfigContentResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type QueryConfigContentReq struct {
	Seq      string            `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	BizId    string            `protobuf:"bytes,2,opt,name=biz_id,json=bizId" json:"biz_id,omitempty"`
	AppId    string            `protobuf:"bytes,3,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	CfgId    string            `protobuf:"bytes,4,opt,name=cfg_id,json=cfgId" json:"cfg_id,omitempty"`
	CommitId string            `protobuf:"bytes,5,opt,name=commit_id,json=commitId" json:"commit_id,omitempty"`
	Labels   map[string]string `protobuf:"bytes,6,rep,name=labels" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *QueryConfigContentReq) Reset()                    { *m = QueryConfigContentReq{} }
func (m *QueryConfigContentReq) String() string            { return proto.CompactTextString(m) }
func (*QueryConfigContentReq) ProtoMessage()               {}
func (*QueryConfigContentReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{70} }

func (m *QueryConfigContentReq) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *QueryConfigContentReq) GetBizId() string {
	if m != nil {
		return m.BizId
	}
	return ""
}

func (m *QueryConfigContentReq) GetAppId() string {
	if m != nil {
		return m.AppId
	}
	return ""
}

func (m *QueryConfigContentReq) GetCfgId() string {
	if m != nil {
		return m.CfgId
	}
	return ""
}

func (m *QueryConfigContentReq) GetCommitId() string {
	if m != nil {
		return m.CommitId
	}
	return ""
}

func (m *QueryConfigContentReq) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

type QueryConfigContentResp struct {
	Seq     string          `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	Code    common.ErrCode  `protobuf:"varint,2,opt,name=code,enum=common.ErrCode" json:"code,omitempty"`
	Message string          `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
	Data    *common.Content `protobuf:"bytes,4,opt,name=data" json:"data,omitempty"`
}

func (m *QueryConfigContentResp) Reset()                    { *m = QueryConfigContentResp{} }
func (m *QueryConfigContentResp) String() string            { return proto.CompactTextString(m) }
func (*QueryConfigContentResp) ProtoMessage()               {}
func (*QueryConfigContentResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{71} }

func (m *QueryConfigContentResp) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *QueryConfigContentResp) GetCode() common.ErrCode {
	if m != nil {
		return m.Code
	}
	return common.ErrCode_E_OK
}

func (m *QueryConfigContentResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *QueryConfigContentResp) GetData() *common.Content {
	if m != nil {
		return m.Data
	}
	return nil
}

type QueryReleaseConfigContentReq struct {
	Seq      string            `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	BizId    string            `protobuf:"bytes,2,opt,name=biz_id,json=bizId" json:"biz_id,omitempty"`
	AppId    string            `protobuf:"bytes,3,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	CloudId  string            `protobuf:"bytes,4,opt,name=cloud_id,json=cloudId" json:"cloud_id,omitempty"`
	Ip       string            `protobuf:"bytes,5,opt,name=ip" json:"ip,omitempty"`
	Path     string            `protobuf:"bytes,6,opt,name=path" json:"path,omitempty"`
	Labels   map[string]string `protobuf:"bytes,7,rep,name=labels" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	CfgId    string            `protobuf:"bytes,8,opt,name=cfg_id,json=cfgId" json:"cfg_id,omitempty"`
	CommitId string            `protobuf:"bytes,9,opt,name=commit_id,json=commitId" json:"commit_id,omitempty"`
}

func (m *QueryReleaseConfigContentReq) Reset()                    { *m = QueryReleaseConfigContentReq{} }
func (m *QueryReleaseConfigContentReq) String() string            { return proto.CompactTextString(m) }
func (*QueryReleaseConfigContentReq) ProtoMessage()               {}
func (*QueryReleaseConfigContentReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{72} }

func (m *QueryReleaseConfigContentReq) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *QueryReleaseConfigContentReq) GetBizId() string {
	if m != nil {
		return m.BizId
	}
	return ""
}

func (m *QueryReleaseConfigContentReq) GetAppId() string {
	if m != nil {
		return m.AppId
	}
	return ""
}

func (m *QueryReleaseConfigContentReq) GetCloudId() string {
	if m != nil {
		return m.CloudId
	}
	return ""
}

func (m *QueryReleaseConfigContentReq) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *QueryReleaseConfigContentReq) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *QueryReleaseConfigContentReq) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *QueryReleaseConfigContentReq) GetCfgId() string {
	if m != nil {
		return m.CfgId
	}
	return ""
}

func (m *QueryReleaseConfigContentReq) GetCommitId() string {
	if m != nil {
		return m.CommitId
	}
	return ""
}

type QueryReleaseConfigContentResp struct {
	Seq     string          `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	Code    common.ErrCode  `protobuf:"varint,2,opt,name=code,enum=common.ErrCode" json:"code,omitempty"`
	Message string          `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
	Data    *common.Content `protobuf:"bytes,4,opt,name=data" json:"data,omitempty"`
}

func (m *QueryReleaseConfigContentResp) Reset()                    { *m = QueryReleaseConfigContentResp{} }
func (m *QueryReleaseConfigContentResp) String() string            { return proto.CompactTextString(m) }
func (*QueryReleaseConfigContentResp) ProtoMessage()               {}
func (*QueryReleaseConfigContentResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{73} }

func (m *QueryReleaseConfigContentResp) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *QueryReleaseConfigContentResp) GetCode() common.ErrCode {
	if m != nil {
		return m.Code
	}
	return common.ErrCode_E_OK
}

func (m *QueryReleaseConfigContentResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *QueryReleaseConfigContentResp) GetData() *common.Content {
	if m != nil {
		return m.Data
	}
	return nil
}

type QueryConfigContentListReq struct {
	Seq      string       `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	BizId    string       `protobuf:"bytes,2,opt,name=biz_id,json=bizId" json:"biz_id,omitempty"`
	AppId    string       `protobuf:"bytes,3,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	CfgId    string       `protobuf:"bytes,4,opt,name=cfg_id,json=cfgId" json:"cfg_id,omitempty"`
	CommitId string       `protobuf:"bytes,5,opt,name=commit_id,json=commitId" json:"commit_id,omitempty"`
	Page     *common.Page `protobuf:"bytes,6,opt,name=page" json:"page,omitempty"`
}

func (m *QueryConfigContentListReq) Reset()                    { *m = QueryConfigContentListReq{} }
func (m *QueryConfigContentListReq) String() string            { return proto.CompactTextString(m) }
func (*QueryConfigContentListReq) ProtoMessage()               {}
func (*QueryConfigContentListReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{74} }

func (m *QueryConfigContentListReq) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *QueryConfigContentListReq) GetBizId() string {
	if m != nil {
		return m.BizId
	}
	return ""
}

func (m *QueryConfigContentListReq) GetAppId() string {
	if m != nil {
		return m.AppId
	}
	return ""
}

func (m *QueryConfigContentListReq) GetCfgId() string {
	if m != nil {
		return m.CfgId
	}
	return ""
}

func (m *QueryConfigContentListReq) GetCommitId() string {
	if m != nil {
		return m.CommitId
	}
	return ""
}

func (m *QueryConfigContentListReq) GetPage() *common.Page {
	if m != nil {
		return m.Page
	}
	return nil
}

type QueryConfigContentListResp struct {
	Seq     string                               `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	Code    common.ErrCode                       `protobuf:"varint,2,opt,name=code,enum=common.ErrCode" json:"code,omitempty"`
	Message string                               `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
	Data    *QueryConfigContentListResp_RespData `protobuf:"bytes,4,opt,name=data" json:"data,omitempty"`
}

func (m *QueryConfigContentListResp) Reset()                    { *m = QueryConfigContentListResp{} }
func (m *QueryConfigContentListResp) String() string            { return proto.CompactTextString(m) }
func (*QueryConfigContentListResp) ProtoMessage()               {}
func (*QueryConfigContentListResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{75} }

func (m *QueryConfigContentListResp) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *QueryConfigContentListResp) GetCode() common.ErrCode {
	if m != nil {
		return m.Code
	}
	return common.ErrCode_E_OK
}

func (m *QueryConfigContentListResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *QueryConfigContentListResp) GetData() *QueryConfigContentListResp_RespData {
	if m != nil {
		return m.Data
	}
	return nil
}

type QueryConfigContentListResp_RespData struct {
	TotalCount uint32            `protobuf:"varint,1,opt,name=total_count,json=totalCount" json:"total_count,omitempty"`
	Info       []*common.Content `protobuf:"bytes,2,rep,name=info" json:"info,omitempty"`
}

func (m *QueryConfigContentListResp_RespData) Reset()         { *m = QueryConfigContentListResp_RespData{} }
func (m *QueryConfigContentListResp_RespData) String() string { return proto.CompactTextString(m) }
func (*QueryConfigContentListResp_RespData) ProtoMessage()    {}
func (*QueryConfigContentListResp_RespData) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{75, 0}
}

func (m *QueryConfigContentListResp_RespData) GetTotalCount() uint32 {
	if m != nil {
		return m.TotalCount
	}
	return 0
}

func (m *QueryConfigContentListResp_RespData) GetInfo() []*common.Content {
	if m != nil {
		return m.Info
	}
	return nil
}

type CreateCommitReq struct {
	Seq           string `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	BizId         string `protobuf:"bytes,2,opt,name=biz_id,json=bizId" json:"biz_id,omitempty"`
	AppId         string `protobuf:"bytes,3,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	CommitId      string `protobuf:"bytes,4,opt,name=commit_id,json=commitId" json:"commit_id,omitempty"`
	CfgId         string `protobuf:"bytes,5,opt,name=cfg_id,json=cfgId" json:"cfg_id,omitempty"`
	CommitMode    int32  `protobuf:"varint,6,opt,name=commit_mode,json=commitMode" json:"commit_mode,omitempty"`
	Operator      string `protobuf:"bytes,7,opt,name=operator" json:"operator,omitempty"`
	MultiCommitId string `protobuf:"bytes,8,opt,name=multi_commit_id,json=multiCommitId" json:"multi_commit_id,omitempty"`
	Memo          string `protobuf:"bytes,9,opt,name=memo" json:"memo,omitempty"`
	State         int32  `protobuf:"varint,10,opt,name=state" json:"state,omitempty"`
}

func (m *CreateCommitReq) Reset()                    { *m = CreateCommitReq{} }
func (m *CreateCommitReq) String() string            { return proto.CompactTextString(m) }
func (*CreateCommitReq) ProtoMessage()               {}
func (*CreateCommitReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{76} }

func (m *CreateCommitReq) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *CreateCommitReq) GetBizId() string {
	if m != nil {
		return m.BizId
	}
	return ""
}

func (m *CreateCommitReq) GetAppId() string {
	if m != nil {
		return m.AppId
	}
	return ""
}

func (m *CreateCommitReq) GetCommitId() string {
	if m != nil {
		return m.CommitId
	}
	return ""
}

func (m *CreateCommitReq) GetCfgId() string {
	if m != nil {
		return m.CfgId
	}
	return ""
}

func (m *CreateCommitReq) GetCommitMode() int32 {
	if m != nil {
		return m.CommitMode
	}
	return 0
}

func (m *CreateCommitReq) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

func (m *CreateCommitReq) GetMultiCommitId() string {
	if m != nil {
		return m.MultiCommitId
	}
	return ""
}

func (m *CreateCommitReq) GetMemo() string {
	if m != nil {
		return m.Memo
	}
	return ""
}

func (m *CreateCommitReq) GetState() int32 {
	if m != nil {
		return m.State
	}
	return 0
}

type CreateCommitResp struct {
	Seq     string                     `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	Code    common.ErrCode             `protobuf:"varint,2,opt,name=code,enum=common.ErrCode" json:"code,omitempty"`
	Message string                     `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
	Data    *CreateCommitResp_RespData `protobuf:"bytes,4,opt,name=data" json:"data,omitempty"`
}

func (m *CreateCommitResp) Reset()                    { *m = CreateCommitResp{} }
func (m *CreateCommitResp) String() string            { return proto.CompactTextString(m) }
func (*CreateCommitResp) ProtoMessage()               {}
func (*CreateCommitResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{77} }

func (m *CreateCommitResp) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *CreateCommitResp) GetCode() common.ErrCode {
	if m != nil {
		return m.Code
	}
	return common.ErrCode_E_OK
}

func (m *CreateCommitResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *CreateCommitResp) GetData() *CreateCommitResp_RespData {
	if m != nil {
		return m.Data
	}
	return nil
}

type CreateCommitResp_RespData struct {
	CommitId string `protobuf:"bytes,1,opt,name=commit_id,json=commitId" json:"commit_id,omitempty"`
}

func (m *CreateCommitResp_RespData) Reset()                    { *m = CreateCommitResp_RespData{} }
func (m *CreateCommitResp_RespData) String() string            { return proto.CompactTextString(m) }
func (*CreateCommitResp_RespData) ProtoMessage()               {}
func (*CreateCommitResp_RespData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{77, 0} }

func (m *CreateCommitResp_RespData) GetCommitId() string {
	if m != nil {
		return m.CommitId
	}
	return ""
}

type QueryCommitReq struct {
	Seq      string `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	BizId    string `protobuf:"bytes,2,opt,name=biz_id,json=bizId" json:"biz_id,omitempty"`
	CommitId string `protobuf:"bytes,3,opt,name=commit_id,json=commitId" json:"commit_id,omitempty"`
}

func (m *QueryCommitReq) Reset()                    { *m = QueryCommitReq{} }
func (m *QueryCommitReq) String() string            { return proto.CompactTextString(m) }
func (*QueryCommitReq) ProtoMessage()               {}
func (*QueryCommitReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{78} }

func (m *QueryCommitReq) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *QueryCommitReq) GetBizId() string {
	if m != nil {
		return m.BizId
	}
	return ""
}

func (m *QueryCommitReq) GetCommitId() string {
	if m != nil {
		return m.CommitId
	}
	return ""
}

type QueryCommitResp struct {
	Seq     string         `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	Code    common.ErrCode `protobuf:"varint,2,opt,name=code,enum=common.ErrCode" json:"code,omitempty"`
	Message string         `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
	Data    *common.Commit `protobuf:"bytes,4,opt,name=data" json:"data,omitempty"`
}

func (m *QueryCommitResp) Reset()                    { *m = QueryCommitResp{} }
func (m *QueryCommitResp) String() string            { return proto.CompactTextString(m) }
func (*QueryCommitResp) ProtoMessage()               {}
func (*QueryCommitResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{79} }

func (m *QueryCommitResp) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *QueryCommitResp) GetCode() common.ErrCode {
	if m != nil {
		return m.Code
	}
	return common.ErrCode_E_OK
}

func (m *QueryCommitResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *QueryCommitResp) GetData() *common.Commit {
	if m != nil {
		return m.Data
	}
	return nil
}

type QueryHistoryCommitsReq struct {
	Seq       string       `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	BizId     string       `protobuf:"bytes,2,opt,name=biz_id,json=bizId" json:"biz_id,omitempty"`
	AppId     string       `protobuf:"bytes,3,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	CfgId     string       `protobuf:"bytes,4,opt,name=cfg_id,json=cfgId" json:"cfg_id,omitempty"`
	Operator  string       `protobuf:"bytes,5,opt,name=operator" json:"operator,omitempty"`
	QueryType int32        `protobuf:"varint,6,opt,name=query_type,json=queryType" json:"query_type,omitempty"`
	Page      *common.Page `protobuf:"bytes,7,opt,name=page" json:"page,omitempty"`
}

func (m *QueryHistoryCommitsReq) Reset()                    { *m = QueryHistoryCommitsReq{} }
func (m *QueryHistoryCommitsReq) String() string            { return proto.CompactTextString(m) }
func (*QueryHistoryCommitsReq) ProtoMessage()               {}
func (*QueryHistoryCommitsReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{80} }

func (m *QueryHistoryCommitsReq) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *QueryHistoryCommitsReq) GetBizId() string {
	if m != nil {
		return m.BizId
	}
	return ""
}

func (m *QueryHistoryCommitsReq) GetAppId() string {
	if m != nil {
		return m.AppId
	}
	return ""
}

func (m *QueryHistoryCommitsReq) GetCfgId() string {
	if m != nil {
		return m.CfgId
	}
	return ""
}

func (m *QueryHistoryCommitsReq) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

func (m *QueryHistoryCommitsReq) GetQueryType() int32 {
	if m != nil {
		return m.QueryType
	}
	return 0
}

func (m *QueryHistoryCommitsReq) GetPage() *common.Page {
	if m != nil {
		return m.Page
	}
	return nil
}

type QueryHistoryCommitsResp struct {
	Seq     string                            `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	Code    common.ErrCode                    `protobuf:"varint,2,opt,name=code,enum=common.ErrCode" json:"code,omitempty"`
	Message string                            `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
	Data    *QueryHistoryCommitsResp_RespData `protobuf:"bytes,4,opt,name=data" json:"data,omitempty"`
}

func (m *QueryHistoryCommitsResp) Reset()                    { *m = QueryHistoryCommitsResp{} }
func (m *QueryHistoryCommitsResp) String() string            { return proto.CompactTextString(m) }
func (*QueryHistoryCommitsResp) ProtoMessage()               {}
func (*QueryHistoryCommitsResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{81} }

func (m *QueryHistoryCommitsResp) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *QueryHistoryCommitsResp) GetCode() common.ErrCode {
	if m != nil {
		return m.Code
	}
	return common.ErrCode_E_OK
}

func (m *QueryHistoryCommitsResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *QueryHistoryCommitsResp) GetData() *QueryHistoryCommitsResp_RespData {
	if m != nil {
		return m.Data
	}
	return nil
}

type QueryHistoryCommitsResp_RespData struct {
	TotalCount uint32           `protobuf:"varint,1,opt,name=total_count,json=totalCount" json:"total_count,omitempty"`
	Info       []*common.Commit `protobuf:"bytes,2,rep,name=info" json:"info,omitempty"`
}

func (m *QueryHistoryCommitsResp_RespData) Reset()         { *m = QueryHistoryCommitsResp_RespData{} }
func (m *QueryHistoryCommitsResp_RespData) String() string { return proto.CompactTextString(m) }
func (*QueryHistoryCommitsResp_RespData) ProtoMessage()    {}
func (*QueryHistoryCommitsResp_RespData) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{81, 0}
}

func (m *QueryHistoryCommitsResp_RespData) GetTotalCount() uint32 {
	if m != nil {
		return m.TotalCount
	}
	return 0
}

func (m *QueryHistoryCommitsResp_RespData) GetInfo() []*common.Commit {
	if m != nil {
		return m.Info
	}
	return nil
}

type UpdateCommitReq struct {
	Seq        string `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	BizId      string `protobuf:"bytes,2,opt,name=biz_id,json=bizId" json:"biz_id,omitempty"`
	CommitId   string `protobuf:"bytes,3,opt,name=commit_id,json=commitId" json:"commit_id,omitempty"`
	CommitMode int32  `protobuf:"varint,4,opt,name=commit_mode,json=commitMode" json:"commit_mode,omitempty"`
	Operator   string `protobuf:"bytes,5,opt,name=operator" json:"operator,omitempty"`
	Memo       string `protobuf:"bytes,6,opt,name=memo" json:"memo,omitempty"`
}

func (m *UpdateCommitReq) Reset()                    { *m = UpdateCommitReq{} }
func (m *UpdateCommitReq) String() string            { return proto.CompactTextString(m) }
func (*UpdateCommitReq) ProtoMessage()               {}
func (*UpdateCommitReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{82} }

func (m *UpdateCommitReq) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *UpdateCommitReq) GetBizId() string {
	if m != nil {
		return m.BizId
	}
	return ""
}

func (m *UpdateCommitReq) GetCommitId() string {
	if m != nil {
		return m.CommitId
	}
	return ""
}

func (m *UpdateCommitReq) GetCommitMode() int32 {
	if m != nil {
		return m.CommitMode
	}
	return 0
}

func (m *UpdateCommitReq) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

func (m *UpdateCommitReq) GetMemo() string {
	if m != nil {
		return m.Memo
	}
	return ""
}

type UpdateCommitResp struct {
	Seq     string         `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	Code    common.ErrCode `protobuf:"varint,2,opt,name=code,enum=common.ErrCode" json:"code,omitempty"`
	Message string         `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *UpdateCommitResp) Reset()                    { *m = UpdateCommitResp{} }
func (m *UpdateCommitResp) String() string            { return proto.CompactTextString(m) }
func (*UpdateCommitResp) ProtoMessage()               {}
func (*UpdateCommitResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{83} }

func (m *UpdateCommitResp) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *UpdateCommitResp) GetCode() common.ErrCode {
	if m != nil {
		return m.Code
	}
	return common.ErrCode_E_OK
}

func (m *UpdateCommitResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type CancelCommitReq struct {
	Seq      string `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	BizId    string `protobuf:"bytes,2,opt,name=biz_id,json=bizId" json:"biz_id,omitempty"`
	CommitId string `protobuf:"bytes,3,opt,name=commit_id,json=commitId" json:"commit_id,omitempty"`
	Operator string `protobuf:"bytes,4,opt,name=operator" json:"operator,omitempty"`
}

func (m *CancelCommitReq) Reset()                    { *m = CancelCommitReq{} }
func (m *CancelCommitReq) String() string            { return proto.CompactTextString(m) }
func (*CancelCommitReq) ProtoMessage()               {}
func (*CancelCommitReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{84} }

func (m *CancelCommitReq) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *CancelCommitReq) GetBizId() string {
	if m != nil {
		return m.BizId
	}
	return ""
}

func (m *CancelCommitReq) GetCommitId() string {
	if m != nil {
		return m.CommitId
	}
	return ""
}

func (m *CancelCommitReq) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

type CancelCommitResp struct {
	Seq     string         `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	Code    common.ErrCode `protobuf:"varint,2,opt,name=code,enum=common.ErrCode" json:"code,omitempty"`
	Message string         `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *CancelCommitResp) Reset()                    { *m = CancelCommitResp{} }
func (m *CancelCommitResp) String() string            { return proto.CompactTextString(m) }
func (*CancelCommitResp) ProtoMessage()               {}
func (*CancelCommitResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{85} }

func (m *CancelCommitResp) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *CancelCommitResp) GetCode() common.ErrCode {
	if m != nil {
		return m.Code
	}
	return common.ErrCode_E_OK
}

func (m *CancelCommitResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type ConfirmCommitReq struct {
	Seq      string `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	BizId    string `protobuf:"bytes,2,opt,name=biz_id,json=bizId" json:"biz_id,omitempty"`
	CommitId string `protobuf:"bytes,3,opt,name=commit_id,json=commitId" json:"commit_id,omitempty"`
	Operator string `protobuf:"bytes,4,opt,name=operator" json:"operator,omitempty"`
}

func (m *ConfirmCommitReq) Reset()                    { *m = ConfirmCommitReq{} }
func (m *ConfirmCommitReq) String() string            { return proto.CompactTextString(m) }
func (*ConfirmCommitReq) ProtoMessage()               {}
func (*ConfirmCommitReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{86} }

func (m *ConfirmCommitReq) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *ConfirmCommitReq) GetBizId() string {
	if m != nil {
		return m.BizId
	}
	return ""
}

func (m *ConfirmCommitReq) GetCommitId() string {
	if m != nil {
		return m.CommitId
	}
	return ""
}

func (m *ConfirmCommitReq) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

type ConfirmCommitResp struct {
	Seq     string         `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	Code    common.ErrCode `protobuf:"varint,2,opt,name=code,enum=common.ErrCode" json:"code,omitempty"`
	Message string         `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *ConfirmCommitResp) Reset()                    { *m = ConfirmCommitResp{} }
func (m *ConfirmCommitResp) String() string            { return proto.CompactTextString(m) }
func (*ConfirmCommitResp) ProtoMessage()               {}
func (*ConfirmCommitResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{87} }

func (m *ConfirmCommitResp) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *ConfirmCommitResp) GetCode() common.ErrCode {
	if m != nil {
		return m.Code
	}
	return common.ErrCode_E_OK
}

func (m *ConfirmCommitResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type CreateMultiCommitWithContentReq struct {
	Seq           string                              `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	BizId         string                              `protobuf:"bytes,2,opt,name=biz_id,json=bizId" json:"biz_id,omitempty"`
	AppId         string                              `protobuf:"bytes,3,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	MultiCommitId string                              `protobuf:"bytes,4,opt,name=multi_commit_id,json=multiCommitId" json:"multi_commit_id,omitempty"`
	Memo          string                              `protobuf:"bytes,5,opt,name=memo" json:"memo,omitempty"`
	Operator      string                              `protobuf:"bytes,6,opt,name=operator" json:"operator,omitempty"`
	Metadatas     []*common.CommitMetadataWithContent `protobuf:"bytes,7,rep,name=metadatas" json:"metadatas,omitempty"`
}

func (m *CreateMultiCommitWithContentReq) Reset()         { *m = CreateMultiCommitWithContentReq{} }
func (m *CreateMultiCommitWithContentReq) String() string { return proto.CompactTextString(m) }
func (*CreateMultiCommitWithContentReq) ProtoMessage()    {}
func (*CreateMultiCommitWithContentReq) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{88}
}

func (m *CreateMultiCommitWithContentReq) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *CreateMultiCommitWithContentReq) GetBizId() string {
	if m != nil {
		return m.BizId
	}
	return ""
}

func (m *CreateMultiCommitWithContentReq) GetAppId() string {
	if m != nil {
		return m.AppId
	}
	return ""
}

func (m *CreateMultiCommitWithContentReq) GetMultiCommitId() string {
	if m != nil {
		return m.MultiCommitId
	}
	return ""
}

func (m *CreateMultiCommitWithContentReq) GetMemo() string {
	if m != nil {
		return m.Memo
	}
	return ""
}

func (m *CreateMultiCommitWithContentReq) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

func (m *CreateMultiCommitWithContentReq) GetMetadatas() []*common.CommitMetadataWithContent {
	if m != nil {
		return m.Metadatas
	}
	return nil
}

type CreateMultiCommitWithContentResp struct {
	Seq     string                                     `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	Code    common.ErrCode                             `protobuf:"varint,2,opt,name=code,enum=common.ErrCode" json:"code,omitempty"`
	Message string                                     `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
	Data    *CreateMultiCommitWithContentResp_RespData `protobuf:"bytes,4,opt,name=data" json:"data,omitempty"`
}

func (m *CreateMultiCommitWithContentResp) Reset()         { *m = CreateMultiCommitWithContentResp{} }
func (m *CreateMultiCommitWithContentResp) String() string { return proto.CompactTextString(m) }
func (*CreateMultiCommitWithContentResp) ProtoMessage()    {}
func (*CreateMultiCommitWithContentResp) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{89}
}

func (m *CreateMultiCommitWithContentResp) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *CreateMultiCommitWithContentResp) GetCode() common.ErrCode {
	if m != nil {
		return m.Code
	}
	return common.ErrCode_E_OK
}

func (m *CreateMultiCommitWithContentResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *CreateMultiCommitWithContentResp) GetData() *CreateMultiCommitWithContentResp_RespData {
	if m != nil {
		return m.Data
	}
	return nil
}

type CreateMultiCommitWithContentResp_RespData struct {
	MultiCommitId string `protobuf:"bytes,1,opt,name=multi_commit_id,json=multiCommitId" json:"multi_commit_id,omitempty"`
}

func (m *CreateMultiCommitWithContentResp_RespData) Reset() {
	*m = CreateMultiCommitWithContentResp_RespData{}
}
func (m *CreateMultiCommitWithContentResp_RespData) String() string {
	return proto.CompactTextString(m)
}
func (*CreateMultiCommitWithContentResp_RespData) ProtoMessage() {}
func (*CreateMultiCommitWithContentResp_RespData) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{89, 0}
}

func (m *CreateMultiCommitWithContentResp_RespData) GetMultiCommitId() string {
	if m != nil {
		return m.MultiCommitId
	}
	return ""
}

type CreateMultiCommitReq struct {
	Seq           string                   `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	BizId         string                   `protobuf:"bytes,2,opt,name=biz_id,json=bizId" json:"biz_id,omitempty"`
	AppId         string                   `protobuf:"bytes,3,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	MultiCommitId string                   `protobuf:"bytes,4,opt,name=multi_commit_id,json=multiCommitId" json:"multi_commit_id,omitempty"`
	Memo          string                   `protobuf:"bytes,5,opt,name=memo" json:"memo,omitempty"`
	Operator      string                   `protobuf:"bytes,6,opt,name=operator" json:"operator,omitempty"`
	Metadatas     []*common.CommitMetadata `protobuf:"bytes,7,rep,name=metadatas" json:"metadatas,omitempty"`
}

func (m *CreateMultiCommitReq) Reset()                    { *m = CreateMultiCommitReq{} }
func (m *CreateMultiCommitReq) String() string            { return proto.CompactTextString(m) }
func (*CreateMultiCommitReq) ProtoMessage()               {}
func (*CreateMultiCommitReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{90} }

func (m *CreateMultiCommitReq) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *CreateMultiCommitReq) GetBizId() string {
	if m != nil {
		return m.BizId
	}
	return ""
}

func (m *CreateMultiCommitReq) GetAppId() string {
	if m != nil {
		return m.AppId
	}
	return ""
}

func (m *CreateMultiCommitReq) GetMultiCommitId() string {
	if m != nil {
		return m.MultiCommitId
	}
	return ""
}

func (m *CreateMultiCommitReq) GetMemo() string {
	if m != nil {
		return m.Memo
	}
	return ""
}

func (m *CreateMultiCommitReq) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

func (m *CreateMultiCommitReq) GetMetadatas() []*common.CommitMetadata {
	if m != nil {
		return m.Metadatas
	}
	return nil
}

type CreateMultiCommitResp struct {
	Seq     string                          `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	Code    common.ErrCode                  `protobuf:"varint,2,opt,name=code,enum=common.ErrCode" json:"code,omitempty"`
	Message string                          `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
	Data    *CreateMultiCommitResp_RespData `protobuf:"bytes,4,opt,name=data" json:"data,omitempty"`
}

func (m *CreateMultiCommitResp) Reset()                    { *m = CreateMultiCommitResp{} }
func (m *CreateMultiCommitResp) String() string            { return proto.CompactTextString(m) }
func (*CreateMultiCommitResp) ProtoMessage()               {}
func (*CreateMultiCommitResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{91} }

func (m *CreateMultiCommitResp) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *CreateMultiCommitResp) GetCode() common.ErrCode {
	if m != nil {
		return m.Code
	}
	return common.ErrCode_E_OK
}

func (m *CreateMultiCommitResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *CreateMultiCommitResp) GetData() *CreateMultiCommitResp_RespData {
	if m != nil {
		return m.Data
	}
	return nil
}

type CreateMultiCommitResp_RespData struct {
	MultiCommitId string `protobuf:"bytes,1,opt,name=multi_commit_id,json=multiCommitId" json:"multi_commit_id,omitempty"`
}

func (m *CreateMultiCommitResp_RespData) Reset()         { *m = CreateMultiCommitResp_RespData{} }
func (m *CreateMultiCommitResp_RespData) String() string { return proto.CompactTextString(m) }
func (*CreateMultiCommitResp_RespData) ProtoMessage()    {}
func (*CreateMultiCommitResp_RespData) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{91, 0}
}

func (m *CreateMultiCommitResp_RespData) GetMultiCommitId() string {
	if m != nil {
		return m.MultiCommitId
	}
	return ""
}

type QueryMultiCommitReq struct {
	Seq           string `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	BizId         string `protobuf:"bytes,2,opt,name=biz_id,json=bizId" json:"biz_id,omitempty"`
	MultiCommitId string `protobuf:"bytes,3,opt,name=multi_commit_id,json=multiCommitId" json:"multi_commit_id,omitempty"`
}

func (m *QueryMultiCommitReq) Reset()                    { *m = QueryMultiCommitReq{} }
func (m *QueryMultiCommitReq) String() string            { return proto.CompactTextString(m) }
func (*QueryMultiCommitReq) ProtoMessage()               {}
func (*QueryMultiCommitReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{92} }

func (m *QueryMultiCommitReq) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *QueryMultiCommitReq) GetBizId() string {
	if m != nil {
		return m.BizId
	}
	return ""
}

func (m *QueryMultiCommitReq) GetMultiCommitId() string {
	if m != nil {
		return m.MultiCommitId
	}
	return ""
}

type QueryMultiCommitResp struct {
	Seq     string              `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	Code    common.ErrCode      `protobuf:"varint,2,opt,name=code,enum=common.ErrCode" json:"code,omitempty"`
	Message string              `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
	Data    *common.MultiCommit `protobuf:"bytes,4,opt,name=data" json:"data,omitempty"`
}

func (m *QueryMultiCommitResp) Reset()                    { *m = QueryMultiCommitResp{} }
func (m *QueryMultiCommitResp) String() string            { return proto.CompactTextString(m) }
func (*QueryMultiCommitResp) ProtoMessage()               {}
func (*QueryMultiCommitResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{93} }

func (m *QueryMultiCommitResp) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *QueryMultiCommitResp) GetCode() common.ErrCode {
	if m != nil {
		return m.Code
	}
	return common.ErrCode_E_OK
}

func (m *QueryMultiCommitResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *QueryMultiCommitResp) GetData() *common.MultiCommit {
	if m != nil {
		return m.Data
	}
	return nil
}

type QueryHistoryMultiCommitsReq struct {
	Seq       string       `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	BizId     string       `protobuf:"bytes,2,opt,name=biz_id,json=bizId" json:"biz_id,omitempty"`
	AppId     string       `protobuf:"bytes,3,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	Operator  string       `protobuf:"bytes,4,opt,name=operator" json:"operator,omitempty"`
	QueryType int32        `protobuf:"varint,5,opt,name=query_type,json=queryType" json:"query_type,omitempty"`
	Page      *common.Page `protobuf:"bytes,6,opt,name=page" json:"page,omitempty"`
}

func (m *QueryHistoryMultiCommitsReq) Reset()                    { *m = QueryHistoryMultiCommitsReq{} }
func (m *QueryHistoryMultiCommitsReq) String() string            { return proto.CompactTextString(m) }
func (*QueryHistoryMultiCommitsReq) ProtoMessage()               {}
func (*QueryHistoryMultiCommitsReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{94} }

func (m *QueryHistoryMultiCommitsReq) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *QueryHistoryMultiCommitsReq) GetBizId() string {
	if m != nil {
		return m.BizId
	}
	return ""
}

func (m *QueryHistoryMultiCommitsReq) GetAppId() string {
	if m != nil {
		return m.AppId
	}
	return ""
}

func (m *QueryHistoryMultiCommitsReq) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

func (m *QueryHistoryMultiCommitsReq) GetQueryType() int32 {
	if m != nil {
		return m.QueryType
	}
	return 0
}

func (m *QueryHistoryMultiCommitsReq) GetPage() *common.Page {
	if m != nil {
		return m.Page
	}
	return nil
}

type QueryHistoryMultiCommitsResp struct {
	Seq     string                                 `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	Code    common.ErrCode                         `protobuf:"varint,2,opt,name=code,enum=common.ErrCode" json:"code,omitempty"`
	Message string                                 `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
	Data    *QueryHistoryMultiCommitsResp_RespData `protobuf:"bytes,4,opt,name=data" json:"data,omitempty"`
}

func (m *QueryHistoryMultiCommitsResp) Reset()                    { *m = QueryHistoryMultiCommitsResp{} }
func (m *QueryHistoryMultiCommitsResp) String() string            { return proto.CompactTextString(m) }
func (*QueryHistoryMultiCommitsResp) ProtoMessage()               {}
func (*QueryHistoryMultiCommitsResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{95} }

func (m *QueryHistoryMultiCommitsResp) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *QueryHistoryMultiCommitsResp) GetCode() common.ErrCode {
	if m != nil {
		return m.Code
	}
	return common.ErrCode_E_OK
}

func (m *QueryHistoryMultiCommitsResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *QueryHistoryMultiCommitsResp) GetData() *QueryHistoryMultiCommitsResp_RespData {
	if m != nil {
		return m.Data
	}
	return nil
}

type QueryHistoryMultiCommitsResp_RespData struct {
	TotalCount uint32                `protobuf:"varint,1,opt,name=total_count,json=totalCount" json:"total_count,omitempty"`
	Info       []*common.MultiCommit `protobuf:"bytes,2,rep,name=info" json:"info,omitempty"`
}

func (m *QueryHistoryMultiCommitsResp_RespData) Reset()         { *m = QueryHistoryMultiCommitsResp_RespData{} }
func (m *QueryHistoryMultiCommitsResp_RespData) String() string { return proto.CompactTextString(m) }
func (*QueryHistoryMultiCommitsResp_RespData) ProtoMessage()    {}
func (*QueryHistoryMultiCommitsResp_RespData) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{95, 0}
}

func (m *QueryHistoryMultiCommitsResp_RespData) GetTotalCount() uint32 {
	if m != nil {
		return m.TotalCount
	}
	return 0
}

func (m *QueryHistoryMultiCommitsResp_RespData) GetInfo() []*common.MultiCommit {
	if m != nil {
		return m.Info
	}
	return nil
}

type QueryMultiCommitSubListReq struct {
	Seq           string `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	BizId         string `protobuf:"bytes,2,opt,name=biz_id,json=bizId" json:"biz_id,omitempty"`
	MultiCommitId string `protobuf:"bytes,3,opt,name=multi_commit_id,json=multiCommitId" json:"multi_commit_id,omitempty"`
}

func (m *QueryMultiCommitSubListReq) Reset()                    { *m = QueryMultiCommitSubListReq{} }
func (m *QueryMultiCommitSubListReq) String() string            { return proto.CompactTextString(m) }
func (*QueryMultiCommitSubListReq) ProtoMessage()               {}
func (*QueryMultiCommitSubListReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{96} }

func (m *QueryMultiCommitSubListReq) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *QueryMultiCommitSubListReq) GetBizId() string {
	if m != nil {
		return m.BizId
	}
	return ""
}

func (m *QueryMultiCommitSubListReq) GetMultiCommitId() string {
	if m != nil {
		return m.MultiCommitId
	}
	return ""
}

type QueryMultiCommitSubListResp struct {
	Seq     string                                `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	Code    common.ErrCode                        `protobuf:"varint,2,opt,name=code,enum=common.ErrCode" json:"code,omitempty"`
	Message string                                `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
	Data    *QueryMultiCommitSubListResp_RespData `protobuf:"bytes,4,opt,name=data" json:"data,omitempty"`
}

func (m *QueryMultiCommitSubListResp) Reset()                    { *m = QueryMultiCommitSubListResp{} }
func (m *QueryMultiCommitSubListResp) String() string            { return proto.CompactTextString(m) }
func (*QueryMultiCommitSubListResp) ProtoMessage()               {}
func (*QueryMultiCommitSubListResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{97} }

func (m *QueryMultiCommitSubListResp) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *QueryMultiCommitSubListResp) GetCode() common.ErrCode {
	if m != nil {
		return m.Code
	}
	return common.ErrCode_E_OK
}

func (m *QueryMultiCommitSubListResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *QueryMultiCommitSubListResp) GetData() *QueryMultiCommitSubListResp_RespData {
	if m != nil {
		return m.Data
	}
	return nil
}

type QueryMultiCommitSubListResp_RespData struct {
	CommitIds []string `protobuf:"bytes,1,rep,name=commit_ids,json=commitIds" json:"commit_ids,omitempty"`
}

func (m *QueryMultiCommitSubListResp_RespData) Reset()         { *m = QueryMultiCommitSubListResp_RespData{} }
func (m *QueryMultiCommitSubListResp_RespData) String() string { return proto.CompactTextString(m) }
func (*QueryMultiCommitSubListResp_RespData) ProtoMessage()    {}
func (*QueryMultiCommitSubListResp_RespData) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{97, 0}
}

func (m *QueryMultiCommitSubListResp_RespData) GetCommitIds() []string {
	if m != nil {
		return m.CommitIds
	}
	return nil
}

type UpdateMultiCommitReq struct {
	Seq           string `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	BizId         string `protobuf:"bytes,2,opt,name=biz_id,json=bizId" json:"biz_id,omitempty"`
	MultiCommitId string `protobuf:"bytes,3,opt,name=multi_commit_id,json=multiCommitId" json:"multi_commit_id,omitempty"`
	Memo          string `protobuf:"bytes,4,opt,name=memo" json:"memo,omitempty"`
	Operator      string `protobuf:"bytes,5,opt,name=operator" json:"operator,omitempty"`
}

func (m *UpdateMultiCommitReq) Reset()                    { *m = UpdateMultiCommitReq{} }
func (m *UpdateMultiCommitReq) String() string            { return proto.CompactTextString(m) }
func (*UpdateMultiCommitReq) ProtoMessage()               {}
func (*UpdateMultiCommitReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{98} }

func (m *UpdateMultiCommitReq) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *UpdateMultiCommitReq) GetBizId() string {
	if m != nil {
		return m.BizId
	}
	return ""
}

func (m *UpdateMultiCommitReq) GetMultiCommitId() string {
	if m != nil {
		return m.MultiCommitId
	}
	return ""
}

func (m *UpdateMultiCommitReq) GetMemo() string {
	if m != nil {
		return m.Memo
	}
	return ""
}

func (m *UpdateMultiCommitReq) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

type UpdateMultiCommitResp struct {
	Seq     string         `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	Code    common.ErrCode `protobuf:"varint,2,opt,name=code,enum=common.ErrCode" json:"code,omitempty"`
	Message string         `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *UpdateMultiCommitResp) Reset()                    { *m = UpdateMultiCommitResp{} }
func (m *UpdateMultiCommitResp) String() string            { return proto.CompactTextString(m) }
func (*UpdateMultiCommitResp) ProtoMessage()               {}
func (*UpdateMultiCommitResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{99} }

func (m *UpdateMultiCommitResp) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *UpdateMultiCommitResp) GetCode() common.ErrCode {
	if m != nil {
		return m.Code
	}
	return common.ErrCode_E_OK
}

func (m *UpdateMultiCommitResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type CancelMultiCommitReq struct {
	Seq           string `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	BizId         string `protobuf:"bytes,2,opt,name=biz_id,json=bizId" json:"biz_id,omitempty"`
	MultiCommitId string `protobuf:"bytes,3,opt,name=multi_commit_id,json=multiCommitId" json:"multi_commit_id,omitempty"`
	Operator      string `protobuf:"bytes,4,opt,name=operator" json:"operator,omitempty"`
}

func (m *CancelMultiCommitReq) Reset()                    { *m = CancelMultiCommitReq{} }
func (m *CancelMultiCommitReq) String() string            { return proto.CompactTextString(m) }
func (*CancelMultiCommitReq) ProtoMessage()               {}
func (*CancelMultiCommitReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{100} }

func (m *CancelMultiCommitReq) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *CancelMultiCommitReq) GetBizId() string {
	if m != nil {
		return m.BizId
	}
	return ""
}

func (m *CancelMultiCommitReq) GetMultiCommitId() string {
	if m != nil {
		return m.MultiCommitId
	}
	return ""
}

func (m *CancelMultiCommitReq) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

type CancelMultiCommitResp struct {
	Seq     string         `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	Code    common.ErrCode `protobuf:"varint,2,opt,name=code,enum=common.ErrCode" json:"code,omitempty"`
	Message string         `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *CancelMultiCommitResp) Reset()                    { *m = CancelMultiCommitResp{} }
func (m *CancelMultiCommitResp) String() string            { return proto.CompactTextString(m) }
func (*CancelMultiCommitResp) ProtoMessage()               {}
func (*CancelMultiCommitResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{101} }

func (m *CancelMultiCommitResp) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *CancelMultiCommitResp) GetCode() common.ErrCode {
	if m != nil {
		return m.Code
	}
	return common.ErrCode_E_OK
}

func (m *CancelMultiCommitResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type ConfirmMultiCommitReq struct {
	Seq           string `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	BizId         string `protobuf:"bytes,2,opt,name=biz_id,json=bizId" json:"biz_id,omitempty"`
	MultiCommitId string `protobuf:"bytes,3,opt,name=multi_commit_id,json=multiCommitId" json:"multi_commit_id,omitempty"`
	Operator      string `protobuf:"bytes,4,opt,name=operator" json:"operator,omitempty"`
}

func (m *ConfirmMultiCommitReq) Reset()                    { *m = ConfirmMultiCommitReq{} }
func (m *ConfirmMultiCommitReq) String() string            { return proto.CompactTextString(m) }
func (*ConfirmMultiCommitReq) ProtoMessage()               {}
func (*ConfirmMultiCommitReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{102} }

func (m *ConfirmMultiCommitReq) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *ConfirmMultiCommitReq) GetBizId() string {
	if m != nil {
		return m.BizId
	}
	return ""
}

func (m *ConfirmMultiCommitReq) GetMultiCommitId() string {
	if m != nil {
		return m.MultiCommitId
	}
	return ""
}

func (m *ConfirmMultiCommitReq) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

type ConfirmMultiCommitResp struct {
	Seq     string         `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	Code    common.ErrCode `protobuf:"varint,2,opt,name=code,enum=common.ErrCode" json:"code,omitempty"`
	Message string         `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *ConfirmMultiCommitResp) Reset()                    { *m = ConfirmMultiCommitResp{} }
func (m *ConfirmMultiCommitResp) String() string            { return proto.CompactTextString(m) }
func (*ConfirmMultiCommitResp) ProtoMessage()               {}
func (*ConfirmMultiCommitResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{103} }

func (m *ConfirmMultiCommitResp) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *ConfirmMultiCommitResp) GetCode() common.ErrCode {
	if m != nil {
		return m.Code
	}
	return common.ErrCode_E_OK
}

func (m *ConfirmMultiCommitResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type CreateReleaseReq struct {
	Seq            string `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	BizId          string `protobuf:"bytes,2,opt,name=biz_id,json=bizId" json:"biz_id,omitempty"`
	ReleaseId      string `protobuf:"bytes,3,opt,name=release_id,json=releaseId" json:"release_id,omitempty"`
	Name           string `protobuf:"bytes,4,opt,name=name" json:"name,omitempty"`
	AppId          string `protobuf:"bytes,5,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	CfgId          string `protobuf:"bytes,6,opt,name=cfg_id,json=cfgId" json:"cfg_id,omitempty"`
	CfgName        string `protobuf:"bytes,7,opt,name=cfg_name,json=cfgName" json:"cfg_name,omitempty"`
	CfgFpath       string `protobuf:"bytes,8,opt,name=cfg_fpath,json=cfgFpath" json:"cfg_fpath,omitempty"`
	User           string `protobuf:"bytes,9,opt,name=user" json:"user,omitempty"`
	UserGroup      string `protobuf:"bytes,10,opt,name=user_group,json=userGroup" json:"user_group,omitempty"`
	FilePrivilege  string `protobuf:"bytes,11,opt,name=file_privilege,json=filePrivilege" json:"file_privilege,omitempty"`
	FileFormat     string `protobuf:"bytes,12,opt,name=file_format,json=fileFormat" json:"file_format,omitempty"`
	FileMode       int32  `protobuf:"varint,13,opt,name=file_mode,json=fileMode" json:"file_mode,omitempty"`
	StrategyId     string `protobuf:"bytes,14,opt,name=strategy_id,json=strategyId" json:"strategy_id,omitempty"`
	Strategies     string `protobuf:"bytes,15,opt,name=strategies" json:"strategies,omitempty"`
	CommitId       string `protobuf:"bytes,16,opt,name=commit_id,json=commitId" json:"commit_id,omitempty"`
	MultiReleaseId string `protobuf:"bytes,17,opt,name=multi_release_id,json=multiReleaseId" json:"multi_release_id,omitempty"`
	Memo           string `protobuf:"bytes,18,opt,name=memo" json:"memo,omitempty"`
	Creator        string `protobuf:"bytes,19,opt,name=creator" json:"creator,omitempty"`
	State          int32  `protobuf:"varint,20,opt,name=state" json:"state,omitempty"`
}

func (m *CreateReleaseReq) Reset()                    { *m = CreateReleaseReq{} }
func (m *CreateReleaseReq) String() string            { return proto.CompactTextString(m) }
func (*CreateReleaseReq) ProtoMessage()               {}
func (*CreateReleaseReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{104} }

func (m *CreateReleaseReq) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *CreateReleaseReq) GetBizId() string {
	if m != nil {
		return m.BizId
	}
	return ""
}

func (m *CreateReleaseReq) GetReleaseId() string {
	if m != nil {
		return m.ReleaseId
	}
	return ""
}

func (m *CreateReleaseReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CreateReleaseReq) GetAppId() string {
	if m != nil {
		return m.AppId
	}
	return ""
}

func (m *CreateReleaseReq) GetCfgId() string {
	if m != nil {
		return m.CfgId
	}
	return ""
}

func (m *CreateReleaseReq) GetCfgName() string {
	if m != nil {
		return m.CfgName
	}
	return ""
}

func (m *CreateReleaseReq) GetCfgFpath() string {
	if m != nil {
		return m.CfgFpath
	}
	return ""
}

func (m *CreateReleaseReq) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

func (m *CreateReleaseReq) GetUserGroup() string {
	if m != nil {
		return m.UserGroup
	}
	return ""
}

func (m *CreateReleaseReq) GetFilePrivilege() string {
	if m != nil {
		return m.FilePrivilege
	}
	return ""
}

func (m *CreateReleaseReq) GetFileFormat() string {
	if m != nil {
		return m.FileFormat
	}
	return ""
}

func (m *CreateReleaseReq) GetFileMode() int32 {
	if m != nil {
		return m.FileMode
	}
	return 0
}

func (m *CreateReleaseReq) GetStrategyId() string {
	if m != nil {
		return m.StrategyId
	}
	return ""
}

func (m *CreateReleaseReq) GetStrategies() string {
	if m != nil {
		return m.Strategies
	}
	return ""
}

func (m *CreateReleaseReq) GetCommitId() string {
	if m != nil {
		return m.CommitId
	}
	return ""
}

func (m *CreateReleaseReq) GetMultiReleaseId() string {
	if m != nil {
		return m.MultiReleaseId
	}
	return ""
}

func (m *CreateReleaseReq) GetMemo() string {
	if m != nil {
		return m.Memo
	}
	return ""
}

func (m *CreateReleaseReq) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *CreateReleaseReq) GetState() int32 {
	if m != nil {
		return m.State
	}
	return 0
}

type CreateReleaseResp struct {
	Seq     string                      `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	Code    common.ErrCode              `protobuf:"varint,2,opt,name=code,enum=common.ErrCode" json:"code,omitempty"`
	Message string                      `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
	Data    *CreateReleaseResp_RespData `protobuf:"bytes,4,opt,name=data" json:"data,omitempty"`
}

func (m *CreateReleaseResp) Reset()                    { *m = CreateReleaseResp{} }
func (m *CreateReleaseResp) String() string            { return proto.CompactTextString(m) }
func (*CreateReleaseResp) ProtoMessage()               {}
func (*CreateReleaseResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{105} }

func (m *CreateReleaseResp) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *CreateReleaseResp) GetCode() common.ErrCode {
	if m != nil {
		return m.Code
	}
	return common.ErrCode_E_OK
}

func (m *CreateReleaseResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *CreateReleaseResp) GetData() *CreateReleaseResp_RespData {
	if m != nil {
		return m.Data
	}
	return nil
}

type CreateReleaseResp_RespData struct {
	ReleaseId string `protobuf:"bytes,1,opt,name=release_id,json=releaseId" json:"release_id,omitempty"`
}

func (m *CreateReleaseResp_RespData) Reset()         { *m = CreateReleaseResp_RespData{} }
func (m *CreateReleaseResp_RespData) String() string { return proto.CompactTextString(m) }
func (*CreateReleaseResp_RespData) ProtoMessage()    {}
func (*CreateReleaseResp_RespData) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{105, 0}
}

func (m *CreateReleaseResp_RespData) GetReleaseId() string {
	if m != nil {
		return m.ReleaseId
	}
	return ""
}

type QueryReleaseReq struct {
	Seq       string `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	BizId     string `protobuf:"bytes,2,opt,name=biz_id,json=bizId" json:"biz_id,omitempty"`
	ReleaseId string `protobuf:"bytes,3,opt,name=release_id,json=releaseId" json:"release_id,omitempty"`
}

func (m *QueryReleaseReq) Reset()                    { *m = QueryReleaseReq{} }
func (m *QueryReleaseReq) String() string            { return proto.CompactTextString(m) }
func (*QueryReleaseReq) ProtoMessage()               {}
func (*QueryReleaseReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{106} }

func (m *QueryReleaseReq) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *QueryReleaseReq) GetBizId() string {
	if m != nil {
		return m.BizId
	}
	return ""
}

func (m *QueryReleaseReq) GetReleaseId() string {
	if m != nil {
		return m.ReleaseId
	}
	return ""
}

type QueryReleaseResp struct {
	Seq     string          `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	Code    common.ErrCode  `protobuf:"varint,2,opt,name=code,enum=common.ErrCode" json:"code,omitempty"`
	Message string          `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
	Data    *common.Release `protobuf:"bytes,4,opt,name=data" json:"data,omitempty"`
}

func (m *QueryReleaseResp) Reset()                    { *m = QueryReleaseResp{} }
func (m *QueryReleaseResp) String() string            { return proto.CompactTextString(m) }
func (*QueryReleaseResp) ProtoMessage()               {}
func (*QueryReleaseResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{107} }

func (m *QueryReleaseResp) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *QueryReleaseResp) GetCode() common.ErrCode {
	if m != nil {
		return m.Code
	}
	return common.ErrCode_E_OK
}

func (m *QueryReleaseResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *QueryReleaseResp) GetData() *common.Release {
	if m != nil {
		return m.Data
	}
	return nil
}

type QueryNewestReleasesReq struct {
	Seq            string       `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	BizId          string       `protobuf:"bytes,2,opt,name=biz_id,json=bizId" json:"biz_id,omitempty"`
	CfgId          string       `protobuf:"bytes,3,opt,name=cfg_id,json=cfgId" json:"cfg_id,omitempty"`
	LocalReleaseId string       `protobuf:"bytes,4,opt,name=local_release_id,json=localReleaseId" json:"local_release_id,omitempty"`
	Page           *common.Page `protobuf:"bytes,5,opt,name=page" json:"page,omitempty"`
}

func (m *QueryNewestReleasesReq) Reset()                    { *m = QueryNewestReleasesReq{} }
func (m *QueryNewestReleasesReq) String() string            { return proto.CompactTextString(m) }
func (*QueryNewestReleasesReq) ProtoMessage()               {}
func (*QueryNewestReleasesReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{108} }

func (m *QueryNewestReleasesReq) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *QueryNewestReleasesReq) GetBizId() string {
	if m != nil {
		return m.BizId
	}
	return ""
}

func (m *QueryNewestReleasesReq) GetCfgId() string {
	if m != nil {
		return m.CfgId
	}
	return ""
}

func (m *QueryNewestReleasesReq) GetLocalReleaseId() string {
	if m != nil {
		return m.LocalReleaseId
	}
	return ""
}

func (m *QueryNewestReleasesReq) GetPage() *common.Page {
	if m != nil {
		return m.Page
	}
	return nil
}

type QueryNewestReleasesResp struct {
	Seq     string                            `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	Code    common.ErrCode                    `protobuf:"varint,2,opt,name=code,enum=common.ErrCode" json:"code,omitempty"`
	Message string                            `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
	Data    *QueryNewestReleasesResp_RespData `protobuf:"bytes,4,opt,name=data" json:"data,omitempty"`
}

func (m *QueryNewestReleasesResp) Reset()                    { *m = QueryNewestReleasesResp{} }
func (m *QueryNewestReleasesResp) String() string            { return proto.CompactTextString(m) }
func (*QueryNewestReleasesResp) ProtoMessage()               {}
func (*QueryNewestReleasesResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{109} }

func (m *QueryNewestReleasesResp) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *QueryNewestReleasesResp) GetCode() common.ErrCode {
	if m != nil {
		return m.Code
	}
	return common.ErrCode_E_OK
}

func (m *QueryNewestReleasesResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *QueryNewestReleasesResp) GetData() *QueryNewestReleasesResp_RespData {
	if m != nil {
		return m.Data
	}
	return nil
}

type QueryNewestReleasesResp_RespData struct {
	Info []*common.Release `protobuf:"bytes,1,rep,name=info" json:"info,omitempty"`
}

func (m *QueryNewestReleasesResp_RespData) Reset()         { *m = QueryNewestReleasesResp_RespData{} }
func (m *QueryNewestReleasesResp_RespData) String() string { return proto.CompactTextString(m) }
func (*QueryNewestReleasesResp_RespData) ProtoMessage()    {}
func (*QueryNewestReleasesResp_RespData) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{109, 0}
}

func (m *QueryNewestReleasesResp_RespData) GetInfo() []*common.Release {
	if m != nil {
		return m.Info
	}
	return nil
}

type QueryHistoryReleasesReq struct {
	Seq       string       `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	BizId     string       `protobuf:"bytes,2,opt,name=biz_id,json=bizId" json:"biz_id,omitempty"`
	CfgId     string       `protobuf:"bytes,3,opt,name=cfg_id,json=cfgId" json:"cfg_id,omitempty"`
	Operator  string       `protobuf:"bytes,4,opt,name=operator" json:"operator,omitempty"`
	QueryType int32        `protobuf:"varint,5,opt,name=query_type,json=queryType" json:"query_type,omitempty"`
	OrderType int32        `protobuf:"varint,6,opt,name=order_type,json=orderType" json:"order_type,omitempty"`
	Page      *common.Page `protobuf:"bytes,7,opt,name=page" json:"page,omitempty"`
}

func (m *QueryHistoryReleasesReq) Reset()                    { *m = QueryHistoryReleasesReq{} }
func (m *QueryHistoryReleasesReq) String() string            { return proto.CompactTextString(m) }
func (*QueryHistoryReleasesReq) ProtoMessage()               {}
func (*QueryHistoryReleasesReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{110} }

func (m *QueryHistoryReleasesReq) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *QueryHistoryReleasesReq) GetBizId() string {
	if m != nil {
		return m.BizId
	}
	return ""
}

func (m *QueryHistoryReleasesReq) GetCfgId() string {
	if m != nil {
		return m.CfgId
	}
	return ""
}

func (m *QueryHistoryReleasesReq) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

func (m *QueryHistoryReleasesReq) GetQueryType() int32 {
	if m != nil {
		return m.QueryType
	}
	return 0
}

func (m *QueryHistoryReleasesReq) GetOrderType() int32 {
	if m != nil {
		return m.OrderType
	}
	return 0
}

func (m *QueryHistoryReleasesReq) GetPage() *common.Page {
	if m != nil {
		return m.Page
	}
	return nil
}

type QueryHistoryReleasesResp struct {
	Seq     string                             `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	Code    common.ErrCode                     `protobuf:"varint,2,opt,name=code,enum=common.ErrCode" json:"code,omitempty"`
	Message string                             `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
	Data    *QueryHistoryReleasesResp_RespData `protobuf:"bytes,4,opt,name=data" json:"data,omitempty"`
}

func (m *QueryHistoryReleasesResp) Reset()                    { *m = QueryHistoryReleasesResp{} }
func (m *QueryHistoryReleasesResp) String() string            { return proto.CompactTextString(m) }
func (*QueryHistoryReleasesResp) ProtoMessage()               {}
func (*QueryHistoryReleasesResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{111} }

func (m *QueryHistoryReleasesResp) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *QueryHistoryReleasesResp) GetCode() common.ErrCode {
	if m != nil {
		return m.Code
	}
	return common.ErrCode_E_OK
}

func (m *QueryHistoryReleasesResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *QueryHistoryReleasesResp) GetData() *QueryHistoryReleasesResp_RespData {
	if m != nil {
		return m.Data
	}
	return nil
}

type QueryHistoryReleasesResp_RespData struct {
	TotalCount uint32            `protobuf:"varint,1,opt,name=total_count,json=totalCount" json:"total_count,omitempty"`
	Info       []*common.Release `protobuf:"bytes,2,rep,name=info" json:"info,omitempty"`
}

func (m *QueryHistoryReleasesResp_RespData) Reset()         { *m = QueryHistoryReleasesResp_RespData{} }
func (m *QueryHistoryReleasesResp_RespData) String() string { return proto.CompactTextString(m) }
func (*QueryHistoryReleasesResp_RespData) ProtoMessage()    {}
func (*QueryHistoryReleasesResp_RespData) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{111, 0}
}

func (m *QueryHistoryReleasesResp_RespData) GetTotalCount() uint32 {
	if m != nil {
		return m.TotalCount
	}
	return 0
}

func (m *QueryHistoryReleasesResp_RespData) GetInfo() []*common.Release {
	if m != nil {
		return m.Info
	}
	return nil
}

type UpdateReleaseReq struct {
	Seq       string `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	BizId     string `protobuf:"bytes,2,opt,name=biz_id,json=bizId" json:"biz_id,omitempty"`
	ReleaseId string `protobuf:"bytes,3,opt,name=release_id,json=releaseId" json:"release_id,omitempty"`
	Name      string `protobuf:"bytes,4,opt,name=name" json:"name,omitempty"`
	Memo      string `protobuf:"bytes,5,opt,name=memo" json:"memo,omitempty"`
	Operator  string `protobuf:"bytes,6,opt,name=operator" json:"operator,omitempty"`
}

func (m *UpdateReleaseReq) Reset()                    { *m = UpdateReleaseReq{} }
func (m *UpdateReleaseReq) String() string            { return proto.CompactTextString(m) }
func (*UpdateReleaseReq) ProtoMessage()               {}
func (*UpdateReleaseReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{112} }

func (m *UpdateReleaseReq) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *UpdateReleaseReq) GetBizId() string {
	if m != nil {
		return m.BizId
	}
	return ""
}

func (m *UpdateReleaseReq) GetReleaseId() string {
	if m != nil {
		return m.ReleaseId
	}
	return ""
}

func (m *UpdateReleaseReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UpdateReleaseReq) GetMemo() string {
	if m != nil {
		return m.Memo
	}
	return ""
}

func (m *UpdateReleaseReq) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

type UpdateReleaseResp struct {
	Seq     string         `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	Code    common.ErrCode `protobuf:"varint,2,opt,name=code,enum=common.ErrCode" json:"code,omitempty"`
	Message string         `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *UpdateReleaseResp) Reset()                    { *m = UpdateReleaseResp{} }
func (m *UpdateReleaseResp) String() string            { return proto.CompactTextString(m) }
func (*UpdateReleaseResp) ProtoMessage()               {}
func (*UpdateReleaseResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{113} }

func (m *UpdateReleaseResp) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *UpdateReleaseResp) GetCode() common.ErrCode {
	if m != nil {
		return m.Code
	}
	return common.ErrCode_E_OK
}

func (m *UpdateReleaseResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type CancelReleaseReq struct {
	Seq       string `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	BizId     string `protobuf:"bytes,2,opt,name=biz_id,json=bizId" json:"biz_id,omitempty"`
	ReleaseId string `protobuf:"bytes,3,opt,name=release_id,json=releaseId" json:"release_id,omitempty"`
	Operator  string `protobuf:"bytes,4,opt,name=operator" json:"operator,omitempty"`
}

func (m *CancelReleaseReq) Reset()                    { *m = CancelReleaseReq{} }
func (m *CancelReleaseReq) String() string            { return proto.CompactTextString(m) }
func (*CancelReleaseReq) ProtoMessage()               {}
func (*CancelReleaseReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{114} }

func (m *CancelReleaseReq) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *CancelReleaseReq) GetBizId() string {
	if m != nil {
		return m.BizId
	}
	return ""
}

func (m *CancelReleaseReq) GetReleaseId() string {
	if m != nil {
		return m.ReleaseId
	}
	return ""
}

func (m *CancelReleaseReq) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

type CancelReleaseResp struct {
	Seq     string         `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	Code    common.ErrCode `protobuf:"varint,2,opt,name=code,enum=common.ErrCode" json:"code,omitempty"`
	Message string         `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *CancelReleaseResp) Reset()                    { *m = CancelReleaseResp{} }
func (m *CancelReleaseResp) String() string            { return proto.CompactTextString(m) }
func (*CancelReleaseResp) ProtoMessage()               {}
func (*CancelReleaseResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{115} }

func (m *CancelReleaseResp) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *CancelReleaseResp) GetCode() common.ErrCode {
	if m != nil {
		return m.Code
	}
	return common.ErrCode_E_OK
}

func (m *CancelReleaseResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type RollbackReleaseReq struct {
	Seq       string `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	BizId     string `protobuf:"bytes,2,opt,name=biz_id,json=bizId" json:"biz_id,omitempty"`
	ReleaseId string `protobuf:"bytes,3,opt,name=release_id,json=releaseId" json:"release_id,omitempty"`
	Operator  string `protobuf:"bytes,4,opt,name=operator" json:"operator,omitempty"`
}

func (m *RollbackReleaseReq) Reset()                    { *m = RollbackReleaseReq{} }
func (m *RollbackReleaseReq) String() string            { return proto.CompactTextString(m) }
func (*RollbackReleaseReq) ProtoMessage()               {}
func (*RollbackReleaseReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{116} }

func (m *RollbackReleaseReq) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *RollbackReleaseReq) GetBizId() string {
	if m != nil {
		return m.BizId
	}
	return ""
}

func (m *RollbackReleaseReq) GetReleaseId() string {
	if m != nil {
		return m.ReleaseId
	}
	return ""
}

func (m *RollbackReleaseReq) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

type RollbackReleaseResp struct {
	Seq     string         `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	Code    common.ErrCode `protobuf:"varint,2,opt,name=code,enum=common.ErrCode" json:"code,omitempty"`
	Message string         `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *RollbackReleaseResp) Reset()                    { *m = RollbackReleaseResp{} }
func (m *RollbackReleaseResp) String() string            { return proto.CompactTextString(m) }
func (*RollbackReleaseResp) ProtoMessage()               {}
func (*RollbackReleaseResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{117} }

func (m *RollbackReleaseResp) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *RollbackReleaseResp) GetCode() common.ErrCode {
	if m != nil {
		return m.Code
	}
	return common.ErrCode_E_OK
}

func (m *RollbackReleaseResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type PublishReleaseReq struct {
	Seq       string `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	BizId     string `protobuf:"bytes,2,opt,name=biz_id,json=bizId" json:"biz_id,omitempty"`
	ReleaseId string `protobuf:"bytes,3,opt,name=release_id,json=releaseId" json:"release_id,omitempty"`
	Operator  string `protobuf:"bytes,4,opt,name=operator" json:"operator,omitempty"`
}

func (m *PublishReleaseReq) Reset()                    { *m = PublishReleaseReq{} }
func (m *PublishReleaseReq) String() string            { return proto.CompactTextString(m) }
func (*PublishReleaseReq) ProtoMessage()               {}
func (*PublishReleaseReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{118} }

func (m *PublishReleaseReq) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *PublishReleaseReq) GetBizId() string {
	if m != nil {
		return m.BizId
	}
	return ""
}

func (m *PublishReleaseReq) GetReleaseId() string {
	if m != nil {
		return m.ReleaseId
	}
	return ""
}

func (m *PublishReleaseReq) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

type PublishReleaseResp struct {
	Seq     string         `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	Code    common.ErrCode `protobuf:"varint,2,opt,name=code,enum=common.ErrCode" json:"code,omitempty"`
	Message string         `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *PublishReleaseResp) Reset()                    { *m = PublishReleaseResp{} }
func (m *PublishReleaseResp) String() string            { return proto.CompactTextString(m) }
func (*PublishReleaseResp) ProtoMessage()               {}
func (*PublishReleaseResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{119} }

func (m *PublishReleaseResp) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *PublishReleaseResp) GetCode() common.ErrCode {
	if m != nil {
		return m.Code
	}
	return common.ErrCode_E_OK
}

func (m *PublishReleaseResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type CreateMultiReleaseReq struct {
	Seq            string `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	BizId          string `protobuf:"bytes,2,opt,name=biz_id,json=bizId" json:"biz_id,omitempty"`
	AppId          string `protobuf:"bytes,3,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	MultiReleaseId string `protobuf:"bytes,4,opt,name=multi_release_id,json=multiReleaseId" json:"multi_release_id,omitempty"`
	Name           string `protobuf:"bytes,5,opt,name=name" json:"name,omitempty"`
	MultiCommitId  string `protobuf:"bytes,6,opt,name=multi_commit_id,json=multiCommitId" json:"multi_commit_id,omitempty"`
	StrategyId     string `protobuf:"bytes,7,opt,name=strategy_id,json=strategyId" json:"strategy_id,omitempty"`
	Strategies     string `protobuf:"bytes,8,opt,name=strategies" json:"strategies,omitempty"`
	Memo           string `protobuf:"bytes,9,opt,name=memo" json:"memo,omitempty"`
	Creator        string `protobuf:"bytes,10,opt,name=creator" json:"creator,omitempty"`
}

func (m *CreateMultiReleaseReq) Reset()                    { *m = CreateMultiReleaseReq{} }
func (m *CreateMultiReleaseReq) String() string            { return proto.CompactTextString(m) }
func (*CreateMultiReleaseReq) ProtoMessage()               {}
func (*CreateMultiReleaseReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{120} }

func (m *CreateMultiReleaseReq) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *CreateMultiReleaseReq) GetBizId() string {
	if m != nil {
		return m.BizId
	}
	return ""
}

func (m *CreateMultiReleaseReq) GetAppId() string {
	if m != nil {
		return m.AppId
	}
	return ""
}

func (m *CreateMultiReleaseReq) GetMultiReleaseId() string {
	if m != nil {
		return m.MultiReleaseId
	}
	return ""
}

func (m *CreateMultiReleaseReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CreateMultiReleaseReq) GetMultiCommitId() string {
	if m != nil {
		return m.MultiCommitId
	}
	return ""
}

func (m *CreateMultiReleaseReq) GetStrategyId() string {
	if m != nil {
		return m.StrategyId
	}
	return ""
}

func (m *CreateMultiReleaseReq) GetStrategies() string {
	if m != nil {
		return m.Strategies
	}
	return ""
}

func (m *CreateMultiReleaseReq) GetMemo() string {
	if m != nil {
		return m.Memo
	}
	return ""
}

func (m *CreateMultiReleaseReq) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

type CreateMultiReleaseResp struct {
	Seq     string                           `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	Code    common.ErrCode                   `protobuf:"varint,2,opt,name=code,enum=common.ErrCode" json:"code,omitempty"`
	Message string                           `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
	Data    *CreateMultiReleaseResp_RespData `protobuf:"bytes,4,opt,name=data" json:"data,omitempty"`
}

func (m *CreateMultiReleaseResp) Reset()                    { *m = CreateMultiReleaseResp{} }
func (m *CreateMultiReleaseResp) String() string            { return proto.CompactTextString(m) }
func (*CreateMultiReleaseResp) ProtoMessage()               {}
func (*CreateMultiReleaseResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{121} }

func (m *CreateMultiReleaseResp) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *CreateMultiReleaseResp) GetCode() common.ErrCode {
	if m != nil {
		return m.Code
	}
	return common.ErrCode_E_OK
}

func (m *CreateMultiReleaseResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *CreateMultiReleaseResp) GetData() *CreateMultiReleaseResp_RespData {
	if m != nil {
		return m.Data
	}
	return nil
}

type CreateMultiReleaseResp_RespData struct {
	MultiReleaseId string `protobuf:"bytes,1,opt,name=multi_release_id,json=multiReleaseId" json:"multi_release_id,omitempty"`
}

func (m *CreateMultiReleaseResp_RespData) Reset()         { *m = CreateMultiReleaseResp_RespData{} }
func (m *CreateMultiReleaseResp_RespData) String() string { return proto.CompactTextString(m) }
func (*CreateMultiReleaseResp_RespData) ProtoMessage()    {}
func (*CreateMultiReleaseResp_RespData) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{121, 0}
}

func (m *CreateMultiReleaseResp_RespData) GetMultiReleaseId() string {
	if m != nil {
		return m.MultiReleaseId
	}
	return ""
}

type QueryMultiReleaseReq struct {
	Seq            string `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	BizId          string `protobuf:"bytes,2,opt,name=biz_id,json=bizId" json:"biz_id,omitempty"`
	MultiReleaseId string `protobuf:"bytes,3,opt,name=multi_release_id,json=multiReleaseId" json:"multi_release_id,omitempty"`
}

func (m *QueryMultiReleaseReq) Reset()                    { *m = QueryMultiReleaseReq{} }
func (m *QueryMultiReleaseReq) String() string            { return proto.CompactTextString(m) }
func (*QueryMultiReleaseReq) ProtoMessage()               {}
func (*QueryMultiReleaseReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{122} }

func (m *QueryMultiReleaseReq) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *QueryMultiReleaseReq) GetBizId() string {
	if m != nil {
		return m.BizId
	}
	return ""
}

func (m *QueryMultiReleaseReq) GetMultiReleaseId() string {
	if m != nil {
		return m.MultiReleaseId
	}
	return ""
}

type QueryMultiReleaseResp struct {
	Seq     string               `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	Code    common.ErrCode       `protobuf:"varint,2,opt,name=code,enum=common.ErrCode" json:"code,omitempty"`
	Message string               `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
	Data    *common.MultiRelease `protobuf:"bytes,4,opt,name=data" json:"data,omitempty"`
}

func (m *QueryMultiReleaseResp) Reset()                    { *m = QueryMultiReleaseResp{} }
func (m *QueryMultiReleaseResp) String() string            { return proto.CompactTextString(m) }
func (*QueryMultiReleaseResp) ProtoMessage()               {}
func (*QueryMultiReleaseResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{123} }

func (m *QueryMultiReleaseResp) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *QueryMultiReleaseResp) GetCode() common.ErrCode {
	if m != nil {
		return m.Code
	}
	return common.ErrCode_E_OK
}

func (m *QueryMultiReleaseResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *QueryMultiReleaseResp) GetData() *common.MultiRelease {
	if m != nil {
		return m.Data
	}
	return nil
}

type QueryHistoryMultiReleasesReq struct {
	Seq       string       `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	BizId     string       `protobuf:"bytes,2,opt,name=biz_id,json=bizId" json:"biz_id,omitempty"`
	AppId     string       `protobuf:"bytes,3,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	Operator  string       `protobuf:"bytes,4,opt,name=operator" json:"operator,omitempty"`
	QueryType int32        `protobuf:"varint,5,opt,name=query_type,json=queryType" json:"query_type,omitempty"`
	OrderType int32        `protobuf:"varint,6,opt,name=order_type,json=orderType" json:"order_type,omitempty"`
	Page      *common.Page `protobuf:"bytes,7,opt,name=page" json:"page,omitempty"`
}

func (m *QueryHistoryMultiReleasesReq) Reset()                    { *m = QueryHistoryMultiReleasesReq{} }
func (m *QueryHistoryMultiReleasesReq) String() string            { return proto.CompactTextString(m) }
func (*QueryHistoryMultiReleasesReq) ProtoMessage()               {}
func (*QueryHistoryMultiReleasesReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{124} }

func (m *QueryHistoryMultiReleasesReq) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *QueryHistoryMultiReleasesReq) GetBizId() string {
	if m != nil {
		return m.BizId
	}
	return ""
}

func (m *QueryHistoryMultiReleasesReq) GetAppId() string {
	if m != nil {
		return m.AppId
	}
	return ""
}

func (m *QueryHistoryMultiReleasesReq) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

func (m *QueryHistoryMultiReleasesReq) GetQueryType() int32 {
	if m != nil {
		return m.QueryType
	}
	return 0
}

func (m *QueryHistoryMultiReleasesReq) GetOrderType() int32 {
	if m != nil {
		return m.OrderType
	}
	return 0
}

func (m *QueryHistoryMultiReleasesReq) GetPage() *common.Page {
	if m != nil {
		return m.Page
	}
	return nil
}

type QueryHistoryMultiReleasesResp struct {
	Seq     string                                  `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	Code    common.ErrCode                          `protobuf:"varint,2,opt,name=code,enum=common.ErrCode" json:"code,omitempty"`
	Message string                                  `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
	Data    *QueryHistoryMultiReleasesResp_RespData `protobuf:"bytes,4,opt,name=data" json:"data,omitempty"`
}

func (m *QueryHistoryMultiReleasesResp) Reset()         { *m = QueryHistoryMultiReleasesResp{} }
func (m *QueryHistoryMultiReleasesResp) String() string { return proto.CompactTextString(m) }
func (*QueryHistoryMultiReleasesResp) ProtoMessage()    {}
func (*QueryHistoryMultiReleasesResp) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{125}
}

func (m *QueryHistoryMultiReleasesResp) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *QueryHistoryMultiReleasesResp) GetCode() common.ErrCode {
	if m != nil {
		return m.Code
	}
	return common.ErrCode_E_OK
}

func (m *QueryHistoryMultiReleasesResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *QueryHistoryMultiReleasesResp) GetData() *QueryHistoryMultiReleasesResp_RespData {
	if m != nil {
		return m.Data
	}
	return nil
}

type QueryHistoryMultiReleasesResp_RespData struct {
	TotalCount uint32                 `protobuf:"varint,1,opt,name=total_count,json=totalCount" json:"total_count,omitempty"`
	Info       []*common.MultiRelease `protobuf:"bytes,2,rep,name=info" json:"info,omitempty"`
}

func (m *QueryHistoryMultiReleasesResp_RespData) Reset() {
	*m = QueryHistoryMultiReleasesResp_RespData{}
}
func (m *QueryHistoryMultiReleasesResp_RespData) String() string { return proto.CompactTextString(m) }
func (*QueryHistoryMultiReleasesResp_RespData) ProtoMessage()    {}
func (*QueryHistoryMultiReleasesResp_RespData) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{125, 0}
}

func (m *QueryHistoryMultiReleasesResp_RespData) GetTotalCount() uint32 {
	if m != nil {
		return m.TotalCount
	}
	return 0
}

func (m *QueryHistoryMultiReleasesResp_RespData) GetInfo() []*common.MultiRelease {
	if m != nil {
		return m.Info
	}
	return nil
}

type UpdateMultiReleaseReq struct {
	Seq            string `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	BizId          string `protobuf:"bytes,2,opt,name=biz_id,json=bizId" json:"biz_id,omitempty"`
	MultiReleaseId string `protobuf:"bytes,3,opt,name=multi_release_id,json=multiReleaseId" json:"multi_release_id,omitempty"`
	Name           string `protobuf:"bytes,4,opt,name=name" json:"name,omitempty"`
	Memo           string `protobuf:"bytes,5,opt,name=memo" json:"memo,omitempty"`
	Operator       string `protobuf:"bytes,6,opt,name=operator" json:"operator,omitempty"`
}

func (m *UpdateMultiReleaseReq) Reset()                    { *m = UpdateMultiReleaseReq{} }
func (m *UpdateMultiReleaseReq) String() string            { return proto.CompactTextString(m) }
func (*UpdateMultiReleaseReq) ProtoMessage()               {}
func (*UpdateMultiReleaseReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{126} }

func (m *UpdateMultiReleaseReq) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *UpdateMultiReleaseReq) GetBizId() string {
	if m != nil {
		return m.BizId
	}
	return ""
}

func (m *UpdateMultiReleaseReq) GetMultiReleaseId() string {
	if m != nil {
		return m.MultiReleaseId
	}
	return ""
}

func (m *UpdateMultiReleaseReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UpdateMultiReleaseReq) GetMemo() string {
	if m != nil {
		return m.Memo
	}
	return ""
}

func (m *UpdateMultiReleaseReq) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

type UpdateMultiReleaseResp struct {
	Seq     string         `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	Code    common.ErrCode `protobuf:"varint,2,opt,name=code,enum=common.ErrCode" json:"code,omitempty"`
	Message string         `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *UpdateMultiReleaseResp) Reset()                    { *m = UpdateMultiReleaseResp{} }
func (m *UpdateMultiReleaseResp) String() string            { return proto.CompactTextString(m) }
func (*UpdateMultiReleaseResp) ProtoMessage()               {}
func (*UpdateMultiReleaseResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{127} }

func (m *UpdateMultiReleaseResp) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *UpdateMultiReleaseResp) GetCode() common.ErrCode {
	if m != nil {
		return m.Code
	}
	return common.ErrCode_E_OK
}

func (m *UpdateMultiReleaseResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type QueryMultiReleaseSubListReq struct {
	Seq            string `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	BizId          string `protobuf:"bytes,2,opt,name=biz_id,json=bizId" json:"biz_id,omitempty"`
	MultiReleaseId string `protobuf:"bytes,3,opt,name=multi_release_id,json=multiReleaseId" json:"multi_release_id,omitempty"`
}

func (m *QueryMultiReleaseSubListReq) Reset()                    { *m = QueryMultiReleaseSubListReq{} }
func (m *QueryMultiReleaseSubListReq) String() string            { return proto.CompactTextString(m) }
func (*QueryMultiReleaseSubListReq) ProtoMessage()               {}
func (*QueryMultiReleaseSubListReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{128} }

func (m *QueryMultiReleaseSubListReq) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *QueryMultiReleaseSubListReq) GetBizId() string {
	if m != nil {
		return m.BizId
	}
	return ""
}

func (m *QueryMultiReleaseSubListReq) GetMultiReleaseId() string {
	if m != nil {
		return m.MultiReleaseId
	}
	return ""
}

type QueryMultiReleaseSubListResp struct {
	Seq     string                                 `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	Code    common.ErrCode                         `protobuf:"varint,2,opt,name=code,enum=common.ErrCode" json:"code,omitempty"`
	Message string                                 `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
	Data    *QueryMultiReleaseSubListResp_RespData `protobuf:"bytes,4,opt,name=data" json:"data,omitempty"`
}

func (m *QueryMultiReleaseSubListResp) Reset()                    { *m = QueryMultiReleaseSubListResp{} }
func (m *QueryMultiReleaseSubListResp) String() string            { return proto.CompactTextString(m) }
func (*QueryMultiReleaseSubListResp) ProtoMessage()               {}
func (*QueryMultiReleaseSubListResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{129} }

func (m *QueryMultiReleaseSubListResp) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *QueryMultiReleaseSubListResp) GetCode() common.ErrCode {
	if m != nil {
		return m.Code
	}
	return common.ErrCode_E_OK
}

func (m *QueryMultiReleaseSubListResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *QueryMultiReleaseSubListResp) GetData() *QueryMultiReleaseSubListResp_RespData {
	if m != nil {
		return m.Data
	}
	return nil
}

type QueryMultiReleaseSubListResp_RespData struct {
	ReleaseIds []string `protobuf:"bytes,1,rep,name=release_ids,json=releaseIds" json:"release_ids,omitempty"`
}

func (m *QueryMultiReleaseSubListResp_RespData) Reset()         { *m = QueryMultiReleaseSubListResp_RespData{} }
func (m *QueryMultiReleaseSubListResp_RespData) String() string { return proto.CompactTextString(m) }
func (*QueryMultiReleaseSubListResp_RespData) ProtoMessage()    {}
func (*QueryMultiReleaseSubListResp_RespData) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{129, 0}
}

func (m *QueryMultiReleaseSubListResp_RespData) GetReleaseIds() []string {
	if m != nil {
		return m.ReleaseIds
	}
	return nil
}

type CancelMultiReleaseReq struct {
	Seq            string `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	BizId          string `protobuf:"bytes,2,opt,name=biz_id,json=bizId" json:"biz_id,omitempty"`
	MultiReleaseId string `protobuf:"bytes,3,opt,name=multi_release_id,json=multiReleaseId" json:"multi_release_id,omitempty"`
	Operator       string `protobuf:"bytes,4,opt,name=operator" json:"operator,omitempty"`
}

func (m *CancelMultiReleaseReq) Reset()                    { *m = CancelMultiReleaseReq{} }
func (m *CancelMultiReleaseReq) String() string            { return proto.CompactTextString(m) }
func (*CancelMultiReleaseReq) ProtoMessage()               {}
func (*CancelMultiReleaseReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{130} }

func (m *CancelMultiReleaseReq) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *CancelMultiReleaseReq) GetBizId() string {
	if m != nil {
		return m.BizId
	}
	return ""
}

func (m *CancelMultiReleaseReq) GetMultiReleaseId() string {
	if m != nil {
		return m.MultiReleaseId
	}
	return ""
}

func (m *CancelMultiReleaseReq) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

type CancelMultiReleaseResp struct {
	Seq     string         `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	Code    common.ErrCode `protobuf:"varint,2,opt,name=code,enum=common.ErrCode" json:"code,omitempty"`
	Message string         `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *CancelMultiReleaseResp) Reset()                    { *m = CancelMultiReleaseResp{} }
func (m *CancelMultiReleaseResp) String() string            { return proto.CompactTextString(m) }
func (*CancelMultiReleaseResp) ProtoMessage()               {}
func (*CancelMultiReleaseResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{131} }

func (m *CancelMultiReleaseResp) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *CancelMultiReleaseResp) GetCode() common.ErrCode {
	if m != nil {
		return m.Code
	}
	return common.ErrCode_E_OK
}

func (m *CancelMultiReleaseResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type PublishMultiReleaseReq struct {
	Seq            string `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	BizId          string `protobuf:"bytes,2,opt,name=biz_id,json=bizId" json:"biz_id,omitempty"`
	MultiReleaseId string `protobuf:"bytes,3,opt,name=multi_release_id,json=multiReleaseId" json:"multi_release_id,omitempty"`
	Operator       string `protobuf:"bytes,4,opt,name=operator" json:"operator,omitempty"`
}

func (m *PublishMultiReleaseReq) Reset()                    { *m = PublishMultiReleaseReq{} }
func (m *PublishMultiReleaseReq) String() string            { return proto.CompactTextString(m) }
func (*PublishMultiReleaseReq) ProtoMessage()               {}
func (*PublishMultiReleaseReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{132} }

func (m *PublishMultiReleaseReq) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *PublishMultiReleaseReq) GetBizId() string {
	if m != nil {
		return m.BizId
	}
	return ""
}

func (m *PublishMultiReleaseReq) GetMultiReleaseId() string {
	if m != nil {
		return m.MultiReleaseId
	}
	return ""
}

func (m *PublishMultiReleaseReq) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

type PublishMultiReleaseResp struct {
	Seq     string         `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	Code    common.ErrCode `protobuf:"varint,2,opt,name=code,enum=common.ErrCode" json:"code,omitempty"`
	Message string         `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *PublishMultiReleaseResp) Reset()                    { *m = PublishMultiReleaseResp{} }
func (m *PublishMultiReleaseResp) String() string            { return proto.CompactTextString(m) }
func (*PublishMultiReleaseResp) ProtoMessage()               {}
func (*PublishMultiReleaseResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{133} }

func (m *PublishMultiReleaseResp) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *PublishMultiReleaseResp) GetCode() common.ErrCode {
	if m != nil {
		return m.Code
	}
	return common.ErrCode_E_OK
}

func (m *PublishMultiReleaseResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type RollbackMultiReleaseReq struct {
	Seq            string `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	BizId          string `protobuf:"bytes,2,opt,name=biz_id,json=bizId" json:"biz_id,omitempty"`
	MultiReleaseId string `protobuf:"bytes,3,opt,name=multi_release_id,json=multiReleaseId" json:"multi_release_id,omitempty"`
	Operator       string `protobuf:"bytes,4,opt,name=operator" json:"operator,omitempty"`
}

func (m *RollbackMultiReleaseReq) Reset()                    { *m = RollbackMultiReleaseReq{} }
func (m *RollbackMultiReleaseReq) String() string            { return proto.CompactTextString(m) }
func (*RollbackMultiReleaseReq) ProtoMessage()               {}
func (*RollbackMultiReleaseReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{134} }

func (m *RollbackMultiReleaseReq) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *RollbackMultiReleaseReq) GetBizId() string {
	if m != nil {
		return m.BizId
	}
	return ""
}

func (m *RollbackMultiReleaseReq) GetMultiReleaseId() string {
	if m != nil {
		return m.MultiReleaseId
	}
	return ""
}

func (m *RollbackMultiReleaseReq) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

type RollbackMultiReleaseResp struct {
	Seq     string         `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	Code    common.ErrCode `protobuf:"varint,2,opt,name=code,enum=common.ErrCode" json:"code,omitempty"`
	Message string         `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *RollbackMultiReleaseResp) Reset()                    { *m = RollbackMultiReleaseResp{} }
func (m *RollbackMultiReleaseResp) String() string            { return proto.CompactTextString(m) }
func (*RollbackMultiReleaseResp) ProtoMessage()               {}
func (*RollbackMultiReleaseResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{135} }

func (m *RollbackMultiReleaseResp) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *RollbackMultiReleaseResp) GetCode() common.ErrCode {
	if m != nil {
		return m.Code
	}
	return common.ErrCode_E_OK
}

func (m *RollbackMultiReleaseResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type CreateAppInstanceReq struct {
	Seq     string `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	BizId   string `protobuf:"bytes,2,opt,name=biz_id,json=bizId" json:"biz_id,omitempty"`
	AppId   string `protobuf:"bytes,3,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	CloudId string `protobuf:"bytes,4,opt,name=cloud_id,json=cloudId" json:"cloud_id,omitempty"`
	Ip      string `protobuf:"bytes,5,opt,name=ip" json:"ip,omitempty"`
	Path    string `protobuf:"bytes,6,opt,name=path" json:"path,omitempty"`
	Labels  string `protobuf:"bytes,7,opt,name=labels" json:"labels,omitempty"`
	State   int32  `protobuf:"varint,8,opt,name=state" json:"state,omitempty"`
}

func (m *CreateAppInstanceReq) Reset()                    { *m = CreateAppInstanceReq{} }
func (m *CreateAppInstanceReq) String() string            { return proto.CompactTextString(m) }
func (*CreateAppInstanceReq) ProtoMessage()               {}
func (*CreateAppInstanceReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{136} }

func (m *CreateAppInstanceReq) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *CreateAppInstanceReq) GetBizId() string {
	if m != nil {
		return m.BizId
	}
	return ""
}

func (m *CreateAppInstanceReq) GetAppId() string {
	if m != nil {
		return m.AppId
	}
	return ""
}

func (m *CreateAppInstanceReq) GetCloudId() string {
	if m != nil {
		return m.CloudId
	}
	return ""
}

func (m *CreateAppInstanceReq) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *CreateAppInstanceReq) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *CreateAppInstanceReq) GetLabels() string {
	if m != nil {
		return m.Labels
	}
	return ""
}

func (m *CreateAppInstanceReq) GetState() int32 {
	if m != nil {
		return m.State
	}
	return 0
}

type CreateAppInstanceResp struct {
	Seq     string         `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	Code    common.ErrCode `protobuf:"varint,2,opt,name=code,enum=common.ErrCode" json:"code,omitempty"`
	Message string         `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *CreateAppInstanceResp) Reset()                    { *m = CreateAppInstanceResp{} }
func (m *CreateAppInstanceResp) String() string            { return proto.CompactTextString(m) }
func (*CreateAppInstanceResp) ProtoMessage()               {}
func (*CreateAppInstanceResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{137} }

func (m *CreateAppInstanceResp) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *CreateAppInstanceResp) GetCode() common.ErrCode {
	if m != nil {
		return m.Code
	}
	return common.ErrCode_E_OK
}

func (m *CreateAppInstanceResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type QueryReachableAppInstancesReq struct {
	Seq       string              `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	BizId     string              `protobuf:"bytes,2,opt,name=biz_id,json=bizId" json:"biz_id,omitempty"`
	AppId     string              `protobuf:"bytes,3,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	LabelsOr  []*common.LabelsMap `protobuf:"bytes,4,rep,name=labels_or,json=labelsOr" json:"labels_or,omitempty"`
	LabelsAnd []*common.LabelsMap `protobuf:"bytes,5,rep,name=labels_and,json=labelsAnd" json:"labels_and,omitempty"`
	Page      *common.Page        `protobuf:"bytes,6,opt,name=page" json:"page,omitempty"`
}

func (m *QueryReachableAppInstancesReq) Reset()         { *m = QueryReachableAppInstancesReq{} }
func (m *QueryReachableAppInstancesReq) String() string { return proto.CompactTextString(m) }
func (*QueryReachableAppInstancesReq) ProtoMessage()    {}
func (*QueryReachableAppInstancesReq) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{138}
}

func (m *QueryReachableAppInstancesReq) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *QueryReachableAppInstancesReq) GetBizId() string {
	if m != nil {
		return m.BizId
	}
	return ""
}

func (m *QueryReachableAppInstancesReq) GetAppId() string {
	if m != nil {
		return m.AppId
	}
	return ""
}

func (m *QueryReachableAppInstancesReq) GetLabelsOr() []*common.LabelsMap {
	if m != nil {
		return m.LabelsOr
	}
	return nil
}

func (m *QueryReachableAppInstancesReq) GetLabelsAnd() []*common.LabelsMap {
	if m != nil {
		return m.LabelsAnd
	}
	return nil
}

func (m *QueryReachableAppInstancesReq) GetPage() *common.Page {
	if m != nil {
		return m.Page
	}
	return nil
}

type QueryReachableAppInstancesResp struct {
	Seq     string                                   `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	Code    common.ErrCode                           `protobuf:"varint,2,opt,name=code,enum=common.ErrCode" json:"code,omitempty"`
	Message string                                   `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
	Data    *QueryReachableAppInstancesResp_RespData `protobuf:"bytes,4,opt,name=data" json:"data,omitempty"`
}

func (m *QueryReachableAppInstancesResp) Reset()         { *m = QueryReachableAppInstancesResp{} }
func (m *QueryReachableAppInstancesResp) String() string { return proto.CompactTextString(m) }
func (*QueryReachableAppInstancesResp) ProtoMessage()    {}
func (*QueryReachableAppInstancesResp) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{139}
}

func (m *QueryReachableAppInstancesResp) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *QueryReachableAppInstancesResp) GetCode() common.ErrCode {
	if m != nil {
		return m.Code
	}
	return common.ErrCode_E_OK
}

func (m *QueryReachableAppInstancesResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *QueryReachableAppInstancesResp) GetData() *QueryReachableAppInstancesResp_RespData {
	if m != nil {
		return m.Data
	}
	return nil
}

type QueryReachableAppInstancesResp_RespData struct {
	TotalCount uint32                `protobuf:"varint,1,opt,name=total_count,json=totalCount" json:"total_count,omitempty"`
	Info       []*common.AppInstance `protobuf:"bytes,2,rep,name=info" json:"info,omitempty"`
}

func (m *QueryReachableAppInstancesResp_RespData) Reset() {
	*m = QueryReachableAppInstancesResp_RespData{}
}
func (m *QueryReachableAppInstancesResp_RespData) String() string { return proto.CompactTextString(m) }
func (*QueryReachableAppInstancesResp_RespData) ProtoMessage()    {}
func (*QueryReachableAppInstancesResp_RespData) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{139, 0}
}

func (m *QueryReachableAppInstancesResp_RespData) GetTotalCount() uint32 {
	if m != nil {
		return m.TotalCount
	}
	return 0
}

func (m *QueryReachableAppInstancesResp_RespData) GetInfo() []*common.AppInstance {
	if m != nil {
		return m.Info
	}
	return nil
}

type UpdateAppInstanceReq struct {
	Seq     string `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	BizId   string `protobuf:"bytes,2,opt,name=biz_id,json=bizId" json:"biz_id,omitempty"`
	AppId   string `protobuf:"bytes,3,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	CloudId string `protobuf:"bytes,4,opt,name=cloud_id,json=cloudId" json:"cloud_id,omitempty"`
	Ip      string `protobuf:"bytes,5,opt,name=ip" json:"ip,omitempty"`
	Path    string `protobuf:"bytes,6,opt,name=path" json:"path,omitempty"`
	Labels  string `protobuf:"bytes,7,opt,name=labels" json:"labels,omitempty"`
	State   int32  `protobuf:"varint,8,opt,name=state" json:"state,omitempty"`
}

func (m *UpdateAppInstanceReq) Reset()                    { *m = UpdateAppInstanceReq{} }
func (m *UpdateAppInstanceReq) String() string            { return proto.CompactTextString(m) }
func (*UpdateAppInstanceReq) ProtoMessage()               {}
func (*UpdateAppInstanceReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{140} }

func (m *UpdateAppInstanceReq) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *UpdateAppInstanceReq) GetBizId() string {
	if m != nil {
		return m.BizId
	}
	return ""
}

func (m *UpdateAppInstanceReq) GetAppId() string {
	if m != nil {
		return m.AppId
	}
	return ""
}

func (m *UpdateAppInstanceReq) GetCloudId() string {
	if m != nil {
		return m.CloudId
	}
	return ""
}

func (m *UpdateAppInstanceReq) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *UpdateAppInstanceReq) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *UpdateAppInstanceReq) GetLabels() string {
	if m != nil {
		return m.Labels
	}
	return ""
}

func (m *UpdateAppInstanceReq) GetState() int32 {
	if m != nil {
		return m.State
	}
	return 0
}

type UpdateAppInstanceResp struct {
	Seq     string         `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	Code    common.ErrCode `protobuf:"varint,2,opt,name=code,enum=common.ErrCode" json:"code,omitempty"`
	Message string         `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *UpdateAppInstanceResp) Reset()                    { *m = UpdateAppInstanceResp{} }
func (m *UpdateAppInstanceResp) String() string            { return proto.CompactTextString(m) }
func (*UpdateAppInstanceResp) ProtoMessage()               {}
func (*UpdateAppInstanceResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{141} }

func (m *UpdateAppInstanceResp) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *UpdateAppInstanceResp) GetCode() common.ErrCode {
	if m != nil {
		return m.Code
	}
	return common.ErrCode_E_OK
}

func (m *UpdateAppInstanceResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type CreateAppInstanceReleaseReq struct {
	Seq     string               `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	BizId   string               `protobuf:"bytes,2,opt,name=biz_id,json=bizId" json:"biz_id,omitempty"`
	AppId   string               `protobuf:"bytes,3,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	CloudId string               `protobuf:"bytes,4,opt,name=cloud_id,json=cloudId" json:"cloud_id,omitempty"`
	Ip      string               `protobuf:"bytes,5,opt,name=ip" json:"ip,omitempty"`
	Path    string               `protobuf:"bytes,6,opt,name=path" json:"path,omitempty"`
	Labels  string               `protobuf:"bytes,7,opt,name=labels" json:"labels,omitempty"`
	Infos   []*common.ReportInfo `protobuf:"bytes,8,rep,name=infos" json:"infos,omitempty"`
}

func (m *CreateAppInstanceReleaseReq) Reset()                    { *m = CreateAppInstanceReleaseReq{} }
func (m *CreateAppInstanceReleaseReq) String() string            { return proto.CompactTextString(m) }
func (*CreateAppInstanceReleaseReq) ProtoMessage()               {}
func (*CreateAppInstanceReleaseReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{142} }

func (m *CreateAppInstanceReleaseReq) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *CreateAppInstanceReleaseReq) GetBizId() string {
	if m != nil {
		return m.BizId
	}
	return ""
}

func (m *CreateAppInstanceReleaseReq) GetAppId() string {
	if m != nil {
		return m.AppId
	}
	return ""
}

func (m *CreateAppInstanceReleaseReq) GetCloudId() string {
	if m != nil {
		return m.CloudId
	}
	return ""
}

func (m *CreateAppInstanceReleaseReq) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *CreateAppInstanceReleaseReq) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *CreateAppInstanceReleaseReq) GetLabels() string {
	if m != nil {
		return m.Labels
	}
	return ""
}

func (m *CreateAppInstanceReleaseReq) GetInfos() []*common.ReportInfo {
	if m != nil {
		return m.Infos
	}
	return nil
}

type CreateAppInstanceReleaseResp struct {
	Seq     string         `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	Code    common.ErrCode `protobuf:"varint,2,opt,name=code,enum=common.ErrCode" json:"code,omitempty"`
	Message string         `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *CreateAppInstanceReleaseResp) Reset()                    { *m = CreateAppInstanceReleaseResp{} }
func (m *CreateAppInstanceReleaseResp) String() string            { return proto.CompactTextString(m) }
func (*CreateAppInstanceReleaseResp) ProtoMessage()               {}
func (*CreateAppInstanceReleaseResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{143} }

func (m *CreateAppInstanceReleaseResp) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *CreateAppInstanceReleaseResp) GetCode() common.ErrCode {
	if m != nil {
		return m.Code
	}
	return common.ErrCode_E_OK
}

func (m *CreateAppInstanceReleaseResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type QueryAppInstanceReleaseReq struct {
	Seq     string `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	BizId   string `protobuf:"bytes,2,opt,name=biz_id,json=bizId" json:"biz_id,omitempty"`
	AppId   string `protobuf:"bytes,3,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	CloudId string `protobuf:"bytes,4,opt,name=cloud_id,json=cloudId" json:"cloud_id,omitempty"`
	Ip      string `protobuf:"bytes,5,opt,name=ip" json:"ip,omitempty"`
	Path    string `protobuf:"bytes,6,opt,name=path" json:"path,omitempty"`
	CfgId   string `protobuf:"bytes,7,opt,name=cfg_id,json=cfgId" json:"cfg_id,omitempty"`
}

func (m *QueryAppInstanceReleaseReq) Reset()                    { *m = QueryAppInstanceReleaseReq{} }
func (m *QueryAppInstanceReleaseReq) String() string            { return proto.CompactTextString(m) }
func (*QueryAppInstanceReleaseReq) ProtoMessage()               {}
func (*QueryAppInstanceReleaseReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{144} }

func (m *QueryAppInstanceReleaseReq) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *QueryAppInstanceReleaseReq) GetBizId() string {
	if m != nil {
		return m.BizId
	}
	return ""
}

func (m *QueryAppInstanceReleaseReq) GetAppId() string {
	if m != nil {
		return m.AppId
	}
	return ""
}

func (m *QueryAppInstanceReleaseReq) GetCloudId() string {
	if m != nil {
		return m.CloudId
	}
	return ""
}

func (m *QueryAppInstanceReleaseReq) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *QueryAppInstanceReleaseReq) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *QueryAppInstanceReleaseReq) GetCfgId() string {
	if m != nil {
		return m.CfgId
	}
	return ""
}

type QueryAppInstanceReleaseResp struct {
	Seq     string                                `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	Code    common.ErrCode                        `protobuf:"varint,2,opt,name=code,enum=common.ErrCode" json:"code,omitempty"`
	Message string                                `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
	Data    *QueryAppInstanceReleaseResp_RespData `protobuf:"bytes,4,opt,name=data" json:"data,omitempty"`
}

func (m *QueryAppInstanceReleaseResp) Reset()                    { *m = QueryAppInstanceReleaseResp{} }
func (m *QueryAppInstanceReleaseResp) String() string            { return proto.CompactTextString(m) }
func (*QueryAppInstanceReleaseResp) ProtoMessage()               {}
func (*QueryAppInstanceReleaseResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{145} }

func (m *QueryAppInstanceReleaseResp) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *QueryAppInstanceReleaseResp) GetCode() common.ErrCode {
	if m != nil {
		return m.Code
	}
	return common.ErrCode_E_OK
}

func (m *QueryAppInstanceReleaseResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *QueryAppInstanceReleaseResp) GetData() *QueryAppInstanceReleaseResp_RespData {
	if m != nil {
		return m.Data
	}
	return nil
}

type QueryAppInstanceReleaseResp_RespData struct {
	ContentId      string `protobuf:"bytes,1,opt,name=content_id,json=contentId" json:"content_id,omitempty"`
	ContentSize    uint32 `protobuf:"varint,2,opt,name=content_size,json=contentSize" json:"content_size,omitempty"`
	ReleaseId      string `protobuf:"bytes,3,opt,name=release_id,json=releaseId" json:"release_id,omitempty"`
	CommitId       string `protobuf:"bytes,4,opt,name=commit_id,json=commitId" json:"commit_id,omitempty"`
	MultiReleaseId string `protobuf:"bytes,5,opt,name=multi_release_id,json=multiReleaseId" json:"multi_release_id,omitempty"`
	MultiCommitId  string `protobuf:"bytes,6,opt,name=multi_commit_id,json=multiCommitId" json:"multi_commit_id,omitempty"`
	ReleaseName    string `protobuf:"bytes,7,opt,name=release_name,json=releaseName" json:"release_name,omitempty"`
	Memo           string `protobuf:"bytes,8,opt,name=memo" json:"memo,omitempty"`
}

func (m *QueryAppInstanceReleaseResp_RespData) Reset()         { *m = QueryAppInstanceReleaseResp_RespData{} }
func (m *QueryAppInstanceReleaseResp_RespData) String() string { return proto.CompactTextString(m) }
func (*QueryAppInstanceReleaseResp_RespData) ProtoMessage()    {}
func (*QueryAppInstanceReleaseResp_RespData) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{145, 0}
}

func (m *QueryAppInstanceReleaseResp_RespData) GetContentId() string {
	if m != nil {
		return m.ContentId
	}
	return ""
}

func (m *QueryAppInstanceReleaseResp_RespData) GetContentSize() uint32 {
	if m != nil {
		return m.ContentSize
	}
	return 0
}

func (m *QueryAppInstanceReleaseResp_RespData) GetReleaseId() string {
	if m != nil {
		return m.ReleaseId
	}
	return ""
}

func (m *QueryAppInstanceReleaseResp_RespData) GetCommitId() string {
	if m != nil {
		return m.CommitId
	}
	return ""
}

func (m *QueryAppInstanceReleaseResp_RespData) GetMultiReleaseId() string {
	if m != nil {
		return m.MultiReleaseId
	}
	return ""
}

func (m *QueryAppInstanceReleaseResp_RespData) GetMultiCommitId() string {
	if m != nil {
		return m.MultiCommitId
	}
	return ""
}

func (m *QueryAppInstanceReleaseResp_RespData) GetReleaseName() string {
	if m != nil {
		return m.ReleaseName
	}
	return ""
}

func (m *QueryAppInstanceReleaseResp_RespData) GetMemo() string {
	if m != nil {
		return m.Memo
	}
	return ""
}

type QueryMatchedAppInstancesReq struct {
	Seq        string       `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	BizId      string       `protobuf:"bytes,2,opt,name=biz_id,json=bizId" json:"biz_id,omitempty"`
	AppId      string       `protobuf:"bytes,3,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	StrategyId string       `protobuf:"bytes,4,opt,name=strategy_id,json=strategyId" json:"strategy_id,omitempty"`
	Page       *common.Page `protobuf:"bytes,5,opt,name=page" json:"page,omitempty"`
}

func (m *QueryMatchedAppInstancesReq) Reset()                    { *m = QueryMatchedAppInstancesReq{} }
func (m *QueryMatchedAppInstancesReq) String() string            { return proto.CompactTextString(m) }
func (*QueryMatchedAppInstancesReq) ProtoMessage()               {}
func (*QueryMatchedAppInstancesReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{146} }

func (m *QueryMatchedAppInstancesReq) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *QueryMatchedAppInstancesReq) GetBizId() string {
	if m != nil {
		return m.BizId
	}
	return ""
}

func (m *QueryMatchedAppInstancesReq) GetAppId() string {
	if m != nil {
		return m.AppId
	}
	return ""
}

func (m *QueryMatchedAppInstancesReq) GetStrategyId() string {
	if m != nil {
		return m.StrategyId
	}
	return ""
}

func (m *QueryMatchedAppInstancesReq) GetPage() *common.Page {
	if m != nil {
		return m.Page
	}
	return nil
}

type QueryMatchedAppInstancesResp struct {
	Seq     string                                 `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	Code    common.ErrCode                         `protobuf:"varint,2,opt,name=code,enum=common.ErrCode" json:"code,omitempty"`
	Message string                                 `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
	Data    *QueryMatchedAppInstancesResp_RespData `protobuf:"bytes,4,opt,name=data" json:"data,omitempty"`
}

func (m *QueryMatchedAppInstancesResp) Reset()                    { *m = QueryMatchedAppInstancesResp{} }
func (m *QueryMatchedAppInstancesResp) String() string            { return proto.CompactTextString(m) }
func (*QueryMatchedAppInstancesResp) ProtoMessage()               {}
func (*QueryMatchedAppInstancesResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{147} }

func (m *QueryMatchedAppInstancesResp) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *QueryMatchedAppInstancesResp) GetCode() common.ErrCode {
	if m != nil {
		return m.Code
	}
	return common.ErrCode_E_OK
}

func (m *QueryMatchedAppInstancesResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *QueryMatchedAppInstancesResp) GetData() *QueryMatchedAppInstancesResp_RespData {
	if m != nil {
		return m.Data
	}
	return nil
}

type QueryMatchedAppInstancesResp_RespData struct {
	TotalCount uint32                `protobuf:"varint,1,opt,name=total_count,json=totalCount" json:"total_count,omitempty"`
	Info       []*common.AppInstance `protobuf:"bytes,2,rep,name=info" json:"info,omitempty"`
}

func (m *QueryMatchedAppInstancesResp_RespData) Reset()         { *m = QueryMatchedAppInstancesResp_RespData{} }
func (m *QueryMatchedAppInstancesResp_RespData) String() string { return proto.CompactTextString(m) }
func (*QueryMatchedAppInstancesResp_RespData) ProtoMessage()    {}
func (*QueryMatchedAppInstancesResp_RespData) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{147, 0}
}

func (m *QueryMatchedAppInstancesResp_RespData) GetTotalCount() uint32 {
	if m != nil {
		return m.TotalCount
	}
	return 0
}

func (m *QueryMatchedAppInstancesResp_RespData) GetInfo() []*common.AppInstance {
	if m != nil {
		return m.Info
	}
	return nil
}

type QueryEffectedAppInstancesReq struct {
	Seq       string       `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	BizId     string       `protobuf:"bytes,2,opt,name=biz_id,json=bizId" json:"biz_id,omitempty"`
	CfgId     string       `protobuf:"bytes,3,opt,name=cfg_id,json=cfgId" json:"cfg_id,omitempty"`
	ReleaseId string       `protobuf:"bytes,4,opt,name=release_id,json=releaseId" json:"release_id,omitempty"`
	Page      *common.Page `protobuf:"bytes,5,opt,name=page" json:"page,omitempty"`
}

func (m *QueryEffectedAppInstancesReq) Reset()                    { *m = QueryEffectedAppInstancesReq{} }
func (m *QueryEffectedAppInstancesReq) String() string            { return proto.CompactTextString(m) }
func (*QueryEffectedAppInstancesReq) ProtoMessage()               {}
func (*QueryEffectedAppInstancesReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{148} }

func (m *QueryEffectedAppInstancesReq) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *QueryEffectedAppInstancesReq) GetBizId() string {
	if m != nil {
		return m.BizId
	}
	return ""
}

func (m *QueryEffectedAppInstancesReq) GetCfgId() string {
	if m != nil {
		return m.CfgId
	}
	return ""
}

func (m *QueryEffectedAppInstancesReq) GetReleaseId() string {
	if m != nil {
		return m.ReleaseId
	}
	return ""
}

func (m *QueryEffectedAppInstancesReq) GetPage() *common.Page {
	if m != nil {
		return m.Page
	}
	return nil
}

type QueryEffectedAppInstancesResp struct {
	Seq     string                                  `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	Code    common.ErrCode                          `protobuf:"varint,2,opt,name=code,enum=common.ErrCode" json:"code,omitempty"`
	Message string                                  `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
	Data    *QueryEffectedAppInstancesResp_RespData `protobuf:"bytes,4,opt,name=data" json:"data,omitempty"`
}

func (m *QueryEffectedAppInstancesResp) Reset()         { *m = QueryEffectedAppInstancesResp{} }
func (m *QueryEffectedAppInstancesResp) String() string { return proto.CompactTextString(m) }
func (*QueryEffectedAppInstancesResp) ProtoMessage()    {}
func (*QueryEffectedAppInstancesResp) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{149}
}

func (m *QueryEffectedAppInstancesResp) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *QueryEffectedAppInstancesResp) GetCode() common.ErrCode {
	if m != nil {
		return m.Code
	}
	return common.ErrCode_E_OK
}

func (m *QueryEffectedAppInstancesResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *QueryEffectedAppInstancesResp) GetData() *QueryEffectedAppInstancesResp_RespData {
	if m != nil {
		return m.Data
	}
	return nil
}

type QueryEffectedAppInstancesResp_RespData struct {
	TotalCount uint32                       `protobuf:"varint,1,opt,name=total_count,json=totalCount" json:"total_count,omitempty"`
	Info       []*common.AppInstanceRelease `protobuf:"bytes,2,rep,name=info" json:"info,omitempty"`
}

func (m *QueryEffectedAppInstancesResp_RespData) Reset() {
	*m = QueryEffectedAppInstancesResp_RespData{}
}
func (m *QueryEffectedAppInstancesResp_RespData) String() string { return proto.CompactTextString(m) }
func (*QueryEffectedAppInstancesResp_RespData) ProtoMessage()    {}
func (*QueryEffectedAppInstancesResp_RespData) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{149, 0}
}

func (m *QueryEffectedAppInstancesResp_RespData) GetTotalCount() uint32 {
	if m != nil {
		return m.TotalCount
	}
	return 0
}

func (m *QueryEffectedAppInstancesResp_RespData) GetInfo() []*common.AppInstanceRelease {
	if m != nil {
		return m.Info
	}
	return nil
}

type CreateStrategyReq struct {
	Seq        string `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	BizId      string `protobuf:"bytes,2,opt,name=biz_id,json=bizId" json:"biz_id,omitempty"`
	AppId      string `protobuf:"bytes,3,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	StrategyId string `protobuf:"bytes,4,opt,name=strategy_id,json=strategyId" json:"strategy_id,omitempty"`
	Name       string `protobuf:"bytes,5,opt,name=name" json:"name,omitempty"`
	Content    string `protobuf:"bytes,6,opt,name=content" json:"content,omitempty"`
	Memo       string `protobuf:"bytes,7,opt,name=memo" json:"memo,omitempty"`
	Creator    string `protobuf:"bytes,8,opt,name=creator" json:"creator,omitempty"`
}

func (m *CreateStrategyReq) Reset()                    { *m = CreateStrategyReq{} }
func (m *CreateStrategyReq) String() string            { return proto.CompactTextString(m) }
func (*CreateStrategyReq) ProtoMessage()               {}
func (*CreateStrategyReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{150} }

func (m *CreateStrategyReq) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *CreateStrategyReq) GetBizId() string {
	if m != nil {
		return m.BizId
	}
	return ""
}

func (m *CreateStrategyReq) GetAppId() string {
	if m != nil {
		return m.AppId
	}
	return ""
}

func (m *CreateStrategyReq) GetStrategyId() string {
	if m != nil {
		return m.StrategyId
	}
	return ""
}

func (m *CreateStrategyReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CreateStrategyReq) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *CreateStrategyReq) GetMemo() string {
	if m != nil {
		return m.Memo
	}
	return ""
}

func (m *CreateStrategyReq) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

type CreateStrategyResp struct {
	Seq     string                       `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	Code    common.ErrCode               `protobuf:"varint,2,opt,name=code,enum=common.ErrCode" json:"code,omitempty"`
	Message string                       `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
	Data    *CreateStrategyResp_RespData `protobuf:"bytes,4,opt,name=data" json:"data,omitempty"`
}

func (m *CreateStrategyResp) Reset()                    { *m = CreateStrategyResp{} }
func (m *CreateStrategyResp) String() string            { return proto.CompactTextString(m) }
func (*CreateStrategyResp) ProtoMessage()               {}
func (*CreateStrategyResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{151} }

func (m *CreateStrategyResp) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *CreateStrategyResp) GetCode() common.ErrCode {
	if m != nil {
		return m.Code
	}
	return common.ErrCode_E_OK
}

func (m *CreateStrategyResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *CreateStrategyResp) GetData() *CreateStrategyResp_RespData {
	if m != nil {
		return m.Data
	}
	return nil
}

type CreateStrategyResp_RespData struct {
	StrategyId string `protobuf:"bytes,1,opt,name=strategy_id,json=strategyId" json:"strategy_id,omitempty"`
}

func (m *CreateStrategyResp_RespData) Reset()         { *m = CreateStrategyResp_RespData{} }
func (m *CreateStrategyResp_RespData) String() string { return proto.CompactTextString(m) }
func (*CreateStrategyResp_RespData) ProtoMessage()    {}
func (*CreateStrategyResp_RespData) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{151, 0}
}

func (m *CreateStrategyResp_RespData) GetStrategyId() string {
	if m != nil {
		return m.StrategyId
	}
	return ""
}

type QueryStrategyReq struct {
	Seq        string `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	BizId      string `protobuf:"bytes,2,opt,name=biz_id,json=bizId" json:"biz_id,omitempty"`
	AppId      string `protobuf:"bytes,3,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	StrategyId string `protobuf:"bytes,4,opt,name=strategy_id,json=strategyId" json:"strategy_id,omitempty"`
	Name       string `protobuf:"bytes,5,opt,name=name" json:"name,omitempty"`
}

func (m *QueryStrategyReq) Reset()                    { *m = QueryStrategyReq{} }
func (m *QueryStrategyReq) String() string            { return proto.CompactTextString(m) }
func (*QueryStrategyReq) ProtoMessage()               {}
func (*QueryStrategyReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{152} }

func (m *QueryStrategyReq) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *QueryStrategyReq) GetBizId() string {
	if m != nil {
		return m.BizId
	}
	return ""
}

func (m *QueryStrategyReq) GetAppId() string {
	if m != nil {
		return m.AppId
	}
	return ""
}

func (m *QueryStrategyReq) GetStrategyId() string {
	if m != nil {
		return m.StrategyId
	}
	return ""
}

func (m *QueryStrategyReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type QueryStrategyResp struct {
	Seq     string           `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	Code    common.ErrCode   `protobuf:"varint,2,opt,name=code,enum=common.ErrCode" json:"code,omitempty"`
	Message string           `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
	Data    *common.Strategy `protobuf:"bytes,4,opt,name=data" json:"data,omitempty"`
}

func (m *QueryStrategyResp) Reset()                    { *m = QueryStrategyResp{} }
func (m *QueryStrategyResp) String() string            { return proto.CompactTextString(m) }
func (*QueryStrategyResp) ProtoMessage()               {}
func (*QueryStrategyResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{153} }

func (m *QueryStrategyResp) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *QueryStrategyResp) GetCode() common.ErrCode {
	if m != nil {
		return m.Code
	}
	return common.ErrCode_E_OK
}

func (m *QueryStrategyResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *QueryStrategyResp) GetData() *common.Strategy {
	if m != nil {
		return m.Data
	}
	return nil
}

type QueryStrategyListReq struct {
	Seq     string       `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	BizId   string       `protobuf:"bytes,2,opt,name=biz_id,json=bizId" json:"biz_id,omitempty"`
	AppId   string       `protobuf:"bytes,3,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	AppName string       `protobuf:"bytes,4,opt,name=app_name,json=appName" json:"app_name,omitempty"`
	Page    *common.Page `protobuf:"bytes,5,opt,name=page" json:"page,omitempty"`
}

func (m *QueryStrategyListReq) Reset()                    { *m = QueryStrategyListReq{} }
func (m *QueryStrategyListReq) String() string            { return proto.CompactTextString(m) }
func (*QueryStrategyListReq) ProtoMessage()               {}
func (*QueryStrategyListReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{154} }

func (m *QueryStrategyListReq) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *QueryStrategyListReq) GetBizId() string {
	if m != nil {
		return m.BizId
	}
	return ""
}

func (m *QueryStrategyListReq) GetAppId() string {
	if m != nil {
		return m.AppId
	}
	return ""
}

func (m *QueryStrategyListReq) GetAppName() string {
	if m != nil {
		return m.AppName
	}
	return ""
}

func (m *QueryStrategyListReq) GetPage() *common.Page {
	if m != nil {
		return m.Page
	}
	return nil
}

type QueryStrategyListResp struct {
	Seq     string                          `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	Code    common.ErrCode                  `protobuf:"varint,2,opt,name=code,enum=common.ErrCode" json:"code,omitempty"`
	Message string                          `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
	Data    *QueryStrategyListResp_RespData `protobuf:"bytes,4,opt,name=data" json:"data,omitempty"`
}

func (m *QueryStrategyListResp) Reset()                    { *m = QueryStrategyListResp{} }
func (m *QueryStrategyListResp) String() string            { return proto.CompactTextString(m) }
func (*QueryStrategyListResp) ProtoMessage()               {}
func (*QueryStrategyListResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{155} }

func (m *QueryStrategyListResp) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *QueryStrategyListResp) GetCode() common.ErrCode {
	if m != nil {
		return m.Code
	}
	return common.ErrCode_E_OK
}

func (m *QueryStrategyListResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *QueryStrategyListResp) GetData() *QueryStrategyListResp_RespData {
	if m != nil {
		return m.Data
	}
	return nil
}

type QueryStrategyListResp_RespData struct {
	TotalCount uint32             `protobuf:"varint,1,opt,name=total_count,json=totalCount" json:"total_count,omitempty"`
	Info       []*common.Strategy `protobuf:"bytes,2,rep,name=info" json:"info,omitempty"`
}

func (m *QueryStrategyListResp_RespData) Reset()         { *m = QueryStrategyListResp_RespData{} }
func (m *QueryStrategyListResp_RespData) String() string { return proto.CompactTextString(m) }
func (*QueryStrategyListResp_RespData) ProtoMessage()    {}
func (*QueryStrategyListResp_RespData) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{155, 0}
}

func (m *QueryStrategyListResp_RespData) GetTotalCount() uint32 {
	if m != nil {
		return m.TotalCount
	}
	return 0
}

func (m *QueryStrategyListResp_RespData) GetInfo() []*common.Strategy {
	if m != nil {
		return m.Info
	}
	return nil
}

type DeleteStrategyReq struct {
	Seq        string `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	BizId      string `protobuf:"bytes,2,opt,name=biz_id,json=bizId" json:"biz_id,omitempty"`
	StrategyId string `protobuf:"bytes,3,opt,name=strategy_id,json=strategyId" json:"strategy_id,omitempty"`
	Operator   string `protobuf:"bytes,4,opt,name=operator" json:"operator,omitempty"`
}

func (m *DeleteStrategyReq) Reset()                    { *m = DeleteStrategyReq{} }
func (m *DeleteStrategyReq) String() string            { return proto.CompactTextString(m) }
func (*DeleteStrategyReq) ProtoMessage()               {}
func (*DeleteStrategyReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{156} }

func (m *DeleteStrategyReq) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *DeleteStrategyReq) GetBizId() string {
	if m != nil {
		return m.BizId
	}
	return ""
}

func (m *DeleteStrategyReq) GetStrategyId() string {
	if m != nil {
		return m.StrategyId
	}
	return ""
}

func (m *DeleteStrategyReq) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

type DeleteStrategyResp struct {
	Seq     string         `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	Code    common.ErrCode `protobuf:"varint,2,opt,name=code,enum=common.ErrCode" json:"code,omitempty"`
	Message string         `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *DeleteStrategyResp) Reset()                    { *m = DeleteStrategyResp{} }
func (m *DeleteStrategyResp) String() string            { return proto.CompactTextString(m) }
func (*DeleteStrategyResp) ProtoMessage()               {}
func (*DeleteStrategyResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{157} }

func (m *DeleteStrategyResp) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *DeleteStrategyResp) GetCode() common.ErrCode {
	if m != nil {
		return m.Code
	}
	return common.ErrCode_E_OK
}

func (m *DeleteStrategyResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type CreateProcAttrReq struct {
	Seq      string `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	CloudId  string `protobuf:"bytes,2,opt,name=cloud_id,json=cloudId" json:"cloud_id,omitempty"`
	Ip       string `protobuf:"bytes,3,opt,name=ip" json:"ip,omitempty"`
	BizId    string `protobuf:"bytes,4,opt,name=biz_id,json=bizId" json:"biz_id,omitempty"`
	AppId    string `protobuf:"bytes,5,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	Labels   string `protobuf:"bytes,6,opt,name=labels" json:"labels,omitempty"`
	Path     string `protobuf:"bytes,7,opt,name=path" json:"path,omitempty"`
	Creator  string `protobuf:"bytes,8,opt,name=creator" json:"creator,omitempty"`
	Memo     string `protobuf:"bytes,9,opt,name=memo" json:"memo,omitempty"`
	Override bool   `protobuf:"varint,10,opt,name=override" json:"override,omitempty"`
}

func (m *CreateProcAttrReq) Reset()                    { *m = CreateProcAttrReq{} }
func (m *CreateProcAttrReq) String() string            { return proto.CompactTextString(m) }
func (*CreateProcAttrReq) ProtoMessage()               {}
func (*CreateProcAttrReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{158} }

func (m *CreateProcAttrReq) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *CreateProcAttrReq) GetCloudId() string {
	if m != nil {
		return m.CloudId
	}
	return ""
}

func (m *CreateProcAttrReq) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *CreateProcAttrReq) GetBizId() string {
	if m != nil {
		return m.BizId
	}
	return ""
}

func (m *CreateProcAttrReq) GetAppId() string {
	if m != nil {
		return m.AppId
	}
	return ""
}

func (m *CreateProcAttrReq) GetLabels() string {
	if m != nil {
		return m.Labels
	}
	return ""
}

func (m *CreateProcAttrReq) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *CreateProcAttrReq) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *CreateProcAttrReq) GetMemo() string {
	if m != nil {
		return m.Memo
	}
	return ""
}

func (m *CreateProcAttrReq) GetOverride() bool {
	if m != nil {
		return m.Override
	}
	return false
}

type CreateProcAttrResp struct {
	Seq     string         `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	Code    common.ErrCode `protobuf:"varint,2,opt,name=code,enum=common.ErrCode" json:"code,omitempty"`
	Message string         `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *CreateProcAttrResp) Reset()                    { *m = CreateProcAttrResp{} }
func (m *CreateProcAttrResp) String() string            { return proto.CompactTextString(m) }
func (*CreateProcAttrResp) ProtoMessage()               {}
func (*CreateProcAttrResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{159} }

func (m *CreateProcAttrResp) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *CreateProcAttrResp) GetCode() common.ErrCode {
	if m != nil {
		return m.Code
	}
	return common.ErrCode_E_OK
}

func (m *CreateProcAttrResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type QueryHostProcAttrReq struct {
	Seq     string `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	CloudId string `protobuf:"bytes,2,opt,name=cloud_id,json=cloudId" json:"cloud_id,omitempty"`
	Ip      string `protobuf:"bytes,3,opt,name=ip" json:"ip,omitempty"`
	BizId   string `protobuf:"bytes,4,opt,name=biz_id,json=bizId" json:"biz_id,omitempty"`
	AppId   string `protobuf:"bytes,5,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	Path    string `protobuf:"bytes,6,opt,name=path" json:"path,omitempty"`
}

func (m *QueryHostProcAttrReq) Reset()                    { *m = QueryHostProcAttrReq{} }
func (m *QueryHostProcAttrReq) String() string            { return proto.CompactTextString(m) }
func (*QueryHostProcAttrReq) ProtoMessage()               {}
func (*QueryHostProcAttrReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{160} }

func (m *QueryHostProcAttrReq) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *QueryHostProcAttrReq) GetCloudId() string {
	if m != nil {
		return m.CloudId
	}
	return ""
}

func (m *QueryHostProcAttrReq) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *QueryHostProcAttrReq) GetBizId() string {
	if m != nil {
		return m.BizId
	}
	return ""
}

func (m *QueryHostProcAttrReq) GetAppId() string {
	if m != nil {
		return m.AppId
	}
	return ""
}

func (m *QueryHostProcAttrReq) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

type QueryHostProcAttrResp struct {
	Seq     string           `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	Code    common.ErrCode   `protobuf:"varint,2,opt,name=code,enum=common.ErrCode" json:"code,omitempty"`
	Message string           `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
	Data    *common.ProcAttr `protobuf:"bytes,4,opt,name=data" json:"data,omitempty"`
}

func (m *QueryHostProcAttrResp) Reset()                    { *m = QueryHostProcAttrResp{} }
func (m *QueryHostProcAttrResp) String() string            { return proto.CompactTextString(m) }
func (*QueryHostProcAttrResp) ProtoMessage()               {}
func (*QueryHostProcAttrResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{161} }

func (m *QueryHostProcAttrResp) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *QueryHostProcAttrResp) GetCode() common.ErrCode {
	if m != nil {
		return m.Code
	}
	return common.ErrCode_E_OK
}

func (m *QueryHostProcAttrResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *QueryHostProcAttrResp) GetData() *common.ProcAttr {
	if m != nil {
		return m.Data
	}
	return nil
}

type QueryHostProcAttrListReq struct {
	Seq     string       `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	CloudId string       `protobuf:"bytes,2,opt,name=cloud_id,json=cloudId" json:"cloud_id,omitempty"`
	Ip      string       `protobuf:"bytes,3,opt,name=ip" json:"ip,omitempty"`
	Page    *common.Page `protobuf:"bytes,4,opt,name=page" json:"page,omitempty"`
}

func (m *QueryHostProcAttrListReq) Reset()                    { *m = QueryHostProcAttrListReq{} }
func (m *QueryHostProcAttrListReq) String() string            { return proto.CompactTextString(m) }
func (*QueryHostProcAttrListReq) ProtoMessage()               {}
func (*QueryHostProcAttrListReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{162} }

func (m *QueryHostProcAttrListReq) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *QueryHostProcAttrListReq) GetCloudId() string {
	if m != nil {
		return m.CloudId
	}
	return ""
}

func (m *QueryHostProcAttrListReq) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *QueryHostProcAttrListReq) GetPage() *common.Page {
	if m != nil {
		return m.Page
	}
	return nil
}

type QueryHostProcAttrListResp struct {
	Seq     string                              `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	Code    common.ErrCode                      `protobuf:"varint,2,opt,name=code,enum=common.ErrCode" json:"code,omitempty"`
	Message string                              `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
	Data    *QueryHostProcAttrListResp_RespData `protobuf:"bytes,4,opt,name=data" json:"data,omitempty"`
}

func (m *QueryHostProcAttrListResp) Reset()                    { *m = QueryHostProcAttrListResp{} }
func (m *QueryHostProcAttrListResp) String() string            { return proto.CompactTextString(m) }
func (*QueryHostProcAttrListResp) ProtoMessage()               {}
func (*QueryHostProcAttrListResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{163} }

func (m *QueryHostProcAttrListResp) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *QueryHostProcAttrListResp) GetCode() common.ErrCode {
	if m != nil {
		return m.Code
	}
	return common.ErrCode_E_OK
}

func (m *QueryHostProcAttrListResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *QueryHostProcAttrListResp) GetData() *QueryHostProcAttrListResp_RespData {
	if m != nil {
		return m.Data
	}
	return nil
}

type QueryHostProcAttrListResp_RespData struct {
	TotalCount uint32             `protobuf:"varint,1,opt,name=total_count,json=totalCount" json:"total_count,omitempty"`
	Info       []*common.ProcAttr `protobuf:"bytes,2,rep,name=info" json:"info,omitempty"`
}

func (m *QueryHostProcAttrListResp_RespData) Reset()         { *m = QueryHostProcAttrListResp_RespData{} }
func (m *QueryHostProcAttrListResp_RespData) String() string { return proto.CompactTextString(m) }
func (*QueryHostProcAttrListResp_RespData) ProtoMessage()    {}
func (*QueryHostProcAttrListResp_RespData) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{163, 0}
}

func (m *QueryHostProcAttrListResp_RespData) GetTotalCount() uint32 {
	if m != nil {
		return m.TotalCount
	}
	return 0
}

func (m *QueryHostProcAttrListResp_RespData) GetInfo() []*common.ProcAttr {
	if m != nil {
		return m.Info
	}
	return nil
}

type QueryAppProcAttrListReq struct {
	Seq   string       `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	BizId string       `protobuf:"bytes,2,opt,name=biz_id,json=bizId" json:"biz_id,omitempty"`
	AppId string       `protobuf:"bytes,3,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	Page  *common.Page `protobuf:"bytes,4,opt,name=page" json:"page,omitempty"`
}

func (m *QueryAppProcAttrListReq) Reset()                    { *m = QueryAppProcAttrListReq{} }
func (m *QueryAppProcAttrListReq) String() string            { return proto.CompactTextString(m) }
func (*QueryAppProcAttrListReq) ProtoMessage()               {}
func (*QueryAppProcAttrListReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{164} }

func (m *QueryAppProcAttrListReq) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *QueryAppProcAttrListReq) GetBizId() string {
	if m != nil {
		return m.BizId
	}
	return ""
}

func (m *QueryAppProcAttrListReq) GetAppId() string {
	if m != nil {
		return m.AppId
	}
	return ""
}

func (m *QueryAppProcAttrListReq) GetPage() *common.Page {
	if m != nil {
		return m.Page
	}
	return nil
}

type QueryAppProcAttrListResp struct {
	Seq     string                             `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	Code    common.ErrCode                     `protobuf:"varint,2,opt,name=code,enum=common.ErrCode" json:"code,omitempty"`
	Message string                             `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
	Data    *QueryAppProcAttrListResp_RespData `protobuf:"bytes,4,opt,name=data" json:"data,omitempty"`
}

func (m *QueryAppProcAttrListResp) Reset()                    { *m = QueryAppProcAttrListResp{} }
func (m *QueryAppProcAttrListResp) String() string            { return proto.CompactTextString(m) }
func (*QueryAppProcAttrListResp) ProtoMessage()               {}
func (*QueryAppProcAttrListResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{165} }

func (m *QueryAppProcAttrListResp) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *QueryAppProcAttrListResp) GetCode() common.ErrCode {
	if m != nil {
		return m.Code
	}
	return common.ErrCode_E_OK
}

func (m *QueryAppProcAttrListResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *QueryAppProcAttrListResp) GetData() *QueryAppProcAttrListResp_RespData {
	if m != nil {
		return m.Data
	}
	return nil
}

type QueryAppProcAttrListResp_RespData struct {
	TotalCount uint32             `protobuf:"varint,1,opt,name=total_count,json=totalCount" json:"total_count,omitempty"`
	Info       []*common.ProcAttr `protobuf:"bytes,2,rep,name=info" json:"info,omitempty"`
}

func (m *QueryAppProcAttrListResp_RespData) Reset()         { *m = QueryAppProcAttrListResp_RespData{} }
func (m *QueryAppProcAttrListResp_RespData) String() string { return proto.CompactTextString(m) }
func (*QueryAppProcAttrListResp_RespData) ProtoMessage()    {}
func (*QueryAppProcAttrListResp_RespData) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{165, 0}
}

func (m *QueryAppProcAttrListResp_RespData) GetTotalCount() uint32 {
	if m != nil {
		return m.TotalCount
	}
	return 0
}

func (m *QueryAppProcAttrListResp_RespData) GetInfo() []*common.ProcAttr {
	if m != nil {
		return m.Info
	}
	return nil
}

type UpdateProcAttrReq struct {
	Seq      string `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	CloudId  string `protobuf:"bytes,2,opt,name=cloud_id,json=cloudId" json:"cloud_id,omitempty"`
	Ip       string `protobuf:"bytes,3,opt,name=ip" json:"ip,omitempty"`
	BizId    string `protobuf:"bytes,4,opt,name=biz_id,json=bizId" json:"biz_id,omitempty"`
	AppId    string `protobuf:"bytes,5,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	Path     string `protobuf:"bytes,6,opt,name=path" json:"path,omitempty"`
	Labels   string `protobuf:"bytes,7,opt,name=labels" json:"labels,omitempty"`
	Memo     string `protobuf:"bytes,8,opt,name=memo" json:"memo,omitempty"`
	Operator string `protobuf:"bytes,9,opt,name=operator" json:"operator,omitempty"`
}

func (m *UpdateProcAttrReq) Reset()                    { *m = UpdateProcAttrReq{} }
func (m *UpdateProcAttrReq) String() string            { return proto.CompactTextString(m) }
func (*UpdateProcAttrReq) ProtoMessage()               {}
func (*UpdateProcAttrReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{166} }

func (m *UpdateProcAttrReq) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *UpdateProcAttrReq) GetCloudId() string {
	if m != nil {
		return m.CloudId
	}
	return ""
}

func (m *UpdateProcAttrReq) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *UpdateProcAttrReq) GetBizId() string {
	if m != nil {
		return m.BizId
	}
	return ""
}

func (m *UpdateProcAttrReq) GetAppId() string {
	if m != nil {
		return m.AppId
	}
	return ""
}

func (m *UpdateProcAttrReq) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *UpdateProcAttrReq) GetLabels() string {
	if m != nil {
		return m.Labels
	}
	return ""
}

func (m *UpdateProcAttrReq) GetMemo() string {
	if m != nil {
		return m.Memo
	}
	return ""
}

func (m *UpdateProcAttrReq) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

type UpdateProcAttrResp struct {
	Seq     string         `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	Code    common.ErrCode `protobuf:"varint,2,opt,name=code,enum=common.ErrCode" json:"code,omitempty"`
	Message string         `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *UpdateProcAttrResp) Reset()                    { *m = UpdateProcAttrResp{} }
func (m *UpdateProcAttrResp) String() string            { return proto.CompactTextString(m) }
func (*UpdateProcAttrResp) ProtoMessage()               {}
func (*UpdateProcAttrResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{167} }

func (m *UpdateProcAttrResp) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *UpdateProcAttrResp) GetCode() common.ErrCode {
	if m != nil {
		return m.Code
	}
	return common.ErrCode_E_OK
}

func (m *UpdateProcAttrResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type DeleteProcAttrReq struct {
	Seq      string `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	CloudId  string `protobuf:"bytes,2,opt,name=cloud_id,json=cloudId" json:"cloud_id,omitempty"`
	Ip       string `protobuf:"bytes,3,opt,name=ip" json:"ip,omitempty"`
	BizId    string `protobuf:"bytes,4,opt,name=biz_id,json=bizId" json:"biz_id,omitempty"`
	AppId    string `protobuf:"bytes,5,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	Path     string `protobuf:"bytes,6,opt,name=path" json:"path,omitempty"`
	Operator string `protobuf:"bytes,7,opt,name=operator" json:"operator,omitempty"`
}

func (m *DeleteProcAttrReq) Reset()                    { *m = DeleteProcAttrReq{} }
func (m *DeleteProcAttrReq) String() string            { return proto.CompactTextString(m) }
func (*DeleteProcAttrReq) ProtoMessage()               {}
func (*DeleteProcAttrReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{168} }

func (m *DeleteProcAttrReq) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *DeleteProcAttrReq) GetCloudId() string {
	if m != nil {
		return m.CloudId
	}
	return ""
}

func (m *DeleteProcAttrReq) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *DeleteProcAttrReq) GetBizId() string {
	if m != nil {
		return m.BizId
	}
	return ""
}

func (m *DeleteProcAttrReq) GetAppId() string {
	if m != nil {
		return m.AppId
	}
	return ""
}

func (m *DeleteProcAttrReq) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *DeleteProcAttrReq) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

type DeleteProcAttrResp struct {
	Seq     string         `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	Code    common.ErrCode `protobuf:"varint,2,opt,name=code,enum=common.ErrCode" json:"code,omitempty"`
	Message string         `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *DeleteProcAttrResp) Reset()                    { *m = DeleteProcAttrResp{} }
func (m *DeleteProcAttrResp) String() string            { return proto.CompactTextString(m) }
func (*DeleteProcAttrResp) ProtoMessage()               {}
func (*DeleteProcAttrResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{169} }

func (m *DeleteProcAttrResp) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *DeleteProcAttrResp) GetCode() common.ErrCode {
	if m != nil {
		return m.Code
	}
	return common.ErrCode_E_OK
}

func (m *DeleteProcAttrResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type InitShardingDBReq struct {
	Seq string `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
}

func (m *InitShardingDBReq) Reset()                    { *m = InitShardingDBReq{} }
func (m *InitShardingDBReq) String() string            { return proto.CompactTextString(m) }
func (*InitShardingDBReq) ProtoMessage()               {}
func (*InitShardingDBReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{170} }

func (m *InitShardingDBReq) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

type InitShardingDBResp struct {
	Seq     string         `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	Code    common.ErrCode `protobuf:"varint,2,opt,name=code,enum=common.ErrCode" json:"code,omitempty"`
	Message string         `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *InitShardingDBResp) Reset()                    { *m = InitShardingDBResp{} }
func (m *InitShardingDBResp) String() string            { return proto.CompactTextString(m) }
func (*InitShardingDBResp) ProtoMessage()               {}
func (*InitShardingDBResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{171} }

func (m *InitShardingDBResp) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *InitShardingDBResp) GetCode() common.ErrCode {
	if m != nil {
		return m.Code
	}
	return common.ErrCode_E_OK
}

func (m *InitShardingDBResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type CreateShardingDBReq struct {
	Seq      string `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	DbId     string `protobuf:"bytes,2,opt,name=db_id,json=dbId" json:"db_id,omitempty"`
	Host     string `protobuf:"bytes,3,opt,name=host" json:"host,omitempty"`
	Port     int32  `protobuf:"varint,4,opt,name=port" json:"port,omitempty"`
	User     string `protobuf:"bytes,5,opt,name=user" json:"user,omitempty"`
	Password string `protobuf:"bytes,6,opt,name=password" json:"password,omitempty"`
	Memo     string `protobuf:"bytes,7,opt,name=memo" json:"memo,omitempty"`
	State    int32  `protobuf:"varint,8,opt,name=state" json:"state,omitempty"`
}

func (m *CreateShardingDBReq) Reset()                    { *m = CreateShardingDBReq{} }
func (m *CreateShardingDBReq) String() string            { return proto.CompactTextString(m) }
func (*CreateShardingDBReq) ProtoMessage()               {}
func (*CreateShardingDBReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{172} }

func (m *CreateShardingDBReq) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *CreateShardingDBReq) GetDbId() string {
	if m != nil {
		return m.DbId
	}
	return ""
}

func (m *CreateShardingDBReq) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *CreateShardingDBReq) GetPort() int32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *CreateShardingDBReq) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

func (m *CreateShardingDBReq) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *CreateShardingDBReq) GetMemo() string {
	if m != nil {
		return m.Memo
	}
	return ""
}

func (m *CreateShardingDBReq) GetState() int32 {
	if m != nil {
		return m.State
	}
	return 0
}

type CreateShardingDBResp struct {
	Seq     string         `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	Code    common.ErrCode `protobuf:"varint,2,opt,name=code,enum=common.ErrCode" json:"code,omitempty"`
	Message string         `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *CreateShardingDBResp) Reset()                    { *m = CreateShardingDBResp{} }
func (m *CreateShardingDBResp) String() string            { return proto.CompactTextString(m) }
func (*CreateShardingDBResp) ProtoMessage()               {}
func (*CreateShardingDBResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{173} }

func (m *CreateShardingDBResp) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *CreateShardingDBResp) GetCode() common.ErrCode {
	if m != nil {
		return m.Code
	}
	return common.ErrCode_E_OK
}

func (m *CreateShardingDBResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type QueryShardingDBReq struct {
	Seq  string `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	DbId string `protobuf:"bytes,2,opt,name=db_id,json=dbId" json:"db_id,omitempty"`
}

func (m *QueryShardingDBReq) Reset()                    { *m = QueryShardingDBReq{} }
func (m *QueryShardingDBReq) String() string            { return proto.CompactTextString(m) }
func (*QueryShardingDBReq) ProtoMessage()               {}
func (*QueryShardingDBReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{174} }

func (m *QueryShardingDBReq) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *QueryShardingDBReq) GetDbId() string {
	if m != nil {
		return m.DbId
	}
	return ""
}

type QueryShardingDBResp struct {
	Seq     string             `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	Code    common.ErrCode     `protobuf:"varint,2,opt,name=code,enum=common.ErrCode" json:"code,omitempty"`
	Message string             `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
	Data    *common.ShardingDB `protobuf:"bytes,4,opt,name=data" json:"data,omitempty"`
}

func (m *QueryShardingDBResp) Reset()                    { *m = QueryShardingDBResp{} }
func (m *QueryShardingDBResp) String() string            { return proto.CompactTextString(m) }
func (*QueryShardingDBResp) ProtoMessage()               {}
func (*QueryShardingDBResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{175} }

func (m *QueryShardingDBResp) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *QueryShardingDBResp) GetCode() common.ErrCode {
	if m != nil {
		return m.Code
	}
	return common.ErrCode_E_OK
}

func (m *QueryShardingDBResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *QueryShardingDBResp) GetData() *common.ShardingDB {
	if m != nil {
		return m.Data
	}
	return nil
}

type QueryShardingDBListReq struct {
	Seq string `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
}

func (m *QueryShardingDBListReq) Reset()                    { *m = QueryShardingDBListReq{} }
func (m *QueryShardingDBListReq) String() string            { return proto.CompactTextString(m) }
func (*QueryShardingDBListReq) ProtoMessage()               {}
func (*QueryShardingDBListReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{176} }

func (m *QueryShardingDBListReq) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

type QueryShardingDBListResp struct {
	Seq     string                            `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	Code    common.ErrCode                    `protobuf:"varint,2,opt,name=code,enum=common.ErrCode" json:"code,omitempty"`
	Message string                            `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
	Data    *QueryShardingDBListResp_RespData `protobuf:"bytes,4,opt,name=data" json:"data,omitempty"`
}

func (m *QueryShardingDBListResp) Reset()                    { *m = QueryShardingDBListResp{} }
func (m *QueryShardingDBListResp) String() string            { return proto.CompactTextString(m) }
func (*QueryShardingDBListResp) ProtoMessage()               {}
func (*QueryShardingDBListResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{177} }

func (m *QueryShardingDBListResp) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *QueryShardingDBListResp) GetCode() common.ErrCode {
	if m != nil {
		return m.Code
	}
	return common.ErrCode_E_OK
}

func (m *QueryShardingDBListResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *QueryShardingDBListResp) GetData() *QueryShardingDBListResp_RespData {
	if m != nil {
		return m.Data
	}
	return nil
}

type QueryShardingDBListResp_RespData struct {
	Info []*common.ShardingDB `protobuf:"bytes,1,rep,name=info" json:"info,omitempty"`
}

func (m *QueryShardingDBListResp_RespData) Reset()         { *m = QueryShardingDBListResp_RespData{} }
func (m *QueryShardingDBListResp_RespData) String() string { return proto.CompactTextString(m) }
func (*QueryShardingDBListResp_RespData) ProtoMessage()    {}
func (*QueryShardingDBListResp_RespData) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{177, 0}
}

func (m *QueryShardingDBListResp_RespData) GetInfo() []*common.ShardingDB {
	if m != nil {
		return m.Info
	}
	return nil
}

type UpdateShardingDBReq struct {
	Seq      string `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	DbId     string `protobuf:"bytes,2,opt,name=db_id,json=dbId" json:"db_id,omitempty"`
	Host     string `protobuf:"bytes,3,opt,name=host" json:"host,omitempty"`
	Port     int32  `protobuf:"varint,4,opt,name=port" json:"port,omitempty"`
	User     string `protobuf:"bytes,5,opt,name=user" json:"user,omitempty"`
	Password string `protobuf:"bytes,6,opt,name=password" json:"password,omitempty"`
	Memo     string `protobuf:"bytes,7,opt,name=memo" json:"memo,omitempty"`
	State    int32  `protobuf:"varint,8,opt,name=state" json:"state,omitempty"`
}

func (m *UpdateShardingDBReq) Reset()                    { *m = UpdateShardingDBReq{} }
func (m *UpdateShardingDBReq) String() string            { return proto.CompactTextString(m) }
func (*UpdateShardingDBReq) ProtoMessage()               {}
func (*UpdateShardingDBReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{178} }

func (m *UpdateShardingDBReq) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *UpdateShardingDBReq) GetDbId() string {
	if m != nil {
		return m.DbId
	}
	return ""
}

func (m *UpdateShardingDBReq) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *UpdateShardingDBReq) GetPort() int32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *UpdateShardingDBReq) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

func (m *UpdateShardingDBReq) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *UpdateShardingDBReq) GetMemo() string {
	if m != nil {
		return m.Memo
	}
	return ""
}

func (m *UpdateShardingDBReq) GetState() int32 {
	if m != nil {
		return m.State
	}
	return 0
}

type UpdateShardingDBResp struct {
	Seq     string         `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	Code    common.ErrCode `protobuf:"varint,2,opt,name=code,enum=common.ErrCode" json:"code,omitempty"`
	Message string         `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *UpdateShardingDBResp) Reset()                    { *m = UpdateShardingDBResp{} }
func (m *UpdateShardingDBResp) String() string            { return proto.CompactTextString(m) }
func (*UpdateShardingDBResp) ProtoMessage()               {}
func (*UpdateShardingDBResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{179} }

func (m *UpdateShardingDBResp) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *UpdateShardingDBResp) GetCode() common.ErrCode {
	if m != nil {
		return m.Code
	}
	return common.ErrCode_E_OK
}

func (m *UpdateShardingDBResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type CreateShardingReq struct {
	Seq    string `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	Key    string `protobuf:"bytes,2,opt,name=key" json:"key,omitempty"`
	DbId   string `protobuf:"bytes,3,opt,name=db_id,json=dbId" json:"db_id,omitempty"`
	DbName string `protobuf:"bytes,4,opt,name=db_name,json=dbName" json:"db_name,omitempty"`
	Memo   string `protobuf:"bytes,5,opt,name=memo" json:"memo,omitempty"`
	State  int32  `protobuf:"varint,6,opt,name=state" json:"state,omitempty"`
}

func (m *CreateShardingReq) Reset()                    { *m = CreateShardingReq{} }
func (m *CreateShardingReq) String() string            { return proto.CompactTextString(m) }
func (*CreateShardingReq) ProtoMessage()               {}
func (*CreateShardingReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{180} }

func (m *CreateShardingReq) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *CreateShardingReq) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *CreateShardingReq) GetDbId() string {
	if m != nil {
		return m.DbId
	}
	return ""
}

func (m *CreateShardingReq) GetDbName() string {
	if m != nil {
		return m.DbName
	}
	return ""
}

func (m *CreateShardingReq) GetMemo() string {
	if m != nil {
		return m.Memo
	}
	return ""
}

func (m *CreateShardingReq) GetState() int32 {
	if m != nil {
		return m.State
	}
	return 0
}

type CreateShardingResp struct {
	Seq     string         `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	Code    common.ErrCode `protobuf:"varint,2,opt,name=code,enum=common.ErrCode" json:"code,omitempty"`
	Message string         `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *CreateShardingResp) Reset()                    { *m = CreateShardingResp{} }
func (m *CreateShardingResp) String() string            { return proto.CompactTextString(m) }
func (*CreateShardingResp) ProtoMessage()               {}
func (*CreateShardingResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{181} }

func (m *CreateShardingResp) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *CreateShardingResp) GetCode() common.ErrCode {
	if m != nil {
		return m.Code
	}
	return common.ErrCode_E_OK
}

func (m *CreateShardingResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type QueryShardingReq struct {
	Seq string `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	Key string `protobuf:"bytes,2,opt,name=key" json:"key,omitempty"`
}

func (m *QueryShardingReq) Reset()                    { *m = QueryShardingReq{} }
func (m *QueryShardingReq) String() string            { return proto.CompactTextString(m) }
func (*QueryShardingReq) ProtoMessage()               {}
func (*QueryShardingReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{182} }

func (m *QueryShardingReq) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *QueryShardingReq) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

type QueryShardingResp struct {
	Seq     string           `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	Code    common.ErrCode   `protobuf:"varint,2,opt,name=code,enum=common.ErrCode" json:"code,omitempty"`
	Message string           `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
	Data    *common.Sharding `protobuf:"bytes,4,opt,name=data" json:"data,omitempty"`
}

func (m *QueryShardingResp) Reset()                    { *m = QueryShardingResp{} }
func (m *QueryShardingResp) String() string            { return proto.CompactTextString(m) }
func (*QueryShardingResp) ProtoMessage()               {}
func (*QueryShardingResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{183} }

func (m *QueryShardingResp) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *QueryShardingResp) GetCode() common.ErrCode {
	if m != nil {
		return m.Code
	}
	return common.ErrCode_E_OK
}

func (m *QueryShardingResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *QueryShardingResp) GetData() *common.Sharding {
	if m != nil {
		return m.Data
	}
	return nil
}

type QueryShardingListReq struct {
	Seq string `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
}

func (m *QueryShardingListReq) Reset()                    { *m = QueryShardingListReq{} }
func (m *QueryShardingListReq) String() string            { return proto.CompactTextString(m) }
func (*QueryShardingListReq) ProtoMessage()               {}
func (*QueryShardingListReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{184} }

func (m *QueryShardingListReq) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

type QueryShardingListResp struct {
	Seq     string                          `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	Code    common.ErrCode                  `protobuf:"varint,2,opt,name=code,enum=common.ErrCode" json:"code,omitempty"`
	Message string                          `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
	Data    *QueryShardingListResp_RespData `protobuf:"bytes,4,opt,name=data" json:"data,omitempty"`
}

func (m *QueryShardingListResp) Reset()                    { *m = QueryShardingListResp{} }
func (m *QueryShardingListResp) String() string            { return proto.CompactTextString(m) }
func (*QueryShardingListResp) ProtoMessage()               {}
func (*QueryShardingListResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{185} }

func (m *QueryShardingListResp) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *QueryShardingListResp) GetCode() common.ErrCode {
	if m != nil {
		return m.Code
	}
	return common.ErrCode_E_OK
}

func (m *QueryShardingListResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *QueryShardingListResp) GetData() *QueryShardingListResp_RespData {
	if m != nil {
		return m.Data
	}
	return nil
}

type QueryShardingListResp_RespData struct {
	Info []*common.Sharding `protobuf:"bytes,1,rep,name=info" json:"info,omitempty"`
}

func (m *QueryShardingListResp_RespData) Reset()         { *m = QueryShardingListResp_RespData{} }
func (m *QueryShardingListResp_RespData) String() string { return proto.CompactTextString(m) }
func (*QueryShardingListResp_RespData) ProtoMessage()    {}
func (*QueryShardingListResp_RespData) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{185, 0}
}

func (m *QueryShardingListResp_RespData) GetInfo() []*common.Sharding {
	if m != nil {
		return m.Info
	}
	return nil
}

type UpdateShardingReq struct {
	Seq    string `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	Key    string `protobuf:"bytes,2,opt,name=key" json:"key,omitempty"`
	DbId   string `protobuf:"bytes,3,opt,name=db_id,json=dbId" json:"db_id,omitempty"`
	DbName string `protobuf:"bytes,4,opt,name=db_name,json=dbName" json:"db_name,omitempty"`
	Memo   string `protobuf:"bytes,5,opt,name=memo" json:"memo,omitempty"`
	State  int32  `protobuf:"varint,6,opt,name=state" json:"state,omitempty"`
}

func (m *UpdateShardingReq) Reset()                    { *m = UpdateShardingReq{} }
func (m *UpdateShardingReq) String() string            { return proto.CompactTextString(m) }
func (*UpdateShardingReq) ProtoMessage()               {}
func (*UpdateShardingReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{186} }

func (m *UpdateShardingReq) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *UpdateShardingReq) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *UpdateShardingReq) GetDbId() string {
	if m != nil {
		return m.DbId
	}
	return ""
}

func (m *UpdateShardingReq) GetDbName() string {
	if m != nil {
		return m.DbName
	}
	return ""
}

func (m *UpdateShardingReq) GetMemo() string {
	if m != nil {
		return m.Memo
	}
	return ""
}

func (m *UpdateShardingReq) GetState() int32 {
	if m != nil {
		return m.State
	}
	return 0
}

type UpdateShardingResp struct {
	Seq     string         `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	Code    common.ErrCode `protobuf:"varint,2,opt,name=code,enum=common.ErrCode" json:"code,omitempty"`
	Message string         `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *UpdateShardingResp) Reset()                    { *m = UpdateShardingResp{} }
func (m *UpdateShardingResp) String() string            { return proto.CompactTextString(m) }
func (*UpdateShardingResp) ProtoMessage()               {}
func (*UpdateShardingResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{187} }

func (m *UpdateShardingResp) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *UpdateShardingResp) GetCode() common.ErrCode {
	if m != nil {
		return m.Code
	}
	return common.ErrCode_E_OK
}

func (m *UpdateShardingResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type CreateAuditReq struct {
	Seq        string `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	SourceType int32  `protobuf:"varint,2,opt,name=source_type,json=sourceType" json:"source_type,omitempty"`
	OpType     int32  `protobuf:"varint,3,opt,name=op_type,json=opType" json:"op_type,omitempty"`
	BizId      string `protobuf:"bytes,4,opt,name=biz_id,json=bizId" json:"biz_id,omitempty"`
	SourceId   string `protobuf:"bytes,5,opt,name=source_id,json=sourceId" json:"source_id,omitempty"`
	Operator   string `protobuf:"bytes,6,opt,name=operator" json:"operator,omitempty"`
	Memo       string `protobuf:"bytes,7,opt,name=memo" json:"memo,omitempty"`
	State      int32  `protobuf:"varint,8,opt,name=state" json:"state,omitempty"`
}

func (m *CreateAuditReq) Reset()                    { *m = CreateAuditReq{} }
func (m *CreateAuditReq) String() string            { return proto.CompactTextString(m) }
func (*CreateAuditReq) ProtoMessage()               {}
func (*CreateAuditReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{188} }

func (m *CreateAuditReq) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *CreateAuditReq) GetSourceType() int32 {
	if m != nil {
		return m.SourceType
	}
	return 0
}

func (m *CreateAuditReq) GetOpType() int32 {
	if m != nil {
		return m.OpType
	}
	return 0
}

func (m *CreateAuditReq) GetBizId() string {
	if m != nil {
		return m.BizId
	}
	return ""
}

func (m *CreateAuditReq) GetSourceId() string {
	if m != nil {
		return m.SourceId
	}
	return ""
}

func (m *CreateAuditReq) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

func (m *CreateAuditReq) GetMemo() string {
	if m != nil {
		return m.Memo
	}
	return ""
}

func (m *CreateAuditReq) GetState() int32 {
	if m != nil {
		return m.State
	}
	return 0
}

type CreateAuditResp struct {
	Seq     string         `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	Code    common.ErrCode `protobuf:"varint,2,opt,name=code,enum=common.ErrCode" json:"code,omitempty"`
	Message string         `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *CreateAuditResp) Reset()                    { *m = CreateAuditResp{} }
func (m *CreateAuditResp) String() string            { return proto.CompactTextString(m) }
func (*CreateAuditResp) ProtoMessage()               {}
func (*CreateAuditResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{189} }

func (m *CreateAuditResp) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *CreateAuditResp) GetCode() common.ErrCode {
	if m != nil {
		return m.Code
	}
	return common.ErrCode_E_OK
}

func (m *CreateAuditResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type QueryAuditListReq struct {
	Seq        string       `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	BizId      string       `protobuf:"bytes,2,opt,name=biz_id,json=bizId" json:"biz_id,omitempty"`
	SourceType int32        `protobuf:"varint,3,opt,name=source_type,json=sourceType" json:"source_type,omitempty"`
	OpType     int32        `protobuf:"varint,4,opt,name=op_type,json=opType" json:"op_type,omitempty"`
	SourceId   string       `protobuf:"bytes,5,opt,name=source_id,json=sourceId" json:"source_id,omitempty"`
	Operator   string       `protobuf:"bytes,6,opt,name=operator" json:"operator,omitempty"`
	Page       *common.Page `protobuf:"bytes,7,opt,name=page" json:"page,omitempty"`
}

func (m *QueryAuditListReq) Reset()                    { *m = QueryAuditListReq{} }
func (m *QueryAuditListReq) String() string            { return proto.CompactTextString(m) }
func (*QueryAuditListReq) ProtoMessage()               {}
func (*QueryAuditListReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{190} }

func (m *QueryAuditListReq) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *QueryAuditListReq) GetBizId() string {
	if m != nil {
		return m.BizId
	}
	return ""
}

func (m *QueryAuditListReq) GetSourceType() int32 {
	if m != nil {
		return m.SourceType
	}
	return 0
}

func (m *QueryAuditListReq) GetOpType() int32 {
	if m != nil {
		return m.OpType
	}
	return 0
}

func (m *QueryAuditListReq) GetSourceId() string {
	if m != nil {
		return m.SourceId
	}
	return ""
}

func (m *QueryAuditListReq) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

func (m *QueryAuditListReq) GetPage() *common.Page {
	if m != nil {
		return m.Page
	}
	return nil
}

type QueryAuditListResp struct {
	Seq     string                       `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	Code    common.ErrCode               `protobuf:"varint,2,opt,name=code,enum=common.ErrCode" json:"code,omitempty"`
	Message string                       `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
	Data    *QueryAuditListResp_RespData `protobuf:"bytes,4,opt,name=data" json:"data,omitempty"`
}

func (m *QueryAuditListResp) Reset()                    { *m = QueryAuditListResp{} }
func (m *QueryAuditListResp) String() string            { return proto.CompactTextString(m) }
func (*QueryAuditListResp) ProtoMessage()               {}
func (*QueryAuditListResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{191} }

func (m *QueryAuditListResp) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *QueryAuditListResp) GetCode() common.ErrCode {
	if m != nil {
		return m.Code
	}
	return common.ErrCode_E_OK
}

func (m *QueryAuditListResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *QueryAuditListResp) GetData() *QueryAuditListResp_RespData {
	if m != nil {
		return m.Data
	}
	return nil
}

type QueryAuditListResp_RespData struct {
	TotalCount uint32          `protobuf:"varint,1,opt,name=total_count,json=totalCount" json:"total_count,omitempty"`
	Info       []*common.Audit `protobuf:"bytes,2,rep,name=info" json:"info,omitempty"`
}

func (m *QueryAuditListResp_RespData) Reset()         { *m = QueryAuditListResp_RespData{} }
func (m *QueryAuditListResp_RespData) String() string { return proto.CompactTextString(m) }
func (*QueryAuditListResp_RespData) ProtoMessage()    {}
func (*QueryAuditListResp_RespData) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{191, 0}
}

func (m *QueryAuditListResp_RespData) GetTotalCount() uint32 {
	if m != nil {
		return m.TotalCount
	}
	return 0
}

func (m *QueryAuditListResp_RespData) GetInfo() []*common.Audit {
	if m != nil {
		return m.Info
	}
	return nil
}

type HealthzReq struct {
	Seq string `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
}

func (m *HealthzReq) Reset()                    { *m = HealthzReq{} }
func (m *HealthzReq) String() string            { return proto.CompactTextString(m) }
func (*HealthzReq) ProtoMessage()               {}
func (*HealthzReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{192} }

func (m *HealthzReq) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

type HealthzResp struct {
	Seq     string                    `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	Code    common.ErrCode            `protobuf:"varint,2,opt,name=code,enum=common.ErrCode" json:"code,omitempty"`
	Message string                    `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
	Data    *common.ModuleHealthzInfo `protobuf:"bytes,4,opt,name=data" json:"data,omitempty"`
}

func (m *HealthzResp) Reset()                    { *m = HealthzResp{} }
func (m *HealthzResp) String() string            { return proto.CompactTextString(m) }
func (*HealthzResp) ProtoMessage()               {}
func (*HealthzResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{193} }

func (m *HealthzResp) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *HealthzResp) GetCode() common.ErrCode {
	if m != nil {
		return m.Code
	}
	return common.ErrCode_E_OK
}

func (m *HealthzResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *HealthzResp) GetData() *common.ModuleHealthzInfo {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryAppMetadataReq)(nil), "datamanager.QueryAppMetadataReq")
	proto.RegisterType((*QueryAppMetadataResp)(nil), "datamanager.QueryAppMetadataResp")
	proto.RegisterType((*CreateAppReq)(nil), "datamanager.CreateAppReq")
	proto.RegisterType((*CreateAppResp)(nil), "datamanager.CreateAppResp")
	proto.RegisterType((*CreateAppResp_RespData)(nil), "datamanager.CreateAppResp.RespData")
	proto.RegisterType((*QueryAppReq)(nil), "datamanager.QueryAppReq")
	proto.RegisterType((*QueryAppResp)(nil), "datamanager.QueryAppResp")
	proto.RegisterType((*QueryAppListReq)(nil), "datamanager.QueryAppListReq")
	proto.RegisterType((*QueryAppListResp)(nil), "datamanager.QueryAppListResp")
	proto.RegisterType((*QueryAppListResp_RespData)(nil), "datamanager.QueryAppListResp.RespData")
	proto.RegisterType((*UpdateAppReq)(nil), "datamanager.UpdateAppReq")
	proto.RegisterType((*UpdateAppResp)(nil), "datamanager.UpdateAppResp")
	proto.RegisterType((*DeleteAppReq)(nil), "datamanager.DeleteAppReq")
	proto.RegisterType((*DeleteAppResp)(nil), "datamanager.DeleteAppResp")
	proto.RegisterType((*CreateTemplateBindReq)(nil), "datamanager.CreateTemplateBindReq")
	proto.RegisterType((*CreateTemplateBindResp)(nil), "datamanager.CreateTemplateBindResp")
	proto.RegisterType((*CreateTemplateBindResp_RespData)(nil), "datamanager.CreateTemplateBindResp.RespData")
	proto.RegisterType((*QueryTemplateBindReq)(nil), "datamanager.QueryTemplateBindReq")
	proto.RegisterType((*QueryTemplateBindResp)(nil), "datamanager.QueryTemplateBindResp")
	proto.RegisterType((*QueryTemplateBindListReq)(nil), "datamanager.QueryTemplateBindListReq")
	proto.RegisterType((*QueryTemplateBindListResp)(nil), "datamanager.QueryTemplateBindListResp")
	proto.RegisterType((*QueryTemplateBindListResp_RespData)(nil), "datamanager.QueryTemplateBindListResp.RespData")
	proto.RegisterType((*DeleteTemplateBindReq)(nil), "datamanager.DeleteTemplateBindReq")
	proto.RegisterType((*DeleteTemplateBindResp)(nil), "datamanager.DeleteTemplateBindResp")
	proto.RegisterType((*CreateConfigTemplateReq)(nil), "datamanager.CreateConfigTemplateReq")
	proto.RegisterType((*CreateConfigTemplateResp)(nil), "datamanager.CreateConfigTemplateResp")
	proto.RegisterType((*CreateConfigTemplateResp_RespData)(nil), "datamanager.CreateConfigTemplateResp.RespData")
	proto.RegisterType((*QueryConfigTemplateReq)(nil), "datamanager.QueryConfigTemplateReq")
	proto.RegisterType((*QueryConfigTemplateResp)(nil), "datamanager.QueryConfigTemplateResp")
	proto.RegisterType((*QueryConfigTemplateListReq)(nil), "datamanager.QueryConfigTemplateListReq")
	proto.RegisterType((*QueryConfigTemplateListResp)(nil), "datamanager.QueryConfigTemplateListResp")
	proto.RegisterType((*QueryConfigTemplateListResp_RespData)(nil), "datamanager.QueryConfigTemplateListResp.RespData")
	proto.RegisterType((*UpdateConfigTemplateReq)(nil), "datamanager.UpdateConfigTemplateReq")
	proto.RegisterType((*UpdateConfigTemplateResp)(nil), "datamanager.UpdateConfigTemplateResp")
	proto.RegisterType((*DeleteConfigTemplateReq)(nil), "datamanager.DeleteConfigTemplateReq")
	proto.RegisterType((*DeleteConfigTemplateResp)(nil), "datamanager.DeleteConfigTemplateResp")
	proto.RegisterType((*CreateConfigTemplateVersionReq)(nil), "datamanager.CreateConfigTemplateVersionReq")
	proto.RegisterType((*CreateConfigTemplateVersionResp)(nil), "datamanager.CreateConfigTemplateVersionResp")
	proto.RegisterType((*CreateConfigTemplateVersionResp_RespData)(nil), "datamanager.CreateConfigTemplateVersionResp.RespData")
	proto.RegisterType((*QueryConfigTemplateVersionReq)(nil), "datamanager.QueryConfigTemplateVersionReq")
	proto.RegisterType((*QueryConfigTemplateVersionResp)(nil), "datamanager.QueryConfigTemplateVersionResp")
	proto.RegisterType((*QueryConfigTemplateVersionListReq)(nil), "datamanager.QueryConfigTemplateVersionListReq")
	proto.RegisterType((*QueryConfigTemplateVersionListResp)(nil), "datamanager.QueryConfigTemplateVersionListResp")
	proto.RegisterType((*QueryConfigTemplateVersionListResp_RespData)(nil), "datamanager.QueryConfigTemplateVersionListResp.RespData")
	proto.RegisterType((*UpdateConfigTemplateVersionReq)(nil), "datamanager.UpdateConfigTemplateVersionReq")
	proto.RegisterType((*UpdateConfigTemplateVersionResp)(nil), "datamanager.UpdateConfigTemplateVersionResp")
	proto.RegisterType((*DeleteConfigTemplateVersionReq)(nil), "datamanager.DeleteConfigTemplateVersionReq")
	proto.RegisterType((*DeleteConfigTemplateVersionResp)(nil), "datamanager.DeleteConfigTemplateVersionResp")
	proto.RegisterType((*CreateVariableGroupReq)(nil), "datamanager.CreateVariableGroupReq")
	proto.RegisterType((*CreateVariableGroupResp)(nil), "datamanager.CreateVariableGroupResp")
	proto.RegisterType((*CreateVariableGroupResp_RespData)(nil), "datamanager.CreateVariableGroupResp.RespData")
	proto.RegisterType((*QueryVariableGroupReq)(nil), "datamanager.QueryVariableGroupReq")
	proto.RegisterType((*QueryVariableGroupResp)(nil), "datamanager.QueryVariableGroupResp")
	proto.RegisterType((*QueryVariableGroupListReq)(nil), "datamanager.QueryVariableGroupListReq")
	proto.RegisterType((*QueryVariableGroupListResp)(nil), "datamanager.QueryVariableGroupListResp")
	proto.RegisterType((*QueryVariableGroupListResp_RespData)(nil), "datamanager.QueryVariableGroupListResp.RespData")
	proto.RegisterType((*DeleteVariableGroupReq)(nil), "datamanager.DeleteVariableGroupReq")
	proto.RegisterType((*DeleteVariableGroupResp)(nil), "datamanager.DeleteVariableGroupResp")
	proto.RegisterType((*CreateVariableReq)(nil), "datamanager.CreateVariableReq")
	proto.RegisterType((*CreateVariableResp)(nil), "datamanager.CreateVariableResp")
	proto.RegisterType((*CreateVariableResp_RespData)(nil), "datamanager.CreateVariableResp.RespData")
	proto.RegisterType((*UpdateVariableReq)(nil), "datamanager.UpdateVariableReq")
	proto.RegisterType((*UpdateVariableResp)(nil), "datamanager.UpdateVariableResp")
	proto.RegisterType((*QueryVariableReq)(nil), "datamanager.QueryVariableReq")
	proto.RegisterType((*QueryVariableResp)(nil), "datamanager.QueryVariableResp")
	proto.RegisterType((*QueryVariableListReq)(nil), "datamanager.QueryVariableListReq")
	proto.RegisterType((*QueryVariableListResp)(nil), "datamanager.QueryVariableListResp")
	proto.RegisterType((*QueryVariableListResp_RespData)(nil), "datamanager.QueryVariableListResp.RespData")
	proto.RegisterType((*DeleteVariableReq)(nil), "datamanager.DeleteVariableReq")
	proto.RegisterType((*DeleteVariableResp)(nil), "datamanager.DeleteVariableResp")
	proto.RegisterType((*CreateConfigReq)(nil), "datamanager.CreateConfigReq")
	proto.RegisterType((*CreateConfigResp)(nil), "datamanager.CreateConfigResp")
	proto.RegisterType((*CreateConfigResp_RespData)(nil), "datamanager.CreateConfigResp.RespData")
	proto.RegisterType((*QueryConfigReq)(nil), "datamanager.QueryConfigReq")
	proto.RegisterType((*QueryConfigResp)(nil), "datamanager.QueryConfigResp")
	proto.RegisterType((*QueryConfigListReq)(nil), "datamanager.QueryConfigListReq")
	proto.RegisterType((*QueryConfigListResp)(nil), "datamanager.QueryConfigListResp")
	proto.RegisterType((*QueryConfigListResp_RespData)(nil), "datamanager.QueryConfigListResp.RespData")
	proto.RegisterType((*UpdateConfigReq)(nil), "datamanager.UpdateConfigReq")
	proto.RegisterType((*UpdateConfigResp)(nil), "datamanager.UpdateConfigResp")
	proto.RegisterType((*DeleteConfigReq)(nil), "datamanager.DeleteConfigReq")
	proto.RegisterType((*DeleteConfigResp)(nil), "datamanager.DeleteConfigResp")
	proto.RegisterType((*CreateConfigContentReq)(nil), "datamanager.CreateConfigContentReq")
	proto.RegisterType((*CreateConfigContentResp)(nil), "datamanager.CreateConfigContentResp")
	proto.RegisterType((*QueryConfigContentReq)(nil), "datamanager.QueryConfigContentReq")
	proto.RegisterType((*QueryConfigContentResp)(nil), "datamanager.QueryConfigContentResp")
	proto.RegisterType((*QueryReleaseConfigContentReq)(nil), "datamanager.QueryReleaseConfigContentReq")
	proto.RegisterType((*QueryReleaseConfigContentResp)(nil), "datamanager.QueryReleaseConfigContentResp")
	proto.RegisterType((*QueryConfigContentListReq)(nil), "datamanager.QueryConfigContentListReq")
	proto.RegisterType((*QueryConfigContentListResp)(nil), "datamanager.QueryConfigContentListResp")
	proto.RegisterType((*QueryConfigContentListResp_RespData)(nil), "datamanager.QueryConfigContentListResp.RespData")
	proto.RegisterType((*CreateCommitReq)(nil), "datamanager.CreateCommitReq")
	proto.RegisterType((*CreateCommitResp)(nil), "datamanager.CreateCommitResp")
	proto.RegisterType((*CreateCommitResp_RespData)(nil), "datamanager.CreateCommitResp.RespData")
	proto.RegisterType((*QueryCommitReq)(nil), "datamanager.QueryCommitReq")
	proto.RegisterType((*QueryCommitResp)(nil), "datamanager.QueryCommitResp")
	proto.RegisterType((*QueryHistoryCommitsReq)(nil), "datamanager.QueryHistoryCommitsReq")
	proto.RegisterType((*QueryHistoryCommitsResp)(nil), "datamanager.QueryHistoryCommitsResp")
	proto.RegisterType((*QueryHistoryCommitsResp_RespData)(nil), "datamanager.QueryHistoryCommitsResp.RespData")
	proto.RegisterType((*UpdateCommitReq)(nil), "datamanager.UpdateCommitReq")
	proto.RegisterType((*UpdateCommitResp)(nil), "datamanager.UpdateCommitResp")
	proto.RegisterType((*CancelCommitReq)(nil), "datamanager.CancelCommitReq")
	proto.RegisterType((*CancelCommitResp)(nil), "datamanager.CancelCommitResp")
	proto.RegisterType((*ConfirmCommitReq)(nil), "datamanager.ConfirmCommitReq")
	proto.RegisterType((*ConfirmCommitResp)(nil), "datamanager.ConfirmCommitResp")
	proto.RegisterType((*CreateMultiCommitWithContentReq)(nil), "datamanager.CreateMultiCommitWithContentReq")
	proto.RegisterType((*CreateMultiCommitWithContentResp)(nil), "datamanager.CreateMultiCommitWithContentResp")
	proto.RegisterType((*CreateMultiCommitWithContentResp_RespData)(nil), "datamanager.CreateMultiCommitWithContentResp.RespData")
	proto.RegisterType((*CreateMultiCommitReq)(nil), "datamanager.CreateMultiCommitReq")
	proto.RegisterType((*CreateMultiCommitResp)(nil), "datamanager.CreateMultiCommitResp")
	proto.RegisterType((*CreateMultiCommitResp_RespData)(nil), "datamanager.CreateMultiCommitResp.RespData")
	proto.RegisterType((*QueryMultiCommitReq)(nil), "datamanager.QueryMultiCommitReq")
	proto.RegisterType((*QueryMultiCommitResp)(nil), "datamanager.QueryMultiCommitResp")
	proto.RegisterType((*QueryHistoryMultiCommitsReq)(nil), "datamanager.QueryHistoryMultiCommitsReq")
	proto.RegisterType((*QueryHistoryMultiCommitsResp)(nil), "datamanager.QueryHistoryMultiCommitsResp")
	proto.RegisterType((*QueryHistoryMultiCommitsResp_RespData)(nil), "datamanager.QueryHistoryMultiCommitsResp.RespData")
	proto.RegisterType((*QueryMultiCommitSubListReq)(nil), "datamanager.QueryMultiCommitSubListReq")
	proto.RegisterType((*QueryMultiCommitSubListResp)(nil), "datamanager.QueryMultiCommitSubListResp")
	proto.RegisterType((*QueryMultiCommitSubListResp_RespData)(nil), "datamanager.QueryMultiCommitSubListResp.RespData")
	proto.RegisterType((*UpdateMultiCommitReq)(nil), "datamanager.UpdateMultiCommitReq")
	proto.RegisterType((*UpdateMultiCommitResp)(nil), "datamanager.UpdateMultiCommitResp")
	proto.RegisterType((*CancelMultiCommitReq)(nil), "datamanager.CancelMultiCommitReq")
	proto.RegisterType((*CancelMultiCommitResp)(nil), "datamanager.CancelMultiCommitResp")
	proto.RegisterType((*ConfirmMultiCommitReq)(nil), "datamanager.ConfirmMultiCommitReq")
	proto.RegisterType((*ConfirmMultiCommitResp)(nil), "datamanager.ConfirmMultiCommitResp")
	proto.RegisterType((*CreateReleaseReq)(nil), "datamanager.CreateReleaseReq")
	proto.RegisterType((*CreateReleaseResp)(nil), "datamanager.CreateReleaseResp")
	proto.RegisterType((*CreateReleaseResp_RespData)(nil), "datamanager.CreateReleaseResp.RespData")
	proto.RegisterType((*QueryReleaseReq)(nil), "datamanager.QueryReleaseReq")
	proto.RegisterType((*QueryReleaseResp)(nil), "datamanager.QueryReleaseResp")
	proto.RegisterType((*QueryNewestReleasesReq)(nil), "datamanager.QueryNewestReleasesReq")
	proto.RegisterType((*QueryNewestReleasesResp)(nil), "datamanager.QueryNewestReleasesResp")
	proto.RegisterType((*QueryNewestReleasesResp_RespData)(nil), "datamanager.QueryNewestReleasesResp.RespData")
	proto.RegisterType((*QueryHistoryReleasesReq)(nil), "datamanager.QueryHistoryReleasesReq")
	proto.RegisterType((*QueryHistoryReleasesResp)(nil), "datamanager.QueryHistoryReleasesResp")
	proto.RegisterType((*QueryHistoryReleasesResp_RespData)(nil), "datamanager.QueryHistoryReleasesResp.RespData")
	proto.RegisterType((*UpdateReleaseReq)(nil), "datamanager.UpdateReleaseReq")
	proto.RegisterType((*UpdateReleaseResp)(nil), "datamanager.UpdateReleaseResp")
	proto.RegisterType((*CancelReleaseReq)(nil), "datamanager.CancelReleaseReq")
	proto.RegisterType((*CancelReleaseResp)(nil), "datamanager.CancelReleaseResp")
	proto.RegisterType((*RollbackReleaseReq)(nil), "datamanager.RollbackReleaseReq")
	proto.RegisterType((*RollbackReleaseResp)(nil), "datamanager.RollbackReleaseResp")
	proto.RegisterType((*PublishReleaseReq)(nil), "datamanager.PublishReleaseReq")
	proto.RegisterType((*PublishReleaseResp)(nil), "datamanager.PublishReleaseResp")
	proto.RegisterType((*CreateMultiReleaseReq)(nil), "datamanager.CreateMultiReleaseReq")
	proto.RegisterType((*CreateMultiReleaseResp)(nil), "datamanager.CreateMultiReleaseResp")
	proto.RegisterType((*CreateMultiReleaseResp_RespData)(nil), "datamanager.CreateMultiReleaseResp.RespData")
	proto.RegisterType((*QueryMultiReleaseReq)(nil), "datamanager.QueryMultiReleaseReq")
	proto.RegisterType((*QueryMultiReleaseResp)(nil), "datamanager.QueryMultiReleaseResp")
	proto.RegisterType((*QueryHistoryMultiReleasesReq)(nil), "datamanager.QueryHistoryMultiReleasesReq")
	proto.RegisterType((*QueryHistoryMultiReleasesResp)(nil), "datamanager.QueryHistoryMultiReleasesResp")
	proto.RegisterType((*QueryHistoryMultiReleasesResp_RespData)(nil), "datamanager.QueryHistoryMultiReleasesResp.RespData")
	proto.RegisterType((*UpdateMultiReleaseReq)(nil), "datamanager.UpdateMultiReleaseReq")
	proto.RegisterType((*UpdateMultiReleaseResp)(nil), "datamanager.UpdateMultiReleaseResp")
	proto.RegisterType((*QueryMultiReleaseSubListReq)(nil), "datamanager.QueryMultiReleaseSubListReq")
	proto.RegisterType((*QueryMultiReleaseSubListResp)(nil), "datamanager.QueryMultiReleaseSubListResp")
	proto.RegisterType((*QueryMultiReleaseSubListResp_RespData)(nil), "datamanager.QueryMultiReleaseSubListResp.RespData")
	proto.RegisterType((*CancelMultiReleaseReq)(nil), "datamanager.CancelMultiReleaseReq")
	proto.RegisterType((*CancelMultiReleaseResp)(nil), "datamanager.CancelMultiReleaseResp")
	proto.RegisterType((*PublishMultiReleaseReq)(nil), "datamanager.PublishMultiReleaseReq")
	proto.RegisterType((*PublishMultiReleaseResp)(nil), "datamanager.PublishMultiReleaseResp")
	proto.RegisterType((*RollbackMultiReleaseReq)(nil), "datamanager.RollbackMultiReleaseReq")
	proto.RegisterType((*RollbackMultiReleaseResp)(nil), "datamanager.RollbackMultiReleaseResp")
	proto.RegisterType((*CreateAppInstanceReq)(nil), "datamanager.CreateAppInstanceReq")
	proto.RegisterType((*CreateAppInstanceResp)(nil), "datamanager.CreateAppInstanceResp")
	proto.RegisterType((*QueryReachableAppInstancesReq)(nil), "datamanager.QueryReachableAppInstancesReq")
	proto.RegisterType((*QueryReachableAppInstancesResp)(nil), "datamanager.QueryReachableAppInstancesResp")
	proto.RegisterType((*QueryReachableAppInstancesResp_RespData)(nil), "datamanager.QueryReachableAppInstancesResp.RespData")
	proto.RegisterType((*UpdateAppInstanceReq)(nil), "datamanager.UpdateAppInstanceReq")
	proto.RegisterType((*UpdateAppInstanceResp)(nil), "datamanager.UpdateAppInstanceResp")
	proto.RegisterType((*CreateAppInstanceReleaseReq)(nil), "datamanager.CreateAppInstanceReleaseReq")
	proto.RegisterType((*CreateAppInstanceReleaseResp)(nil), "datamanager.CreateAppInstanceReleaseResp")
	proto.RegisterType((*QueryAppInstanceReleaseReq)(nil), "datamanager.QueryAppInstanceReleaseReq")
	proto.RegisterType((*QueryAppInstanceReleaseResp)(nil), "datamanager.QueryAppInstanceReleaseResp")
	proto.RegisterType((*QueryAppInstanceReleaseResp_RespData)(nil), "datamanager.QueryAppInstanceReleaseResp.RespData")
	proto.RegisterType((*QueryMatchedAppInstancesReq)(nil), "datamanager.QueryMatchedAppInstancesReq")
	proto.RegisterType((*QueryMatchedAppInstancesResp)(nil), "datamanager.QueryMatchedAppInstancesResp")
	proto.RegisterType((*QueryMatchedAppInstancesResp_RespData)(nil), "datamanager.QueryMatchedAppInstancesResp.RespData")
	proto.RegisterType((*QueryEffectedAppInstancesReq)(nil), "datamanager.QueryEffectedAppInstancesReq")
	proto.RegisterType((*QueryEffectedAppInstancesResp)(nil), "datamanager.QueryEffectedAppInstancesResp")
	proto.RegisterType((*QueryEffectedAppInstancesResp_RespData)(nil), "datamanager.QueryEffectedAppInstancesResp.RespData")
	proto.RegisterType((*CreateStrategyReq)(nil), "datamanager.CreateStrategyReq")
	proto.RegisterType((*CreateStrategyResp)(nil), "datamanager.CreateStrategyResp")
	proto.RegisterType((*CreateStrategyResp_RespData)(nil), "datamanager.CreateStrategyResp.RespData")
	proto.RegisterType((*QueryStrategyReq)(nil), "datamanager.QueryStrategyReq")
	proto.RegisterType((*QueryStrategyResp)(nil), "datamanager.QueryStrategyResp")
	proto.RegisterType((*QueryStrategyListReq)(nil), "datamanager.QueryStrategyListReq")
	proto.RegisterType((*QueryStrategyListResp)(nil), "datamanager.QueryStrategyListResp")
	proto.RegisterType((*QueryStrategyListResp_RespData)(nil), "datamanager.QueryStrategyListResp.RespData")
	proto.RegisterType((*DeleteStrategyReq)(nil), "datamanager.DeleteStrategyReq")
	proto.RegisterType((*DeleteStrategyResp)(nil), "datamanager.DeleteStrategyResp")
	proto.RegisterType((*CreateProcAttrReq)(nil), "datamanager.CreateProcAttrReq")
	proto.RegisterType((*CreateProcAttrResp)(nil), "datamanager.CreateProcAttrResp")
	proto.RegisterType((*QueryHostProcAttrReq)(nil), "datamanager.QueryHostProcAttrReq")
	proto.RegisterType((*QueryHostProcAttrResp)(nil), "datamanager.QueryHostProcAttrResp")
	proto.RegisterType((*QueryHostProcAttrListReq)(nil), "datamanager.QueryHostProcAttrListReq")
	proto.RegisterType((*QueryHostProcAttrListResp)(nil), "datamanager.QueryHostProcAttrListResp")
	proto.RegisterType((*QueryHostProcAttrListResp_RespData)(nil), "datamanager.QueryHostProcAttrListResp.RespData")
	proto.RegisterType((*QueryAppProcAttrListReq)(nil), "datamanager.QueryAppProcAttrListReq")
	proto.RegisterType((*QueryAppProcAttrListResp)(nil), "datamanager.QueryAppProcAttrListResp")
	proto.RegisterType((*QueryAppProcAttrListResp_RespData)(nil), "datamanager.QueryAppProcAttrListResp.RespData")
	proto.RegisterType((*UpdateProcAttrReq)(nil), "datamanager.UpdateProcAttrReq")
	proto.RegisterType((*UpdateProcAttrResp)(nil), "datamanager.UpdateProcAttrResp")
	proto.RegisterType((*DeleteProcAttrReq)(nil), "datamanager.DeleteProcAttrReq")
	proto.RegisterType((*DeleteProcAttrResp)(nil), "datamanager.DeleteProcAttrResp")
	proto.RegisterType((*InitShardingDBReq)(nil), "datamanager.InitShardingDBReq")
	proto.RegisterType((*InitShardingDBResp)(nil), "datamanager.InitShardingDBResp")
	proto.RegisterType((*CreateShardingDBReq)(nil), "datamanager.CreateShardingDBReq")
	proto.RegisterType((*CreateShardingDBResp)(nil), "datamanager.CreateShardingDBResp")
	proto.RegisterType((*QueryShardingDBReq)(nil), "datamanager.QueryShardingDBReq")
	proto.RegisterType((*QueryShardingDBResp)(nil), "datamanager.QueryShardingDBResp")
	proto.RegisterType((*QueryShardingDBListReq)(nil), "datamanager.QueryShardingDBListReq")
	proto.RegisterType((*QueryShardingDBListResp)(nil), "datamanager.QueryShardingDBListResp")
	proto.RegisterType((*QueryShardingDBListResp_RespData)(nil), "datamanager.QueryShardingDBListResp.RespData")
	proto.RegisterType((*UpdateShardingDBReq)(nil), "datamanager.UpdateShardingDBReq")
	proto.RegisterType((*UpdateShardingDBResp)(nil), "datamanager.UpdateShardingDBResp")
	proto.RegisterType((*CreateShardingReq)(nil), "datamanager.CreateShardingReq")
	proto.RegisterType((*CreateShardingResp)(nil), "datamanager.CreateShardingResp")
	proto.RegisterType((*QueryShardingReq)(nil), "datamanager.QueryShardingReq")
	proto.RegisterType((*QueryShardingResp)(nil), "datamanager.QueryShardingResp")
	proto.RegisterType((*QueryShardingListReq)(nil), "datamanager.QueryShardingListReq")
	proto.RegisterType((*QueryShardingListResp)(nil), "datamanager.QueryShardingListResp")
	proto.RegisterType((*QueryShardingListResp_RespData)(nil), "datamanager.QueryShardingListResp.RespData")
	proto.RegisterType((*UpdateShardingReq)(nil), "datamanager.UpdateShardingReq")
	proto.RegisterType((*UpdateShardingResp)(nil), "datamanager.UpdateShardingResp")
	proto.RegisterType((*CreateAuditReq)(nil), "datamanager.CreateAuditReq")
	proto.RegisterType((*CreateAuditResp)(nil), "datamanager.CreateAuditResp")
	proto.RegisterType((*QueryAuditListReq)(nil), "datamanager.QueryAuditListReq")
	proto.RegisterType((*QueryAuditListResp)(nil), "datamanager.QueryAuditListResp")
	proto.RegisterType((*QueryAuditListResp_RespData)(nil), "datamanager.QueryAuditListResp.RespData")
	proto.RegisterType((*HealthzReq)(nil), "datamanager.HealthzReq")
	proto.RegisterType((*HealthzResp)(nil), "datamanager.HealthzResp")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for DataManager service

type DataManagerClient interface {
	QueryAppMetadata(ctx context.Context, in *QueryAppMetadataReq, opts ...grpc.CallOption) (*QueryAppMetadataResp, error)
	CreateApp(ctx context.Context, in *CreateAppReq, opts ...grpc.CallOption) (*CreateAppResp, error)
	QueryApp(ctx context.Context, in *QueryAppReq, opts ...grpc.CallOption) (*QueryAppResp, error)
	QueryAppList(ctx context.Context, in *QueryAppListReq, opts ...grpc.CallOption) (*QueryAppListResp, error)
	UpdateApp(ctx context.Context, in *UpdateAppReq, opts ...grpc.CallOption) (*UpdateAppResp, error)
	DeleteApp(ctx context.Context, in *DeleteAppReq, opts ...grpc.CallOption) (*DeleteAppResp, error)
	CreateTemplateBind(ctx context.Context, in *CreateTemplateBindReq, opts ...grpc.CallOption) (*CreateTemplateBindResp, error)
	QueryTemplateBind(ctx context.Context, in *QueryTemplateBindReq, opts ...grpc.CallOption) (*QueryTemplateBindResp, error)
	QueryTemplateBindList(ctx context.Context, in *QueryTemplateBindListReq, opts ...grpc.CallOption) (*QueryTemplateBindListResp, error)
	DeleteTemplateBind(ctx context.Context, in *DeleteTemplateBindReq, opts ...grpc.CallOption) (*DeleteTemplateBindResp, error)
	CreateConfigTemplate(ctx context.Context, in *CreateConfigTemplateReq, opts ...grpc.CallOption) (*CreateConfigTemplateResp, error)
	QueryConfigTemplate(ctx context.Context, in *QueryConfigTemplateReq, opts ...grpc.CallOption) (*QueryConfigTemplateResp, error)
	QueryConfigTemplateList(ctx context.Context, in *QueryConfigTemplateListReq, opts ...grpc.CallOption) (*QueryConfigTemplateListResp, error)
	UpdateConfigTemplate(ctx context.Context, in *UpdateConfigTemplateReq, opts ...grpc.CallOption) (*UpdateConfigTemplateResp, error)
	DeleteConfigTemplate(ctx context.Context, in *DeleteConfigTemplateReq, opts ...grpc.CallOption) (*DeleteConfigTemplateResp, error)
	CreateConfigTemplateVersion(ctx context.Context, in *CreateConfigTemplateVersionReq, opts ...grpc.CallOption) (*CreateConfigTemplateVersionResp, error)
	QueryConfigTemplateVersion(ctx context.Context, in *QueryConfigTemplateVersionReq, opts ...grpc.CallOption) (*QueryConfigTemplateVersionResp, error)
	QueryConfigTemplateVersionList(ctx context.Context, in *QueryConfigTemplateVersionListReq, opts ...grpc.CallOption) (*QueryConfigTemplateVersionListResp, error)
	UpdateConfigTemplateVersion(ctx context.Context, in *UpdateConfigTemplateVersionReq, opts ...grpc.CallOption) (*UpdateConfigTemplateVersionResp, error)
	DeleteConfigTemplateVersion(ctx context.Context, in *DeleteConfigTemplateVersionReq, opts ...grpc.CallOption) (*DeleteConfigTemplateVersionResp, error)
	CreateVariableGroup(ctx context.Context, in *CreateVariableGroupReq, opts ...grpc.CallOption) (*CreateVariableGroupResp, error)
	QueryVariableGroup(ctx context.Context, in *QueryVariableGroupReq, opts ...grpc.CallOption) (*QueryVariableGroupResp, error)
	QueryVariableGroupList(ctx context.Context, in *QueryVariableGroupListReq, opts ...grpc.CallOption) (*QueryVariableGroupListResp, error)
	DeleteVariableGroup(ctx context.Context, in *DeleteVariableGroupReq, opts ...grpc.CallOption) (*DeleteVariableGroupResp, error)
	CreateVariable(ctx context.Context, in *CreateVariableReq, opts ...grpc.CallOption) (*CreateVariableResp, error)
	UpdateVariable(ctx context.Context, in *UpdateVariableReq, opts ...grpc.CallOption) (*UpdateVariableResp, error)
	QueryVariable(ctx context.Context, in *QueryVariableReq, opts ...grpc.CallOption) (*QueryVariableResp, error)
	QueryVariableList(ctx context.Context, in *QueryVariableListReq, opts ...grpc.CallOption) (*QueryVariableListResp, error)
	DeleteVariable(ctx context.Context, in *DeleteVariableReq, opts ...grpc.CallOption) (*DeleteVariableResp, error)
	CreateConfig(ctx context.Context, in *CreateConfigReq, opts ...grpc.CallOption) (*CreateConfigResp, error)
	QueryConfig(ctx context.Context, in *QueryConfigReq, opts ...grpc.CallOption) (*QueryConfigResp, error)
	QueryConfigList(ctx context.Context, in *QueryConfigListReq, opts ...grpc.CallOption) (*QueryConfigListResp, error)
	UpdateConfig(ctx context.Context, in *UpdateConfigReq, opts ...grpc.CallOption) (*UpdateConfigResp, error)
	DeleteConfig(ctx context.Context, in *DeleteConfigReq, opts ...grpc.CallOption) (*DeleteConfigResp, error)
	CreateConfigContent(ctx context.Context, in *CreateConfigContentReq, opts ...grpc.CallOption) (*CreateConfigContentResp, error)
	QueryConfigContent(ctx context.Context, in *QueryConfigContentReq, opts ...grpc.CallOption) (*QueryConfigContentResp, error)
	QueryConfigContentList(ctx context.Context, in *QueryConfigContentListReq, opts ...grpc.CallOption) (*QueryConfigContentListResp, error)
	QueryReleaseConfigContent(ctx context.Context, in *QueryReleaseConfigContentReq, opts ...grpc.CallOption) (*QueryReleaseConfigContentResp, error)
	CreateCommit(ctx context.Context, in *CreateCommitReq, opts ...grpc.CallOption) (*CreateCommitResp, error)
	QueryCommit(ctx context.Context, in *QueryCommitReq, opts ...grpc.CallOption) (*QueryCommitResp, error)
	QueryHistoryCommits(ctx context.Context, in *QueryHistoryCommitsReq, opts ...grpc.CallOption) (*QueryHistoryCommitsResp, error)
	UpdateCommit(ctx context.Context, in *UpdateCommitReq, opts ...grpc.CallOption) (*UpdateCommitResp, error)
	CancelCommit(ctx context.Context, in *CancelCommitReq, opts ...grpc.CallOption) (*CancelCommitResp, error)
	ConfirmCommit(ctx context.Context, in *ConfirmCommitReq, opts ...grpc.CallOption) (*ConfirmCommitResp, error)
	CreateMultiCommitWithContent(ctx context.Context, in *CreateMultiCommitWithContentReq, opts ...grpc.CallOption) (*CreateMultiCommitWithContentResp, error)
	CreateMultiCommit(ctx context.Context, in *CreateMultiCommitReq, opts ...grpc.CallOption) (*CreateMultiCommitResp, error)
	QueryMultiCommit(ctx context.Context, in *QueryMultiCommitReq, opts ...grpc.CallOption) (*QueryMultiCommitResp, error)
	QueryHistoryMultiCommits(ctx context.Context, in *QueryHistoryMultiCommitsReq, opts ...grpc.CallOption) (*QueryHistoryMultiCommitsResp, error)
	QueryMultiCommitSubList(ctx context.Context, in *QueryMultiCommitSubListReq, opts ...grpc.CallOption) (*QueryMultiCommitSubListResp, error)
	UpdateMultiCommit(ctx context.Context, in *UpdateMultiCommitReq, opts ...grpc.CallOption) (*UpdateMultiCommitResp, error)
	CancelMultiCommit(ctx context.Context, in *CancelMultiCommitReq, opts ...grpc.CallOption) (*CancelMultiCommitResp, error)
	ConfirmMultiCommit(ctx context.Context, in *ConfirmMultiCommitReq, opts ...grpc.CallOption) (*ConfirmMultiCommitResp, error)
	CreateRelease(ctx context.Context, in *CreateReleaseReq, opts ...grpc.CallOption) (*CreateReleaseResp, error)
	QueryRelease(ctx context.Context, in *QueryReleaseReq, opts ...grpc.CallOption) (*QueryReleaseResp, error)
	QueryNewestReleases(ctx context.Context, in *QueryNewestReleasesReq, opts ...grpc.CallOption) (*QueryNewestReleasesResp, error)
	QueryHistoryReleases(ctx context.Context, in *QueryHistoryReleasesReq, opts ...grpc.CallOption) (*QueryHistoryReleasesResp, error)
	UpdateRelease(ctx context.Context, in *UpdateReleaseReq, opts ...grpc.CallOption) (*UpdateReleaseResp, error)
	CancelRelease(ctx context.Context, in *CancelReleaseReq, opts ...grpc.CallOption) (*CancelReleaseResp, error)
	RollbackRelease(ctx context.Context, in *RollbackReleaseReq, opts ...grpc.CallOption) (*RollbackReleaseResp, error)
	PublishRelease(ctx context.Context, in *PublishReleaseReq, opts ...grpc.CallOption) (*PublishReleaseResp, error)
	CreateMultiRelease(ctx context.Context, in *CreateMultiReleaseReq, opts ...grpc.CallOption) (*CreateMultiReleaseResp, error)
	QueryMultiRelease(ctx context.Context, in *QueryMultiReleaseReq, opts ...grpc.CallOption) (*QueryMultiReleaseResp, error)
	QueryMultiReleaseSubList(ctx context.Context, in *QueryMultiReleaseSubListReq, opts ...grpc.CallOption) (*QueryMultiReleaseSubListResp, error)
	UpdateMultiRelease(ctx context.Context, in *UpdateMultiReleaseReq, opts ...grpc.CallOption) (*UpdateMultiReleaseResp, error)
	CancelMultiRelease(ctx context.Context, in *CancelMultiReleaseReq, opts ...grpc.CallOption) (*CancelMultiReleaseResp, error)
	PublishMultiRelease(ctx context.Context, in *PublishMultiReleaseReq, opts ...grpc.CallOption) (*PublishMultiReleaseResp, error)
	RollbackMultiRelease(ctx context.Context, in *RollbackMultiReleaseReq, opts ...grpc.CallOption) (*RollbackMultiReleaseResp, error)
	QueryHistoryMultiReleases(ctx context.Context, in *QueryHistoryMultiReleasesReq, opts ...grpc.CallOption) (*QueryHistoryMultiReleasesResp, error)
	CreateAppInstance(ctx context.Context, in *CreateAppInstanceReq, opts ...grpc.CallOption) (*CreateAppInstanceResp, error)
	UpdateAppInstance(ctx context.Context, in *UpdateAppInstanceReq, opts ...grpc.CallOption) (*UpdateAppInstanceResp, error)
	QueryReachableAppInstances(ctx context.Context, in *QueryReachableAppInstancesReq, opts ...grpc.CallOption) (*QueryReachableAppInstancesResp, error)
	CreateAppInstanceRelease(ctx context.Context, in *CreateAppInstanceReleaseReq, opts ...grpc.CallOption) (*CreateAppInstanceReleaseResp, error)
	QueryAppInstanceRelease(ctx context.Context, in *QueryAppInstanceReleaseReq, opts ...grpc.CallOption) (*QueryAppInstanceReleaseResp, error)
	QueryEffectedAppInstances(ctx context.Context, in *QueryEffectedAppInstancesReq, opts ...grpc.CallOption) (*QueryEffectedAppInstancesResp, error)
	QueryMatchedAppInstances(ctx context.Context, in *QueryMatchedAppInstancesReq, opts ...grpc.CallOption) (*QueryMatchedAppInstancesResp, error)
	CreateStrategy(ctx context.Context, in *CreateStrategyReq, opts ...grpc.CallOption) (*CreateStrategyResp, error)
	QueryStrategy(ctx context.Context, in *QueryStrategyReq, opts ...grpc.CallOption) (*QueryStrategyResp, error)
	QueryStrategyList(ctx context.Context, in *QueryStrategyListReq, opts ...grpc.CallOption) (*QueryStrategyListResp, error)
	DeleteStrategy(ctx context.Context, in *DeleteStrategyReq, opts ...grpc.CallOption) (*DeleteStrategyResp, error)
	CreateProcAttr(ctx context.Context, in *CreateProcAttrReq, opts ...grpc.CallOption) (*CreateProcAttrResp, error)
	QueryHostProcAttr(ctx context.Context, in *QueryHostProcAttrReq, opts ...grpc.CallOption) (*QueryHostProcAttrResp, error)
	QueryHostProcAttrList(ctx context.Context, in *QueryHostProcAttrListReq, opts ...grpc.CallOption) (*QueryHostProcAttrListResp, error)
	QueryAppProcAttrList(ctx context.Context, in *QueryAppProcAttrListReq, opts ...grpc.CallOption) (*QueryAppProcAttrListResp, error)
	UpdateProcAttr(ctx context.Context, in *UpdateProcAttrReq, opts ...grpc.CallOption) (*UpdateProcAttrResp, error)
	DeleteProcAttr(ctx context.Context, in *DeleteProcAttrReq, opts ...grpc.CallOption) (*DeleteProcAttrResp, error)
	InitShardingDB(ctx context.Context, in *InitShardingDBReq, opts ...grpc.CallOption) (*InitShardingDBResp, error)
	CreateShardingDB(ctx context.Context, in *CreateShardingDBReq, opts ...grpc.CallOption) (*CreateShardingDBResp, error)
	QueryShardingDB(ctx context.Context, in *QueryShardingDBReq, opts ...grpc.CallOption) (*QueryShardingDBResp, error)
	QueryShardingDBList(ctx context.Context, in *QueryShardingDBListReq, opts ...grpc.CallOption) (*QueryShardingDBListResp, error)
	UpdateShardingDB(ctx context.Context, in *UpdateShardingDBReq, opts ...grpc.CallOption) (*UpdateShardingDBResp, error)
	CreateSharding(ctx context.Context, in *CreateShardingReq, opts ...grpc.CallOption) (*CreateShardingResp, error)
	QuerySharding(ctx context.Context, in *QueryShardingReq, opts ...grpc.CallOption) (*QueryShardingResp, error)
	QueryShardingList(ctx context.Context, in *QueryShardingListReq, opts ...grpc.CallOption) (*QueryShardingListResp, error)
	UpdateSharding(ctx context.Context, in *UpdateShardingReq, opts ...grpc.CallOption) (*UpdateShardingResp, error)
	CreateAudit(ctx context.Context, in *CreateAuditReq, opts ...grpc.CallOption) (*CreateAuditResp, error)
	QueryAuditList(ctx context.Context, in *QueryAuditListReq, opts ...grpc.CallOption) (*QueryAuditListResp, error)
	Healthz(ctx context.Context, in *HealthzReq, opts ...grpc.CallOption) (*HealthzResp, error)
}

type dataManagerClient struct {
	cc *grpc.ClientConn
}

func NewDataManagerClient(cc *grpc.ClientConn) DataManagerClient {
	return &dataManagerClient{cc}
}

func (c *dataManagerClient) QueryAppMetadata(ctx context.Context, in *QueryAppMetadataReq, opts ...grpc.CallOption) (*QueryAppMetadataResp, error) {
	out := new(QueryAppMetadataResp)
	err := grpc.Invoke(ctx, "/datamanager.DataManager/QueryAppMetadata", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataManagerClient) CreateApp(ctx context.Context, in *CreateAppReq, opts ...grpc.CallOption) (*CreateAppResp, error) {
	out := new(CreateAppResp)
	err := grpc.Invoke(ctx, "/datamanager.DataManager/CreateApp", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataManagerClient) QueryApp(ctx context.Context, in *QueryAppReq, opts ...grpc.CallOption) (*QueryAppResp, error) {
	out := new(QueryAppResp)
	err := grpc.Invoke(ctx, "/datamanager.DataManager/QueryApp", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataManagerClient) QueryAppList(ctx context.Context, in *QueryAppListReq, opts ...grpc.CallOption) (*QueryAppListResp, error) {
	out := new(QueryAppListResp)
	err := grpc.Invoke(ctx, "/datamanager.DataManager/QueryAppList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataManagerClient) UpdateApp(ctx context.Context, in *UpdateAppReq, opts ...grpc.CallOption) (*UpdateAppResp, error) {
	out := new(UpdateAppResp)
	err := grpc.Invoke(ctx, "/datamanager.DataManager/UpdateApp", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataManagerClient) DeleteApp(ctx context.Context, in *DeleteAppReq, opts ...grpc.CallOption) (*DeleteAppResp, error) {
	out := new(DeleteAppResp)
	err := grpc.Invoke(ctx, "/datamanager.DataManager/DeleteApp", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataManagerClient) CreateTemplateBind(ctx context.Context, in *CreateTemplateBindReq, opts ...grpc.CallOption) (*CreateTemplateBindResp, error) {
	out := new(CreateTemplateBindResp)
	err := grpc.Invoke(ctx, "/datamanager.DataManager/CreateTemplateBind", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataManagerClient) QueryTemplateBind(ctx context.Context, in *QueryTemplateBindReq, opts ...grpc.CallOption) (*QueryTemplateBindResp, error) {
	out := new(QueryTemplateBindResp)
	err := grpc.Invoke(ctx, "/datamanager.DataManager/QueryTemplateBind", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataManagerClient) QueryTemplateBindList(ctx context.Context, in *QueryTemplateBindListReq, opts ...grpc.CallOption) (*QueryTemplateBindListResp, error) {
	out := new(QueryTemplateBindListResp)
	err := grpc.Invoke(ctx, "/datamanager.DataManager/QueryTemplateBindList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataManagerClient) DeleteTemplateBind(ctx context.Context, in *DeleteTemplateBindReq, opts ...grpc.CallOption) (*DeleteTemplateBindResp, error) {
	out := new(DeleteTemplateBindResp)
	err := grpc.Invoke(ctx, "/datamanager.DataManager/DeleteTemplateBind", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataManagerClient) CreateConfigTemplate(ctx context.Context, in *CreateConfigTemplateReq, opts ...grpc.CallOption) (*CreateConfigTemplateResp, error) {
	out := new(CreateConfigTemplateResp)
	err := grpc.Invoke(ctx, "/datamanager.DataManager/CreateConfigTemplate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataManagerClient) QueryConfigTemplate(ctx context.Context, in *QueryConfigTemplateReq, opts ...grpc.CallOption) (*QueryConfigTemplateResp, error) {
	out := new(QueryConfigTemplateResp)
	err := grpc.Invoke(ctx, "/datamanager.DataManager/QueryConfigTemplate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataManagerClient) QueryConfigTemplateList(ctx context.Context, in *QueryConfigTemplateListReq, opts ...grpc.CallOption) (*QueryConfigTemplateListResp, error) {
	out := new(QueryConfigTemplateListResp)
	err := grpc.Invoke(ctx, "/datamanager.DataManager/QueryConfigTemplateList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataManagerClient) UpdateConfigTemplate(ctx context.Context, in *UpdateConfigTemplateReq, opts ...grpc.CallOption) (*UpdateConfigTemplateResp, error) {
	out := new(UpdateConfigTemplateResp)
	err := grpc.Invoke(ctx, "/datamanager.DataManager/UpdateConfigTemplate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataManagerClient) DeleteConfigTemplate(ctx context.Context, in *DeleteConfigTemplateReq, opts ...grpc.CallOption) (*DeleteConfigTemplateResp, error) {
	out := new(DeleteConfigTemplateResp)
	err := grpc.Invoke(ctx, "/datamanager.DataManager/DeleteConfigTemplate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataManagerClient) CreateConfigTemplateVersion(ctx context.Context, in *CreateConfigTemplateVersionReq, opts ...grpc.CallOption) (*CreateConfigTemplateVersionResp, error) {
	out := new(CreateConfigTemplateVersionResp)
	err := grpc.Invoke(ctx, "/datamanager.DataManager/CreateConfigTemplateVersion", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataManagerClient) QueryConfigTemplateVersion(ctx context.Context, in *QueryConfigTemplateVersionReq, opts ...grpc.CallOption) (*QueryConfigTemplateVersionResp, error) {
	out := new(QueryConfigTemplateVersionResp)
	err := grpc.Invoke(ctx, "/datamanager.DataManager/QueryConfigTemplateVersion", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataManagerClient) QueryConfigTemplateVersionList(ctx context.Context, in *QueryConfigTemplateVersionListReq, opts ...grpc.CallOption) (*QueryConfigTemplateVersionListResp, error) {
	out := new(QueryConfigTemplateVersionListResp)
	err := grpc.Invoke(ctx, "/datamanager.DataManager/QueryConfigTemplateVersionList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataManagerClient) UpdateConfigTemplateVersion(ctx context.Context, in *UpdateConfigTemplateVersionReq, opts ...grpc.CallOption) (*UpdateConfigTemplateVersionResp, error) {
	out := new(UpdateConfigTemplateVersionResp)
	err := grpc.Invoke(ctx, "/datamanager.DataManager/UpdateConfigTemplateVersion", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataManagerClient) DeleteConfigTemplateVersion(ctx context.Context, in *DeleteConfigTemplateVersionReq, opts ...grpc.CallOption) (*DeleteConfigTemplateVersionResp, error) {
	out := new(DeleteConfigTemplateVersionResp)
	err := grpc.Invoke(ctx, "/datamanager.DataManager/DeleteConfigTemplateVersion", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataManagerClient) CreateVariableGroup(ctx context.Context, in *CreateVariableGroupReq, opts ...grpc.CallOption) (*CreateVariableGroupResp, error) {
	out := new(CreateVariableGroupResp)
	err := grpc.Invoke(ctx, "/datamanager.DataManager/CreateVariableGroup", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataManagerClient) QueryVariableGroup(ctx context.Context, in *QueryVariableGroupReq, opts ...grpc.CallOption) (*QueryVariableGroupResp, error) {
	out := new(QueryVariableGroupResp)
	err := grpc.Invoke(ctx, "/datamanager.DataManager/QueryVariableGroup", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataManagerClient) QueryVariableGroupList(ctx context.Context, in *QueryVariableGroupListReq, opts ...grpc.CallOption) (*QueryVariableGroupListResp, error) {
	out := new(QueryVariableGroupListResp)
	err := grpc.Invoke(ctx, "/datamanager.DataManager/QueryVariableGroupList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataManagerClient) DeleteVariableGroup(ctx context.Context, in *DeleteVariableGroupReq, opts ...grpc.CallOption) (*DeleteVariableGroupResp, error) {
	out := new(DeleteVariableGroupResp)
	err := grpc.Invoke(ctx, "/datamanager.DataManager/DeleteVariableGroup", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataManagerClient) CreateVariable(ctx context.Context, in *CreateVariableReq, opts ...grpc.CallOption) (*CreateVariableResp, error) {
	out := new(CreateVariableResp)
	err := grpc.Invoke(ctx, "/datamanager.DataManager/CreateVariable", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataManagerClient) UpdateVariable(ctx context.Context, in *UpdateVariableReq, opts ...grpc.CallOption) (*UpdateVariableResp, error) {
	out := new(UpdateVariableResp)
	err := grpc.Invoke(ctx, "/datamanager.DataManager/UpdateVariable", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataManagerClient) QueryVariable(ctx context.Context, in *QueryVariableReq, opts ...grpc.CallOption) (*QueryVariableResp, error) {
	out := new(QueryVariableResp)
	err := grpc.Invoke(ctx, "/datamanager.DataManager/QueryVariable", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataManagerClient) QueryVariableList(ctx context.Context, in *QueryVariableListReq, opts ...grpc.CallOption) (*QueryVariableListResp, error) {
	out := new(QueryVariableListResp)
	err := grpc.Invoke(ctx, "/datamanager.DataManager/QueryVariableList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataManagerClient) DeleteVariable(ctx context.Context, in *DeleteVariableReq, opts ...grpc.CallOption) (*DeleteVariableResp, error) {
	out := new(DeleteVariableResp)
	err := grpc.Invoke(ctx, "/datamanager.DataManager/DeleteVariable", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataManagerClient) CreateConfig(ctx context.Context, in *CreateConfigReq, opts ...grpc.CallOption) (*CreateConfigResp, error) {
	out := new(CreateConfigResp)
	err := grpc.Invoke(ctx, "/datamanager.DataManager/CreateConfig", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataManagerClient) QueryConfig(ctx context.Context, in *QueryConfigReq, opts ...grpc.CallOption) (*QueryConfigResp, error) {
	out := new(QueryConfigResp)
	err := grpc.Invoke(ctx, "/datamanager.DataManager/QueryConfig", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataManagerClient) QueryConfigList(ctx context.Context, in *QueryConfigListReq, opts ...grpc.CallOption) (*QueryConfigListResp, error) {
	out := new(QueryConfigListResp)
	err := grpc.Invoke(ctx, "/datamanager.DataManager/QueryConfigList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataManagerClient) UpdateConfig(ctx context.Context, in *UpdateConfigReq, opts ...grpc.CallOption) (*UpdateConfigResp, error) {
	out := new(UpdateConfigResp)
	err := grpc.Invoke(ctx, "/datamanager.DataManager/UpdateConfig", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataManagerClient) DeleteConfig(ctx context.Context, in *DeleteConfigReq, opts ...grpc.CallOption) (*DeleteConfigResp, error) {
	out := new(DeleteConfigResp)
	err := grpc.Invoke(ctx, "/datamanager.DataManager/DeleteConfig", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataManagerClient) CreateConfigContent(ctx context.Context, in *CreateConfigContentReq, opts ...grpc.CallOption) (*CreateConfigContentResp, error) {
	out := new(CreateConfigContentResp)
	err := grpc.Invoke(ctx, "/datamanager.DataManager/CreateConfigContent", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataManagerClient) QueryConfigContent(ctx context.Context, in *QueryConfigContentReq, opts ...grpc.CallOption) (*QueryConfigContentResp, error) {
	out := new(QueryConfigContentResp)
	err := grpc.Invoke(ctx, "/datamanager.DataManager/QueryConfigContent", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataManagerClient) QueryConfigContentList(ctx context.Context, in *QueryConfigContentListReq, opts ...grpc.CallOption) (*QueryConfigContentListResp, error) {
	out := new(QueryConfigContentListResp)
	err := grpc.Invoke(ctx, "/datamanager.DataManager/QueryConfigContentList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataManagerClient) QueryReleaseConfigContent(ctx context.Context, in *QueryReleaseConfigContentReq, opts ...grpc.CallOption) (*QueryReleaseConfigContentResp, error) {
	out := new(QueryReleaseConfigContentResp)
	err := grpc.Invoke(ctx, "/datamanager.DataManager/QueryReleaseConfigContent", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataManagerClient) CreateCommit(ctx context.Context, in *CreateCommitReq, opts ...grpc.CallOption) (*CreateCommitResp, error) {
	out := new(CreateCommitResp)
	err := grpc.Invoke(ctx, "/datamanager.DataManager/CreateCommit", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataManagerClient) QueryCommit(ctx context.Context, in *QueryCommitReq, opts ...grpc.CallOption) (*QueryCommitResp, error) {
	out := new(QueryCommitResp)
	err := grpc.Invoke(ctx, "/datamanager.DataManager/QueryCommit", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataManagerClient) QueryHistoryCommits(ctx context.Context, in *QueryHistoryCommitsReq, opts ...grpc.CallOption) (*QueryHistoryCommitsResp, error) {
	out := new(QueryHistoryCommitsResp)
	err := grpc.Invoke(ctx, "/datamanager.DataManager/QueryHistoryCommits", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataManagerClient) UpdateCommit(ctx context.Context, in *UpdateCommitReq, opts ...grpc.CallOption) (*UpdateCommitResp, error) {
	out := new(UpdateCommitResp)
	err := grpc.Invoke(ctx, "/datamanager.DataManager/UpdateCommit", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataManagerClient) CancelCommit(ctx context.Context, in *CancelCommitReq, opts ...grpc.CallOption) (*CancelCommitResp, error) {
	out := new(CancelCommitResp)
	err := grpc.Invoke(ctx, "/datamanager.DataManager/CancelCommit", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataManagerClient) ConfirmCommit(ctx context.Context, in *ConfirmCommitReq, opts ...grpc.CallOption) (*ConfirmCommitResp, error) {
	out := new(ConfirmCommitResp)
	err := grpc.Invoke(ctx, "/datamanager.DataManager/ConfirmCommit", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataManagerClient) CreateMultiCommitWithContent(ctx context.Context, in *CreateMultiCommitWithContentReq, opts ...grpc.CallOption) (*CreateMultiCommitWithContentResp, error) {
	out := new(CreateMultiCommitWithContentResp)
	err := grpc.Invoke(ctx, "/datamanager.DataManager/CreateMultiCommitWithContent", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataManagerClient) CreateMultiCommit(ctx context.Context, in *CreateMultiCommitReq, opts ...grpc.CallOption) (*CreateMultiCommitResp, error) {
	out := new(CreateMultiCommitResp)
	err := grpc.Invoke(ctx, "/datamanager.DataManager/CreateMultiCommit", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataManagerClient) QueryMultiCommit(ctx context.Context, in *QueryMultiCommitReq, opts ...grpc.CallOption) (*QueryMultiCommitResp, error) {
	out := new(QueryMultiCommitResp)
	err := grpc.Invoke(ctx, "/datamanager.DataManager/QueryMultiCommit", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataManagerClient) QueryHistoryMultiCommits(ctx context.Context, in *QueryHistoryMultiCommitsReq, opts ...grpc.CallOption) (*QueryHistoryMultiCommitsResp, error) {
	out := new(QueryHistoryMultiCommitsResp)
	err := grpc.Invoke(ctx, "/datamanager.DataManager/QueryHistoryMultiCommits", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataManagerClient) QueryMultiCommitSubList(ctx context.Context, in *QueryMultiCommitSubListReq, opts ...grpc.CallOption) (*QueryMultiCommitSubListResp, error) {
	out := new(QueryMultiCommitSubListResp)
	err := grpc.Invoke(ctx, "/datamanager.DataManager/QueryMultiCommitSubList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataManagerClient) UpdateMultiCommit(ctx context.Context, in *UpdateMultiCommitReq, opts ...grpc.CallOption) (*UpdateMultiCommitResp, error) {
	out := new(UpdateMultiCommitResp)
	err := grpc.Invoke(ctx, "/datamanager.DataManager/UpdateMultiCommit", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataManagerClient) CancelMultiCommit(ctx context.Context, in *CancelMultiCommitReq, opts ...grpc.CallOption) (*CancelMultiCommitResp, error) {
	out := new(CancelMultiCommitResp)
	err := grpc.Invoke(ctx, "/datamanager.DataManager/CancelMultiCommit", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataManagerClient) ConfirmMultiCommit(ctx context.Context, in *ConfirmMultiCommitReq, opts ...grpc.CallOption) (*ConfirmMultiCommitResp, error) {
	out := new(ConfirmMultiCommitResp)
	err := grpc.Invoke(ctx, "/datamanager.DataManager/ConfirmMultiCommit", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataManagerClient) CreateRelease(ctx context.Context, in *CreateReleaseReq, opts ...grpc.CallOption) (*CreateReleaseResp, error) {
	out := new(CreateReleaseResp)
	err := grpc.Invoke(ctx, "/datamanager.DataManager/CreateRelease", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataManagerClient) QueryRelease(ctx context.Context, in *QueryReleaseReq, opts ...grpc.CallOption) (*QueryReleaseResp, error) {
	out := new(QueryReleaseResp)
	err := grpc.Invoke(ctx, "/datamanager.DataManager/QueryRelease", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataManagerClient) QueryNewestReleases(ctx context.Context, in *QueryNewestReleasesReq, opts ...grpc.CallOption) (*QueryNewestReleasesResp, error) {
	out := new(QueryNewestReleasesResp)
	err := grpc.Invoke(ctx, "/datamanager.DataManager/QueryNewestReleases", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataManagerClient) QueryHistoryReleases(ctx context.Context, in *QueryHistoryReleasesReq, opts ...grpc.CallOption) (*QueryHistoryReleasesResp, error) {
	out := new(QueryHistoryReleasesResp)
	err := grpc.Invoke(ctx, "/datamanager.DataManager/QueryHistoryReleases", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataManagerClient) UpdateRelease(ctx context.Context, in *UpdateReleaseReq, opts ...grpc.CallOption) (*UpdateReleaseResp, error) {
	out := new(UpdateReleaseResp)
	err := grpc.Invoke(ctx, "/datamanager.DataManager/UpdateRelease", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataManagerClient) CancelRelease(ctx context.Context, in *CancelReleaseReq, opts ...grpc.CallOption) (*CancelReleaseResp, error) {
	out := new(CancelReleaseResp)
	err := grpc.Invoke(ctx, "/datamanager.DataManager/CancelRelease", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataManagerClient) RollbackRelease(ctx context.Context, in *RollbackReleaseReq, opts ...grpc.CallOption) (*RollbackReleaseResp, error) {
	out := new(RollbackReleaseResp)
	err := grpc.Invoke(ctx, "/datamanager.DataManager/RollbackRelease", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataManagerClient) PublishRelease(ctx context.Context, in *PublishReleaseReq, opts ...grpc.CallOption) (*PublishReleaseResp, error) {
	out := new(PublishReleaseResp)
	err := grpc.Invoke(ctx, "/datamanager.DataManager/PublishRelease", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataManagerClient) CreateMultiRelease(ctx context.Context, in *CreateMultiReleaseReq, opts ...grpc.CallOption) (*CreateMultiReleaseResp, error) {
	out := new(CreateMultiReleaseResp)
	err := grpc.Invoke(ctx, "/datamanager.DataManager/CreateMultiRelease", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataManagerClient) QueryMultiRelease(ctx context.Context, in *QueryMultiReleaseReq, opts ...grpc.CallOption) (*QueryMultiReleaseResp, error) {
	out := new(QueryMultiReleaseResp)
	err := grpc.Invoke(ctx, "/datamanager.DataManager/QueryMultiRelease", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataManagerClient) QueryMultiReleaseSubList(ctx context.Context, in *QueryMultiReleaseSubListReq, opts ...grpc.CallOption) (*QueryMultiReleaseSubListResp, error) {
	out := new(QueryMultiReleaseSubListResp)
	err := grpc.Invoke(ctx, "/datamanager.DataManager/QueryMultiReleaseSubList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataManagerClient) UpdateMultiRelease(ctx context.Context, in *UpdateMultiReleaseReq, opts ...grpc.CallOption) (*UpdateMultiReleaseResp, error) {
	out := new(UpdateMultiReleaseResp)
	err := grpc.Invoke(ctx, "/datamanager.DataManager/UpdateMultiRelease", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataManagerClient) CancelMultiRelease(ctx context.Context, in *CancelMultiReleaseReq, opts ...grpc.CallOption) (*CancelMultiReleaseResp, error) {
	out := new(CancelMultiReleaseResp)
	err := grpc.Invoke(ctx, "/datamanager.DataManager/CancelMultiRelease", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataManagerClient) PublishMultiRelease(ctx context.Context, in *PublishMultiReleaseReq, opts ...grpc.CallOption) (*PublishMultiReleaseResp, error) {
	out := new(PublishMultiReleaseResp)
	err := grpc.Invoke(ctx, "/datamanager.DataManager/PublishMultiRelease", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataManagerClient) RollbackMultiRelease(ctx context.Context, in *RollbackMultiReleaseReq, opts ...grpc.CallOption) (*RollbackMultiReleaseResp, error) {
	out := new(RollbackMultiReleaseResp)
	err := grpc.Invoke(ctx, "/datamanager.DataManager/RollbackMultiRelease", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataManagerClient) QueryHistoryMultiReleases(ctx context.Context, in *QueryHistoryMultiReleasesReq, opts ...grpc.CallOption) (*QueryHistoryMultiReleasesResp, error) {
	out := new(QueryHistoryMultiReleasesResp)
	err := grpc.Invoke(ctx, "/datamanager.DataManager/QueryHistoryMultiReleases", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataManagerClient) CreateAppInstance(ctx context.Context, in *CreateAppInstanceReq, opts ...grpc.CallOption) (*CreateAppInstanceResp, error) {
	out := new(CreateAppInstanceResp)
	err := grpc.Invoke(ctx, "/datamanager.DataManager/CreateAppInstance", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataManagerClient) UpdateAppInstance(ctx context.Context, in *UpdateAppInstanceReq, opts ...grpc.CallOption) (*UpdateAppInstanceResp, error) {
	out := new(UpdateAppInstanceResp)
	err := grpc.Invoke(ctx, "/datamanager.DataManager/UpdateAppInstance", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataManagerClient) QueryReachableAppInstances(ctx context.Context, in *QueryReachableAppInstancesReq, opts ...grpc.CallOption) (*QueryReachableAppInstancesResp, error) {
	out := new(QueryReachableAppInstancesResp)
	err := grpc.Invoke(ctx, "/datamanager.DataManager/QueryReachableAppInstances", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataManagerClient) CreateAppInstanceRelease(ctx context.Context, in *CreateAppInstanceReleaseReq, opts ...grpc.CallOption) (*CreateAppInstanceReleaseResp, error) {
	out := new(CreateAppInstanceReleaseResp)
	err := grpc.Invoke(ctx, "/datamanager.DataManager/CreateAppInstanceRelease", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataManagerClient) QueryAppInstanceRelease(ctx context.Context, in *QueryAppInstanceReleaseReq, opts ...grpc.CallOption) (*QueryAppInstanceReleaseResp, error) {
	out := new(QueryAppInstanceReleaseResp)
	err := grpc.Invoke(ctx, "/datamanager.DataManager/QueryAppInstanceRelease", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataManagerClient) QueryEffectedAppInstances(ctx context.Context, in *QueryEffectedAppInstancesReq, opts ...grpc.CallOption) (*QueryEffectedAppInstancesResp, error) {
	out := new(QueryEffectedAppInstancesResp)
	err := grpc.Invoke(ctx, "/datamanager.DataManager/QueryEffectedAppInstances", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataManagerClient) QueryMatchedAppInstances(ctx context.Context, in *QueryMatchedAppInstancesReq, opts ...grpc.CallOption) (*QueryMatchedAppInstancesResp, error) {
	out := new(QueryMatchedAppInstancesResp)
	err := grpc.Invoke(ctx, "/datamanager.DataManager/QueryMatchedAppInstances", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataManagerClient) CreateStrategy(ctx context.Context, in *CreateStrategyReq, opts ...grpc.CallOption) (*CreateStrategyResp, error) {
	out := new(CreateStrategyResp)
	err := grpc.Invoke(ctx, "/datamanager.DataManager/CreateStrategy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataManagerClient) QueryStrategy(ctx context.Context, in *QueryStrategyReq, opts ...grpc.CallOption) (*QueryStrategyResp, error) {
	out := new(QueryStrategyResp)
	err := grpc.Invoke(ctx, "/datamanager.DataManager/QueryStrategy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataManagerClient) QueryStrategyList(ctx context.Context, in *QueryStrategyListReq, opts ...grpc.CallOption) (*QueryStrategyListResp, error) {
	out := new(QueryStrategyListResp)
	err := grpc.Invoke(ctx, "/datamanager.DataManager/QueryStrategyList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataManagerClient) DeleteStrategy(ctx context.Context, in *DeleteStrategyReq, opts ...grpc.CallOption) (*DeleteStrategyResp, error) {
	out := new(DeleteStrategyResp)
	err := grpc.Invoke(ctx, "/datamanager.DataManager/DeleteStrategy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataManagerClient) CreateProcAttr(ctx context.Context, in *CreateProcAttrReq, opts ...grpc.CallOption) (*CreateProcAttrResp, error) {
	out := new(CreateProcAttrResp)
	err := grpc.Invoke(ctx, "/datamanager.DataManager/CreateProcAttr", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataManagerClient) QueryHostProcAttr(ctx context.Context, in *QueryHostProcAttrReq, opts ...grpc.CallOption) (*QueryHostProcAttrResp, error) {
	out := new(QueryHostProcAttrResp)
	err := grpc.Invoke(ctx, "/datamanager.DataManager/QueryHostProcAttr", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataManagerClient) QueryHostProcAttrList(ctx context.Context, in *QueryHostProcAttrListReq, opts ...grpc.CallOption) (*QueryHostProcAttrListResp, error) {
	out := new(QueryHostProcAttrListResp)
	err := grpc.Invoke(ctx, "/datamanager.DataManager/QueryHostProcAttrList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataManagerClient) QueryAppProcAttrList(ctx context.Context, in *QueryAppProcAttrListReq, opts ...grpc.CallOption) (*QueryAppProcAttrListResp, error) {
	out := new(QueryAppProcAttrListResp)
	err := grpc.Invoke(ctx, "/datamanager.DataManager/QueryAppProcAttrList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataManagerClient) UpdateProcAttr(ctx context.Context, in *UpdateProcAttrReq, opts ...grpc.CallOption) (*UpdateProcAttrResp, error) {
	out := new(UpdateProcAttrResp)
	err := grpc.Invoke(ctx, "/datamanager.DataManager/UpdateProcAttr", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataManagerClient) DeleteProcAttr(ctx context.Context, in *DeleteProcAttrReq, opts ...grpc.CallOption) (*DeleteProcAttrResp, error) {
	out := new(DeleteProcAttrResp)
	err := grpc.Invoke(ctx, "/datamanager.DataManager/DeleteProcAttr", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataManagerClient) InitShardingDB(ctx context.Context, in *InitShardingDBReq, opts ...grpc.CallOption) (*InitShardingDBResp, error) {
	out := new(InitShardingDBResp)
	err := grpc.Invoke(ctx, "/datamanager.DataManager/InitShardingDB", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataManagerClient) CreateShardingDB(ctx context.Context, in *CreateShardingDBReq, opts ...grpc.CallOption) (*CreateShardingDBResp, error) {
	out := new(CreateShardingDBResp)
	err := grpc.Invoke(ctx, "/datamanager.DataManager/CreateShardingDB", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataManagerClient) QueryShardingDB(ctx context.Context, in *QueryShardingDBReq, opts ...grpc.CallOption) (*QueryShardingDBResp, error) {
	out := new(QueryShardingDBResp)
	err := grpc.Invoke(ctx, "/datamanager.DataManager/QueryShardingDB", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataManagerClient) QueryShardingDBList(ctx context.Context, in *QueryShardingDBListReq, opts ...grpc.CallOption) (*QueryShardingDBListResp, error) {
	out := new(QueryShardingDBListResp)
	err := grpc.Invoke(ctx, "/datamanager.DataManager/QueryShardingDBList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataManagerClient) UpdateShardingDB(ctx context.Context, in *UpdateShardingDBReq, opts ...grpc.CallOption) (*UpdateShardingDBResp, error) {
	out := new(UpdateShardingDBResp)
	err := grpc.Invoke(ctx, "/datamanager.DataManager/UpdateShardingDB", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataManagerClient) CreateSharding(ctx context.Context, in *CreateShardingReq, opts ...grpc.CallOption) (*CreateShardingResp, error) {
	out := new(CreateShardingResp)
	err := grpc.Invoke(ctx, "/datamanager.DataManager/CreateSharding", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataManagerClient) QuerySharding(ctx context.Context, in *QueryShardingReq, opts ...grpc.CallOption) (*QueryShardingResp, error) {
	out := new(QueryShardingResp)
	err := grpc.Invoke(ctx, "/datamanager.DataManager/QuerySharding", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataManagerClient) QueryShardingList(ctx context.Context, in *QueryShardingListReq, opts ...grpc.CallOption) (*QueryShardingListResp, error) {
	out := new(QueryShardingListResp)
	err := grpc.Invoke(ctx, "/datamanager.DataManager/QueryShardingList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataManagerClient) UpdateSharding(ctx context.Context, in *UpdateShardingReq, opts ...grpc.CallOption) (*UpdateShardingResp, error) {
	out := new(UpdateShardingResp)
	err := grpc.Invoke(ctx, "/datamanager.DataManager/UpdateSharding", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataManagerClient) CreateAudit(ctx context.Context, in *CreateAuditReq, opts ...grpc.CallOption) (*CreateAuditResp, error) {
	out := new(CreateAuditResp)
	err := grpc.Invoke(ctx, "/datamanager.DataManager/CreateAudit", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataManagerClient) QueryAuditList(ctx context.Context, in *QueryAuditListReq, opts ...grpc.CallOption) (*QueryAuditListResp, error) {
	out := new(QueryAuditListResp)
	err := grpc.Invoke(ctx, "/datamanager.DataManager/QueryAuditList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataManagerClient) Healthz(ctx context.Context, in *HealthzReq, opts ...grpc.CallOption) (*HealthzResp, error) {
	out := new(HealthzResp)
	err := grpc.Invoke(ctx, "/datamanager.DataManager/Healthz", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for DataManager service

type DataManagerServer interface {
	QueryAppMetadata(context.Context, *QueryAppMetadataReq) (*QueryAppMetadataResp, error)
	CreateApp(context.Context, *CreateAppReq) (*CreateAppResp, error)
	QueryApp(context.Context, *QueryAppReq) (*QueryAppResp, error)
	QueryAppList(context.Context, *QueryAppListReq) (*QueryAppListResp, error)
	UpdateApp(context.Context, *UpdateAppReq) (*UpdateAppResp, error)
	DeleteApp(context.Context, *DeleteAppReq) (*DeleteAppResp, error)
	CreateTemplateBind(context.Context, *CreateTemplateBindReq) (*CreateTemplateBindResp, error)
	QueryTemplateBind(context.Context, *QueryTemplateBindReq) (*QueryTemplateBindResp, error)
	QueryTemplateBindList(context.Context, *QueryTemplateBindListReq) (*QueryTemplateBindListResp, error)
	DeleteTemplateBind(context.Context, *DeleteTemplateBindReq) (*DeleteTemplateBindResp, error)
	CreateConfigTemplate(context.Context, *CreateConfigTemplateReq) (*CreateConfigTemplateResp, error)
	QueryConfigTemplate(context.Context, *QueryConfigTemplateReq) (*QueryConfigTemplateResp, error)
	QueryConfigTemplateList(context.Context, *QueryConfigTemplateListReq) (*QueryConfigTemplateListResp, error)
	UpdateConfigTemplate(context.Context, *UpdateConfigTemplateReq) (*UpdateConfigTemplateResp, error)
	DeleteConfigTemplate(context.Context, *DeleteConfigTemplateReq) (*DeleteConfigTemplateResp, error)
	CreateConfigTemplateVersion(context.Context, *CreateConfigTemplateVersionReq) (*CreateConfigTemplateVersionResp, error)
	QueryConfigTemplateVersion(context.Context, *QueryConfigTemplateVersionReq) (*QueryConfigTemplateVersionResp, error)
	QueryConfigTemplateVersionList(context.Context, *QueryConfigTemplateVersionListReq) (*QueryConfigTemplateVersionListResp, error)
	UpdateConfigTemplateVersion(context.Context, *UpdateConfigTemplateVersionReq) (*UpdateConfigTemplateVersionResp, error)
	DeleteConfigTemplateVersion(context.Context, *DeleteConfigTemplateVersionReq) (*DeleteConfigTemplateVersionResp, error)
	CreateVariableGroup(context.Context, *CreateVariableGroupReq) (*CreateVariableGroupResp, error)
	QueryVariableGroup(context.Context, *QueryVariableGroupReq) (*QueryVariableGroupResp, error)
	QueryVariableGroupList(context.Context, *QueryVariableGroupListReq) (*QueryVariableGroupListResp, error)
	DeleteVariableGroup(context.Context, *DeleteVariableGroupReq) (*DeleteVariableGroupResp, error)
	CreateVariable(context.Context, *CreateVariableReq) (*CreateVariableResp, error)
	UpdateVariable(context.Context, *UpdateVariableReq) (*UpdateVariableResp, error)
	QueryVariable(context.Context, *QueryVariableReq) (*QueryVariableResp, error)
	QueryVariableList(context.Context, *QueryVariableListReq) (*QueryVariableListResp, error)
	DeleteVariable(context.Context, *DeleteVariableReq) (*DeleteVariableResp, error)
	CreateConfig(context.Context, *CreateConfigReq) (*CreateConfigResp, error)
	QueryConfig(context.Context, *QueryConfigReq) (*QueryConfigResp, error)
	QueryConfigList(context.Context, *QueryConfigListReq) (*QueryConfigListResp, error)
	UpdateConfig(context.Context, *UpdateConfigReq) (*UpdateConfigResp, error)
	DeleteConfig(context.Context, *DeleteConfigReq) (*DeleteConfigResp, error)
	CreateConfigContent(context.Context, *CreateConfigContentReq) (*CreateConfigContentResp, error)
	QueryConfigContent(context.Context, *QueryConfigContentReq) (*QueryConfigContentResp, error)
	QueryConfigContentList(context.Context, *QueryConfigContentListReq) (*QueryConfigContentListResp, error)
	QueryReleaseConfigContent(context.Context, *QueryReleaseConfigContentReq) (*QueryReleaseConfigContentResp, error)
	CreateCommit(context.Context, *CreateCommitReq) (*CreateCommitResp, error)
	QueryCommit(context.Context, *QueryCommitReq) (*QueryCommitResp, error)
	QueryHistoryCommits(context.Context, *QueryHistoryCommitsReq) (*QueryHistoryCommitsResp, error)
	UpdateCommit(context.Context, *UpdateCommitReq) (*UpdateCommitResp, error)
	CancelCommit(context.Context, *CancelCommitReq) (*CancelCommitResp, error)
	ConfirmCommit(context.Context, *ConfirmCommitReq) (*ConfirmCommitResp, error)
	CreateMultiCommitWithContent(context.Context, *CreateMultiCommitWithContentReq) (*CreateMultiCommitWithContentResp, error)
	CreateMultiCommit(context.Context, *CreateMultiCommitReq) (*CreateMultiCommitResp, error)
	QueryMultiCommit(context.Context, *QueryMultiCommitReq) (*QueryMultiCommitResp, error)
	QueryHistoryMultiCommits(context.Context, *QueryHistoryMultiCommitsReq) (*QueryHistoryMultiCommitsResp, error)
	QueryMultiCommitSubList(context.Context, *QueryMultiCommitSubListReq) (*QueryMultiCommitSubListResp, error)
	UpdateMultiCommit(context.Context, *UpdateMultiCommitReq) (*UpdateMultiCommitResp, error)
	CancelMultiCommit(context.Context, *CancelMultiCommitReq) (*CancelMultiCommitResp, error)
	ConfirmMultiCommit(context.Context, *ConfirmMultiCommitReq) (*ConfirmMultiCommitResp, error)
	CreateRelease(context.Context, *CreateReleaseReq) (*CreateReleaseResp, error)
	QueryRelease(context.Context, *QueryReleaseReq) (*QueryReleaseResp, error)
	QueryNewestReleases(context.Context, *QueryNewestReleasesReq) (*QueryNewestReleasesResp, error)
	QueryHistoryReleases(context.Context, *QueryHistoryReleasesReq) (*QueryHistoryReleasesResp, error)
	UpdateRelease(context.Context, *UpdateReleaseReq) (*UpdateReleaseResp, error)
	CancelRelease(context.Context, *CancelReleaseReq) (*CancelReleaseResp, error)
	RollbackRelease(context.Context, *RollbackReleaseReq) (*RollbackReleaseResp, error)
	PublishRelease(context.Context, *PublishReleaseReq) (*PublishReleaseResp, error)
	CreateMultiRelease(context.Context, *CreateMultiReleaseReq) (*CreateMultiReleaseResp, error)
	QueryMultiRelease(context.Context, *QueryMultiReleaseReq) (*QueryMultiReleaseResp, error)
	QueryMultiReleaseSubList(context.Context, *QueryMultiReleaseSubListReq) (*QueryMultiReleaseSubListResp, error)
	UpdateMultiRelease(context.Context, *UpdateMultiReleaseReq) (*UpdateMultiReleaseResp, error)
	CancelMultiRelease(context.Context, *CancelMultiReleaseReq) (*CancelMultiReleaseResp, error)
	PublishMultiRelease(context.Context, *PublishMultiReleaseReq) (*PublishMultiReleaseResp, error)
	RollbackMultiRelease(context.Context, *RollbackMultiReleaseReq) (*RollbackMultiReleaseResp, error)
	QueryHistoryMultiReleases(context.Context, *QueryHistoryMultiReleasesReq) (*QueryHistoryMultiReleasesResp, error)
	CreateAppInstance(context.Context, *CreateAppInstanceReq) (*CreateAppInstanceResp, error)
	UpdateAppInstance(context.Context, *UpdateAppInstanceReq) (*UpdateAppInstanceResp, error)
	QueryReachableAppInstances(context.Context, *QueryReachableAppInstancesReq) (*QueryReachableAppInstancesResp, error)
	CreateAppInstanceRelease(context.Context, *CreateAppInstanceReleaseReq) (*CreateAppInstanceReleaseResp, error)
	QueryAppInstanceRelease(context.Context, *QueryAppInstanceReleaseReq) (*QueryAppInstanceReleaseResp, error)
	QueryEffectedAppInstances(context.Context, *QueryEffectedAppInstancesReq) (*QueryEffectedAppInstancesResp, error)
	QueryMatchedAppInstances(context.Context, *QueryMatchedAppInstancesReq) (*QueryMatchedAppInstancesResp, error)
	CreateStrategy(context.Context, *CreateStrategyReq) (*CreateStrategyResp, error)
	QueryStrategy(context.Context, *QueryStrategyReq) (*QueryStrategyResp, error)
	QueryStrategyList(context.Context, *QueryStrategyListReq) (*QueryStrategyListResp, error)
	DeleteStrategy(context.Context, *DeleteStrategyReq) (*DeleteStrategyResp, error)
	CreateProcAttr(context.Context, *CreateProcAttrReq) (*CreateProcAttrResp, error)
	QueryHostProcAttr(context.Context, *QueryHostProcAttrReq) (*QueryHostProcAttrResp, error)
	QueryHostProcAttrList(context.Context, *QueryHostProcAttrListReq) (*QueryHostProcAttrListResp, error)
	QueryAppProcAttrList(context.Context, *QueryAppProcAttrListReq) (*QueryAppProcAttrListResp, error)
	UpdateProcAttr(context.Context, *UpdateProcAttrReq) (*UpdateProcAttrResp, error)
	DeleteProcAttr(context.Context, *DeleteProcAttrReq) (*DeleteProcAttrResp, error)
	InitShardingDB(context.Context, *InitShardingDBReq) (*InitShardingDBResp, error)
	CreateShardingDB(context.Context, *CreateShardingDBReq) (*CreateShardingDBResp, error)
	QueryShardingDB(context.Context, *QueryShardingDBReq) (*QueryShardingDBResp, error)
	QueryShardingDBList(context.Context, *QueryShardingDBListReq) (*QueryShardingDBListResp, error)
	UpdateShardingDB(context.Context, *UpdateShardingDBReq) (*UpdateShardingDBResp, error)
	CreateSharding(context.Context, *CreateShardingReq) (*CreateShardingResp, error)
	QuerySharding(context.Context, *QueryShardingReq) (*QueryShardingResp, error)
	QueryShardingList(context.Context, *QueryShardingListReq) (*QueryShardingListResp, error)
	UpdateSharding(context.Context, *UpdateShardingReq) (*UpdateShardingResp, error)
	CreateAudit(context.Context, *CreateAuditReq) (*CreateAuditResp, error)
	QueryAuditList(context.Context, *QueryAuditListReq) (*QueryAuditListResp, error)
	Healthz(context.Context, *HealthzReq) (*HealthzResp, error)
}

func RegisterDataManagerServer(s *grpc.Server, srv DataManagerServer) {
	s.RegisterService(&_DataManager_serviceDesc, srv)
}

func _DataManager_QueryAppMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAppMetadataReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataManagerServer).QueryAppMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datamanager.DataManager/QueryAppMetadata",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataManagerServer).QueryAppMetadata(ctx, req.(*QueryAppMetadataReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataManager_CreateApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAppReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataManagerServer).CreateApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datamanager.DataManager/CreateApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataManagerServer).CreateApp(ctx, req.(*CreateAppReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataManager_QueryApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAppReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataManagerServer).QueryApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datamanager.DataManager/QueryApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataManagerServer).QueryApp(ctx, req.(*QueryAppReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataManager_QueryAppList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAppListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataManagerServer).QueryAppList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datamanager.DataManager/QueryAppList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataManagerServer).QueryAppList(ctx, req.(*QueryAppListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataManager_UpdateApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAppReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataManagerServer).UpdateApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datamanager.DataManager/UpdateApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataManagerServer).UpdateApp(ctx, req.(*UpdateAppReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataManager_DeleteApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAppReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataManagerServer).DeleteApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datamanager.DataManager/DeleteApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataManagerServer).DeleteApp(ctx, req.(*DeleteAppReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataManager_CreateTemplateBind_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTemplateBindReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataManagerServer).CreateTemplateBind(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datamanager.DataManager/CreateTemplateBind",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataManagerServer).CreateTemplateBind(ctx, req.(*CreateTemplateBindReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataManager_QueryTemplateBind_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTemplateBindReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataManagerServer).QueryTemplateBind(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datamanager.DataManager/QueryTemplateBind",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataManagerServer).QueryTemplateBind(ctx, req.(*QueryTemplateBindReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataManager_QueryTemplateBindList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTemplateBindListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataManagerServer).QueryTemplateBindList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datamanager.DataManager/QueryTemplateBindList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataManagerServer).QueryTemplateBindList(ctx, req.(*QueryTemplateBindListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataManager_DeleteTemplateBind_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTemplateBindReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataManagerServer).DeleteTemplateBind(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datamanager.DataManager/DeleteTemplateBind",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataManagerServer).DeleteTemplateBind(ctx, req.(*DeleteTemplateBindReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataManager_CreateConfigTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateConfigTemplateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataManagerServer).CreateConfigTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datamanager.DataManager/CreateConfigTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataManagerServer).CreateConfigTemplate(ctx, req.(*CreateConfigTemplateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataManager_QueryConfigTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryConfigTemplateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataManagerServer).QueryConfigTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datamanager.DataManager/QueryConfigTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataManagerServer).QueryConfigTemplate(ctx, req.(*QueryConfigTemplateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataManager_QueryConfigTemplateList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryConfigTemplateListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataManagerServer).QueryConfigTemplateList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datamanager.DataManager/QueryConfigTemplateList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataManagerServer).QueryConfigTemplateList(ctx, req.(*QueryConfigTemplateListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataManager_UpdateConfigTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateConfigTemplateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataManagerServer).UpdateConfigTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datamanager.DataManager/UpdateConfigTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataManagerServer).UpdateConfigTemplate(ctx, req.(*UpdateConfigTemplateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataManager_DeleteConfigTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteConfigTemplateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataManagerServer).DeleteConfigTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datamanager.DataManager/DeleteConfigTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataManagerServer).DeleteConfigTemplate(ctx, req.(*DeleteConfigTemplateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataManager_CreateConfigTemplateVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateConfigTemplateVersionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataManagerServer).CreateConfigTemplateVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datamanager.DataManager/CreateConfigTemplateVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataManagerServer).CreateConfigTemplateVersion(ctx, req.(*CreateConfigTemplateVersionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataManager_QueryConfigTemplateVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryConfigTemplateVersionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataManagerServer).QueryConfigTemplateVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datamanager.DataManager/QueryConfigTemplateVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataManagerServer).QueryConfigTemplateVersion(ctx, req.(*QueryConfigTemplateVersionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataManager_QueryConfigTemplateVersionList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryConfigTemplateVersionListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataManagerServer).QueryConfigTemplateVersionList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datamanager.DataManager/QueryConfigTemplateVersionList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataManagerServer).QueryConfigTemplateVersionList(ctx, req.(*QueryConfigTemplateVersionListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataManager_UpdateConfigTemplateVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateConfigTemplateVersionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataManagerServer).UpdateConfigTemplateVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datamanager.DataManager/UpdateConfigTemplateVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataManagerServer).UpdateConfigTemplateVersion(ctx, req.(*UpdateConfigTemplateVersionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataManager_DeleteConfigTemplateVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteConfigTemplateVersionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataManagerServer).DeleteConfigTemplateVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datamanager.DataManager/DeleteConfigTemplateVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataManagerServer).DeleteConfigTemplateVersion(ctx, req.(*DeleteConfigTemplateVersionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataManager_CreateVariableGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateVariableGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataManagerServer).CreateVariableGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datamanager.DataManager/CreateVariableGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataManagerServer).CreateVariableGroup(ctx, req.(*CreateVariableGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataManager_QueryVariableGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryVariableGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataManagerServer).QueryVariableGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datamanager.DataManager/QueryVariableGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataManagerServer).QueryVariableGroup(ctx, req.(*QueryVariableGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataManager_QueryVariableGroupList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryVariableGroupListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataManagerServer).QueryVariableGroupList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datamanager.DataManager/QueryVariableGroupList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataManagerServer).QueryVariableGroupList(ctx, req.(*QueryVariableGroupListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataManager_DeleteVariableGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteVariableGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataManagerServer).DeleteVariableGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datamanager.DataManager/DeleteVariableGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataManagerServer).DeleteVariableGroup(ctx, req.(*DeleteVariableGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataManager_CreateVariable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateVariableReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataManagerServer).CreateVariable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datamanager.DataManager/CreateVariable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataManagerServer).CreateVariable(ctx, req.(*CreateVariableReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataManager_UpdateVariable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateVariableReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataManagerServer).UpdateVariable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datamanager.DataManager/UpdateVariable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataManagerServer).UpdateVariable(ctx, req.(*UpdateVariableReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataManager_QueryVariable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryVariableReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataManagerServer).QueryVariable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datamanager.DataManager/QueryVariable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataManagerServer).QueryVariable(ctx, req.(*QueryVariableReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataManager_QueryVariableList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryVariableListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataManagerServer).QueryVariableList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datamanager.DataManager/QueryVariableList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataManagerServer).QueryVariableList(ctx, req.(*QueryVariableListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataManager_DeleteVariable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteVariableReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataManagerServer).DeleteVariable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datamanager.DataManager/DeleteVariable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataManagerServer).DeleteVariable(ctx, req.(*DeleteVariableReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataManager_CreateConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateConfigReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataManagerServer).CreateConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datamanager.DataManager/CreateConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataManagerServer).CreateConfig(ctx, req.(*CreateConfigReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataManager_QueryConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryConfigReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataManagerServer).QueryConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datamanager.DataManager/QueryConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataManagerServer).QueryConfig(ctx, req.(*QueryConfigReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataManager_QueryConfigList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryConfigListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataManagerServer).QueryConfigList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datamanager.DataManager/QueryConfigList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataManagerServer).QueryConfigList(ctx, req.(*QueryConfigListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataManager_UpdateConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateConfigReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataManagerServer).UpdateConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datamanager.DataManager/UpdateConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataManagerServer).UpdateConfig(ctx, req.(*UpdateConfigReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataManager_DeleteConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteConfigReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataManagerServer).DeleteConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datamanager.DataManager/DeleteConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataManagerServer).DeleteConfig(ctx, req.(*DeleteConfigReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataManager_CreateConfigContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateConfigContentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataManagerServer).CreateConfigContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datamanager.DataManager/CreateConfigContent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataManagerServer).CreateConfigContent(ctx, req.(*CreateConfigContentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataManager_QueryConfigContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryConfigContentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataManagerServer).QueryConfigContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datamanager.DataManager/QueryConfigContent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataManagerServer).QueryConfigContent(ctx, req.(*QueryConfigContentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataManager_QueryConfigContentList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryConfigContentListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataManagerServer).QueryConfigContentList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datamanager.DataManager/QueryConfigContentList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataManagerServer).QueryConfigContentList(ctx, req.(*QueryConfigContentListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataManager_QueryReleaseConfigContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryReleaseConfigContentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataManagerServer).QueryReleaseConfigContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datamanager.DataManager/QueryReleaseConfigContent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataManagerServer).QueryReleaseConfigContent(ctx, req.(*QueryReleaseConfigContentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataManager_CreateCommit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCommitReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataManagerServer).CreateCommit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datamanager.DataManager/CreateCommit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataManagerServer).CreateCommit(ctx, req.(*CreateCommitReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataManager_QueryCommit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCommitReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataManagerServer).QueryCommit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datamanager.DataManager/QueryCommit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataManagerServer).QueryCommit(ctx, req.(*QueryCommitReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataManager_QueryHistoryCommits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryHistoryCommitsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataManagerServer).QueryHistoryCommits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datamanager.DataManager/QueryHistoryCommits",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataManagerServer).QueryHistoryCommits(ctx, req.(*QueryHistoryCommitsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataManager_UpdateCommit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCommitReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataManagerServer).UpdateCommit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datamanager.DataManager/UpdateCommit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataManagerServer).UpdateCommit(ctx, req.(*UpdateCommitReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataManager_CancelCommit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelCommitReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataManagerServer).CancelCommit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datamanager.DataManager/CancelCommit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataManagerServer).CancelCommit(ctx, req.(*CancelCommitReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataManager_ConfirmCommit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfirmCommitReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataManagerServer).ConfirmCommit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datamanager.DataManager/ConfirmCommit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataManagerServer).ConfirmCommit(ctx, req.(*ConfirmCommitReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataManager_CreateMultiCommitWithContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMultiCommitWithContentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataManagerServer).CreateMultiCommitWithContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datamanager.DataManager/CreateMultiCommitWithContent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataManagerServer).CreateMultiCommitWithContent(ctx, req.(*CreateMultiCommitWithContentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataManager_CreateMultiCommit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMultiCommitReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataManagerServer).CreateMultiCommit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datamanager.DataManager/CreateMultiCommit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataManagerServer).CreateMultiCommit(ctx, req.(*CreateMultiCommitReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataManager_QueryMultiCommit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryMultiCommitReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataManagerServer).QueryMultiCommit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datamanager.DataManager/QueryMultiCommit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataManagerServer).QueryMultiCommit(ctx, req.(*QueryMultiCommitReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataManager_QueryHistoryMultiCommits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryHistoryMultiCommitsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataManagerServer).QueryHistoryMultiCommits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datamanager.DataManager/QueryHistoryMultiCommits",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataManagerServer).QueryHistoryMultiCommits(ctx, req.(*QueryHistoryMultiCommitsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataManager_QueryMultiCommitSubList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryMultiCommitSubListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataManagerServer).QueryMultiCommitSubList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datamanager.DataManager/QueryMultiCommitSubList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataManagerServer).QueryMultiCommitSubList(ctx, req.(*QueryMultiCommitSubListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataManager_UpdateMultiCommit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMultiCommitReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataManagerServer).UpdateMultiCommit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datamanager.DataManager/UpdateMultiCommit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataManagerServer).UpdateMultiCommit(ctx, req.(*UpdateMultiCommitReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataManager_CancelMultiCommit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelMultiCommitReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataManagerServer).CancelMultiCommit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datamanager.DataManager/CancelMultiCommit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataManagerServer).CancelMultiCommit(ctx, req.(*CancelMultiCommitReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataManager_ConfirmMultiCommit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfirmMultiCommitReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataManagerServer).ConfirmMultiCommit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datamanager.DataManager/ConfirmMultiCommit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataManagerServer).ConfirmMultiCommit(ctx, req.(*ConfirmMultiCommitReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataManager_CreateRelease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateReleaseReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataManagerServer).CreateRelease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datamanager.DataManager/CreateRelease",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataManagerServer).CreateRelease(ctx, req.(*CreateReleaseReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataManager_QueryRelease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryReleaseReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataManagerServer).QueryRelease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datamanager.DataManager/QueryRelease",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataManagerServer).QueryRelease(ctx, req.(*QueryReleaseReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataManager_QueryNewestReleases_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryNewestReleasesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataManagerServer).QueryNewestReleases(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datamanager.DataManager/QueryNewestReleases",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataManagerServer).QueryNewestReleases(ctx, req.(*QueryNewestReleasesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataManager_QueryHistoryReleases_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryHistoryReleasesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataManagerServer).QueryHistoryReleases(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datamanager.DataManager/QueryHistoryReleases",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataManagerServer).QueryHistoryReleases(ctx, req.(*QueryHistoryReleasesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataManager_UpdateRelease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateReleaseReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataManagerServer).UpdateRelease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datamanager.DataManager/UpdateRelease",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataManagerServer).UpdateRelease(ctx, req.(*UpdateReleaseReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataManager_CancelRelease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelReleaseReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataManagerServer).CancelRelease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datamanager.DataManager/CancelRelease",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataManagerServer).CancelRelease(ctx, req.(*CancelReleaseReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataManager_RollbackRelease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RollbackReleaseReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataManagerServer).RollbackRelease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datamanager.DataManager/RollbackRelease",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataManagerServer).RollbackRelease(ctx, req.(*RollbackReleaseReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataManager_PublishRelease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishReleaseReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataManagerServer).PublishRelease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datamanager.DataManager/PublishRelease",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataManagerServer).PublishRelease(ctx, req.(*PublishReleaseReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataManager_CreateMultiRelease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMultiReleaseReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataManagerServer).CreateMultiRelease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datamanager.DataManager/CreateMultiRelease",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataManagerServer).CreateMultiRelease(ctx, req.(*CreateMultiReleaseReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataManager_QueryMultiRelease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryMultiReleaseReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataManagerServer).QueryMultiRelease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datamanager.DataManager/QueryMultiRelease",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataManagerServer).QueryMultiRelease(ctx, req.(*QueryMultiReleaseReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataManager_QueryMultiReleaseSubList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryMultiReleaseSubListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataManagerServer).QueryMultiReleaseSubList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datamanager.DataManager/QueryMultiReleaseSubList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataManagerServer).QueryMultiReleaseSubList(ctx, req.(*QueryMultiReleaseSubListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataManager_UpdateMultiRelease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMultiReleaseReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataManagerServer).UpdateMultiRelease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datamanager.DataManager/UpdateMultiRelease",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataManagerServer).UpdateMultiRelease(ctx, req.(*UpdateMultiReleaseReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataManager_CancelMultiRelease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelMultiReleaseReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataManagerServer).CancelMultiRelease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datamanager.DataManager/CancelMultiRelease",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataManagerServer).CancelMultiRelease(ctx, req.(*CancelMultiReleaseReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataManager_PublishMultiRelease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishMultiReleaseReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataManagerServer).PublishMultiRelease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datamanager.DataManager/PublishMultiRelease",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataManagerServer).PublishMultiRelease(ctx, req.(*PublishMultiReleaseReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataManager_RollbackMultiRelease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RollbackMultiReleaseReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataManagerServer).RollbackMultiRelease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datamanager.DataManager/RollbackMultiRelease",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataManagerServer).RollbackMultiRelease(ctx, req.(*RollbackMultiReleaseReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataManager_QueryHistoryMultiReleases_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryHistoryMultiReleasesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataManagerServer).QueryHistoryMultiReleases(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datamanager.DataManager/QueryHistoryMultiReleases",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataManagerServer).QueryHistoryMultiReleases(ctx, req.(*QueryHistoryMultiReleasesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataManager_CreateAppInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAppInstanceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataManagerServer).CreateAppInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datamanager.DataManager/CreateAppInstance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataManagerServer).CreateAppInstance(ctx, req.(*CreateAppInstanceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataManager_UpdateAppInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAppInstanceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataManagerServer).UpdateAppInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datamanager.DataManager/UpdateAppInstance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataManagerServer).UpdateAppInstance(ctx, req.(*UpdateAppInstanceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataManager_QueryReachableAppInstances_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryReachableAppInstancesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataManagerServer).QueryReachableAppInstances(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datamanager.DataManager/QueryReachableAppInstances",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataManagerServer).QueryReachableAppInstances(ctx, req.(*QueryReachableAppInstancesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataManager_CreateAppInstanceRelease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAppInstanceReleaseReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataManagerServer).CreateAppInstanceRelease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datamanager.DataManager/CreateAppInstanceRelease",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataManagerServer).CreateAppInstanceRelease(ctx, req.(*CreateAppInstanceReleaseReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataManager_QueryAppInstanceRelease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAppInstanceReleaseReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataManagerServer).QueryAppInstanceRelease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datamanager.DataManager/QueryAppInstanceRelease",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataManagerServer).QueryAppInstanceRelease(ctx, req.(*QueryAppInstanceReleaseReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataManager_QueryEffectedAppInstances_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryEffectedAppInstancesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataManagerServer).QueryEffectedAppInstances(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datamanager.DataManager/QueryEffectedAppInstances",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataManagerServer).QueryEffectedAppInstances(ctx, req.(*QueryEffectedAppInstancesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataManager_QueryMatchedAppInstances_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryMatchedAppInstancesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataManagerServer).QueryMatchedAppInstances(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datamanager.DataManager/QueryMatchedAppInstances",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataManagerServer).QueryMatchedAppInstances(ctx, req.(*QueryMatchedAppInstancesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataManager_CreateStrategy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateStrategyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataManagerServer).CreateStrategy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datamanager.DataManager/CreateStrategy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataManagerServer).CreateStrategy(ctx, req.(*CreateStrategyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataManager_QueryStrategy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryStrategyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataManagerServer).QueryStrategy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datamanager.DataManager/QueryStrategy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataManagerServer).QueryStrategy(ctx, req.(*QueryStrategyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataManager_QueryStrategyList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryStrategyListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataManagerServer).QueryStrategyList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datamanager.DataManager/QueryStrategyList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataManagerServer).QueryStrategyList(ctx, req.(*QueryStrategyListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataManager_DeleteStrategy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteStrategyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataManagerServer).DeleteStrategy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datamanager.DataManager/DeleteStrategy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataManagerServer).DeleteStrategy(ctx, req.(*DeleteStrategyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataManager_CreateProcAttr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProcAttrReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataManagerServer).CreateProcAttr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datamanager.DataManager/CreateProcAttr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataManagerServer).CreateProcAttr(ctx, req.(*CreateProcAttrReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataManager_QueryHostProcAttr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryHostProcAttrReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataManagerServer).QueryHostProcAttr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datamanager.DataManager/QueryHostProcAttr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataManagerServer).QueryHostProcAttr(ctx, req.(*QueryHostProcAttrReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataManager_QueryHostProcAttrList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryHostProcAttrListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataManagerServer).QueryHostProcAttrList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datamanager.DataManager/QueryHostProcAttrList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataManagerServer).QueryHostProcAttrList(ctx, req.(*QueryHostProcAttrListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataManager_QueryAppProcAttrList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAppProcAttrListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataManagerServer).QueryAppProcAttrList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datamanager.DataManager/QueryAppProcAttrList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataManagerServer).QueryAppProcAttrList(ctx, req.(*QueryAppProcAttrListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataManager_UpdateProcAttr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProcAttrReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataManagerServer).UpdateProcAttr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datamanager.DataManager/UpdateProcAttr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataManagerServer).UpdateProcAttr(ctx, req.(*UpdateProcAttrReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataManager_DeleteProcAttr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProcAttrReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataManagerServer).DeleteProcAttr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datamanager.DataManager/DeleteProcAttr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataManagerServer).DeleteProcAttr(ctx, req.(*DeleteProcAttrReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataManager_InitShardingDB_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitShardingDBReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataManagerServer).InitShardingDB(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datamanager.DataManager/InitShardingDB",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataManagerServer).InitShardingDB(ctx, req.(*InitShardingDBReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataManager_CreateShardingDB_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateShardingDBReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataManagerServer).CreateShardingDB(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datamanager.DataManager/CreateShardingDB",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataManagerServer).CreateShardingDB(ctx, req.(*CreateShardingDBReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataManager_QueryShardingDB_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryShardingDBReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataManagerServer).QueryShardingDB(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datamanager.DataManager/QueryShardingDB",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataManagerServer).QueryShardingDB(ctx, req.(*QueryShardingDBReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataManager_QueryShardingDBList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryShardingDBListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataManagerServer).QueryShardingDBList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datamanager.DataManager/QueryShardingDBList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataManagerServer).QueryShardingDBList(ctx, req.(*QueryShardingDBListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataManager_UpdateShardingDB_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateShardingDBReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataManagerServer).UpdateShardingDB(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datamanager.DataManager/UpdateShardingDB",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataManagerServer).UpdateShardingDB(ctx, req.(*UpdateShardingDBReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataManager_CreateSharding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateShardingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataManagerServer).CreateSharding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datamanager.DataManager/CreateSharding",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataManagerServer).CreateSharding(ctx, req.(*CreateShardingReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataManager_QuerySharding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryShardingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataManagerServer).QuerySharding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datamanager.DataManager/QuerySharding",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataManagerServer).QuerySharding(ctx, req.(*QueryShardingReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataManager_QueryShardingList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryShardingListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataManagerServer).QueryShardingList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datamanager.DataManager/QueryShardingList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataManagerServer).QueryShardingList(ctx, req.(*QueryShardingListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataManager_UpdateSharding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateShardingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataManagerServer).UpdateSharding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datamanager.DataManager/UpdateSharding",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataManagerServer).UpdateSharding(ctx, req.(*UpdateShardingReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataManager_CreateAudit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAuditReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataManagerServer).CreateAudit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datamanager.DataManager/CreateAudit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataManagerServer).CreateAudit(ctx, req.(*CreateAuditReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataManager_QueryAuditList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAuditListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataManagerServer).QueryAuditList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datamanager.DataManager/QueryAuditList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataManagerServer).QueryAuditList(ctx, req.(*QueryAuditListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataManager_Healthz_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthzReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataManagerServer).Healthz(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datamanager.DataManager/Healthz",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataManagerServer).Healthz(ctx, req.(*HealthzReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _DataManager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "datamanager.DataManager",
	HandlerType: (*DataManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "QueryAppMetadata",
			Handler:    _DataManager_QueryAppMetadata_Handler,
		},
		{
			MethodName: "CreateApp",
			Handler:    _DataManager_CreateApp_Handler,
		},
		{
			MethodName: "QueryApp",
			Handler:    _DataManager_QueryApp_Handler,
		},
		{
			MethodName: "QueryAppList",
			Handler:    _DataManager_QueryAppList_Handler,
		},
		{
			MethodName: "UpdateApp",
			Handler:    _DataManager_UpdateApp_Handler,
		},
		{
			MethodName: "DeleteApp",
			Handler:    _DataManager_DeleteApp_Handler,
		},
		{
			MethodName: "CreateTemplateBind",
			Handler:    _DataManager_CreateTemplateBind_Handler,
		},
		{
			MethodName: "QueryTemplateBind",
			Handler:    _DataManager_QueryTemplateBind_Handler,
		},
		{
			MethodName: "QueryTemplateBindList",
			Handler:    _DataManager_QueryTemplateBindList_Handler,
		},
		{
			MethodName: "DeleteTemplateBind",
			Handler:    _DataManager_DeleteTemplateBind_Handler,
		},
		{
			MethodName: "CreateConfigTemplate",
			Handler:    _DataManager_CreateConfigTemplate_Handler,
		},
		{
			MethodName: "QueryConfigTemplate",
			Handler:    _DataManager_QueryConfigTemplate_Handler,
		},
		{
			MethodName: "QueryConfigTemplateList",
			Handler:    _DataManager_QueryConfigTemplateList_Handler,
		},
		{
			MethodName: "UpdateConfigTemplate",
			Handler:    _DataManager_UpdateConfigTemplate_Handler,
		},
		{
			MethodName: "DeleteConfigTemplate",
			Handler:    _DataManager_DeleteConfigTemplate_Handler,
		},
		{
			MethodName: "CreateConfigTemplateVersion",
			Handler:    _DataManager_CreateConfigTemplateVersion_Handler,
		},
		{
			MethodName: "QueryConfigTemplateVersion",
			Handler:    _DataManager_QueryConfigTemplateVersion_Handler,
		},
		{
			MethodName: "QueryConfigTemplateVersionList",
			Handler:    _DataManager_QueryConfigTemplateVersionList_Handler,
		},
		{
			MethodName: "UpdateConfigTemplateVersion",
			Handler:    _DataManager_UpdateConfigTemplateVersion_Handler,
		},
		{
			MethodName: "DeleteConfigTemplateVersion",
			Handler:    _DataManager_DeleteConfigTemplateVersion_Handler,
		},
		{
			MethodName: "CreateVariableGroup",
			Handler:    _DataManager_CreateVariableGroup_Handler,
		},
		{
			MethodName: "QueryVariableGroup",
			Handler:    _DataManager_QueryVariableGroup_Handler,
		},
		{
			MethodName: "QueryVariableGroupList",
			Handler:    _DataManager_QueryVariableGroupList_Handler,
		},
		{
			MethodName: "DeleteVariableGroup",
			Handler:    _DataManager_DeleteVariableGroup_Handler,
		},
		{
			MethodName: "CreateVariable",
			Handler:    _DataManager_CreateVariable_Handler,
		},
		{
			MethodName: "UpdateVariable",
			Handler:    _DataManager_UpdateVariable_Handler,
		},
		{
			MethodName: "QueryVariable",
			Handler:    _DataManager_QueryVariable_Handler,
		},
		{
			MethodName: "QueryVariableList",
			Handler:    _DataManager_QueryVariableList_Handler,
		},
		{
			MethodName: "DeleteVariable",
			Handler:    _DataManager_DeleteVariable_Handler,
		},
		{
			MethodName: "CreateConfig",
			Handler:    _DataManager_CreateConfig_Handler,
		},
		{
			MethodName: "QueryConfig",
			Handler:    _DataManager_QueryConfig_Handler,
		},
		{
			MethodName: "QueryConfigList",
			Handler:    _DataManager_QueryConfigList_Handler,
		},
		{
			MethodName: "UpdateConfig",
			Handler:    _DataManager_UpdateConfig_Handler,
		},
		{
			MethodName: "DeleteConfig",
			Handler:    _DataManager_DeleteConfig_Handler,
		},
		{
			MethodName: "CreateConfigContent",
			Handler:    _DataManager_CreateConfigContent_Handler,
		},
		{
			MethodName: "QueryConfigContent",
			Handler:    _DataManager_QueryConfigContent_Handler,
		},
		{
			MethodName: "QueryConfigContentList",
			Handler:    _DataManager_QueryConfigContentList_Handler,
		},
		{
			MethodName: "QueryReleaseConfigContent",
			Handler:    _DataManager_QueryReleaseConfigContent_Handler,
		},
		{
			MethodName: "CreateCommit",
			Handler:    _DataManager_CreateCommit_Handler,
		},
		{
			MethodName: "QueryCommit",
			Handler:    _DataManager_QueryCommit_Handler,
		},
		{
			MethodName: "QueryHistoryCommits",
			Handler:    _DataManager_QueryHistoryCommits_Handler,
		},
		{
			MethodName: "UpdateCommit",
			Handler:    _DataManager_UpdateCommit_Handler,
		},
		{
			MethodName: "CancelCommit",
			Handler:    _DataManager_CancelCommit_Handler,
		},
		{
			MethodName: "ConfirmCommit",
			Handler:    _DataManager_ConfirmCommit_Handler,
		},
		{
			MethodName: "CreateMultiCommitWithContent",
			Handler:    _DataManager_CreateMultiCommitWithContent_Handler,
		},
		{
			MethodName: "CreateMultiCommit",
			Handler:    _DataManager_CreateMultiCommit_Handler,
		},
		{
			MethodName: "QueryMultiCommit",
			Handler:    _DataManager_QueryMultiCommit_Handler,
		},
		{
			MethodName: "QueryHistoryMultiCommits",
			Handler:    _DataManager_QueryHistoryMultiCommits_Handler,
		},
		{
			MethodName: "QueryMultiCommitSubList",
			Handler:    _DataManager_QueryMultiCommitSubList_Handler,
		},
		{
			MethodName: "UpdateMultiCommit",
			Handler:    _DataManager_UpdateMultiCommit_Handler,
		},
		{
			MethodName: "CancelMultiCommit",
			Handler:    _DataManager_CancelMultiCommit_Handler,
		},
		{
			MethodName: "ConfirmMultiCommit",
			Handler:    _DataManager_ConfirmMultiCommit_Handler,
		},
		{
			MethodName: "CreateRelease",
			Handler:    _DataManager_CreateRelease_Handler,
		},
		{
			MethodName: "QueryRelease",
			Handler:    _DataManager_QueryRelease_Handler,
		},
		{
			MethodName: "QueryNewestReleases",
			Handler:    _DataManager_QueryNewestReleases_Handler,
		},
		{
			MethodName: "QueryHistoryReleases",
			Handler:    _DataManager_QueryHistoryReleases_Handler,
		},
		{
			MethodName: "UpdateRelease",
			Handler:    _DataManager_UpdateRelease_Handler,
		},
		{
			MethodName: "CancelRelease",
			Handler:    _DataManager_CancelRelease_Handler,
		},
		{
			MethodName: "RollbackRelease",
			Handler:    _DataManager_RollbackRelease_Handler,
		},
		{
			MethodName: "PublishRelease",
			Handler:    _DataManager_PublishRelease_Handler,
		},
		{
			MethodName: "CreateMultiRelease",
			Handler:    _DataManager_CreateMultiRelease_Handler,
		},
		{
			MethodName: "QueryMultiRelease",
			Handler:    _DataManager_QueryMultiRelease_Handler,
		},
		{
			MethodName: "QueryMultiReleaseSubList",
			Handler:    _DataManager_QueryMultiReleaseSubList_Handler,
		},
		{
			MethodName: "UpdateMultiRelease",
			Handler:    _DataManager_UpdateMultiRelease_Handler,
		},
		{
			MethodName: "CancelMultiRelease",
			Handler:    _DataManager_CancelMultiRelease_Handler,
		},
		{
			MethodName: "PublishMultiRelease",
			Handler:    _DataManager_PublishMultiRelease_Handler,
		},
		{
			MethodName: "RollbackMultiRelease",
			Handler:    _DataManager_RollbackMultiRelease_Handler,
		},
		{
			MethodName: "QueryHistoryMultiReleases",
			Handler:    _DataManager_QueryHistoryMultiReleases_Handler,
		},
		{
			MethodName: "CreateAppInstance",
			Handler:    _DataManager_CreateAppInstance_Handler,
		},
		{
			MethodName: "UpdateAppInstance",
			Handler:    _DataManager_UpdateAppInstance_Handler,
		},
		{
			MethodName: "QueryReachableAppInstances",
			Handler:    _DataManager_QueryReachableAppInstances_Handler,
		},
		{
			MethodName: "CreateAppInstanceRelease",
			Handler:    _DataManager_CreateAppInstanceRelease_Handler,
		},
		{
			MethodName: "QueryAppInstanceRelease",
			Handler:    _DataManager_QueryAppInstanceRelease_Handler,
		},
		{
			MethodName: "QueryEffectedAppInstances",
			Handler:    _DataManager_QueryEffectedAppInstances_Handler,
		},
		{
			MethodName: "QueryMatchedAppInstances",
			Handler:    _DataManager_QueryMatchedAppInstances_Handler,
		},
		{
			MethodName: "CreateStrategy",
			Handler:    _DataManager_CreateStrategy_Handler,
		},
		{
			MethodName: "QueryStrategy",
			Handler:    _DataManager_QueryStrategy_Handler,
		},
		{
			MethodName: "QueryStrategyList",
			Handler:    _DataManager_QueryStrategyList_Handler,
		},
		{
			MethodName: "DeleteStrategy",
			Handler:    _DataManager_DeleteStrategy_Handler,
		},
		{
			MethodName: "CreateProcAttr",
			Handler:    _DataManager_CreateProcAttr_Handler,
		},
		{
			MethodName: "QueryHostProcAttr",
			Handler:    _DataManager_QueryHostProcAttr_Handler,
		},
		{
			MethodName: "QueryHostProcAttrList",
			Handler:    _DataManager_QueryHostProcAttrList_Handler,
		},
		{
			MethodName: "QueryAppProcAttrList",
			Handler:    _DataManager_QueryAppProcAttrList_Handler,
		},
		{
			MethodName: "UpdateProcAttr",
			Handler:    _DataManager_UpdateProcAttr_Handler,
		},
		{
			MethodName: "DeleteProcAttr",
			Handler:    _DataManager_DeleteProcAttr_Handler,
		},
		{
			MethodName: "InitShardingDB",
			Handler:    _DataManager_InitShardingDB_Handler,
		},
		{
			MethodName: "CreateShardingDB",
			Handler:    _DataManager_CreateShardingDB_Handler,
		},
		{
			MethodName: "QueryShardingDB",
			Handler:    _DataManager_QueryShardingDB_Handler,
		},
		{
			MethodName: "QueryShardingDBList",
			Handler:    _DataManager_QueryShardingDBList_Handler,
		},
		{
			MethodName: "UpdateShardingDB",
			Handler:    _DataManager_UpdateShardingDB_Handler,
		},
		{
			MethodName: "CreateSharding",
			Handler:    _DataManager_CreateSharding_Handler,
		},
		{
			MethodName: "QuerySharding",
			Handler:    _DataManager_QuerySharding_Handler,
		},
		{
			MethodName: "QueryShardingList",
			Handler:    _DataManager_QueryShardingList_Handler,
		},
		{
			MethodName: "UpdateSharding",
			Handler:    _DataManager_UpdateSharding_Handler,
		},
		{
			MethodName: "CreateAudit",
			Handler:    _DataManager_CreateAudit_Handler,
		},
		{
			MethodName: "QueryAuditList",
			Handler:    _DataManager_QueryAuditList_Handler,
		},
		{
			MethodName: "Healthz",
			Handler:    _DataManager_Healthz_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "datamanager.proto",
}

func init() { proto.RegisterFile("datamanager.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 5886 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x7d, 0x6f, 0x8c, 0x1c, 0xc9,
	0x55, 0xf8, 0xf6, 0xec, 0xcc, 0xfe, 0xa9, 0xd9, 0xbf, 0x6d, 0x7b, 0x3d, 0x1e, 0x7b, 0xbd, 0xde,
	0xb6, 0xcf, 0x5e, 0xfb, 0xce, 0xeb, 0x3b, 0xe7, 0x92, 0x5f, 0x7e, 0x09, 0x10, 0x7c, 0xf6, 0xfd,
	0xd9, 0xd3, 0xd9, 0x71, 0xd6, 0x3e, 0x47, 0x11, 0x27, 0x4c, 0xef, 0x4c, 0xef, 0xec, 0x9c, 0x67,
	0xa7, 0x7b, 0x67, 0x7a, 0x7d, 0x59, 0x23, 0x14, 0xe0, 0x92, 0x10, 0x81, 0xe2, 0xcb, 0x41, 0x12,
	0x3e, 0xf1, 0x47, 0x22, 0x48, 0x91, 0x40, 0x51, 0xe0, 0x13, 0x20, 0x04, 0x12, 0x91, 0x80, 0x48,
	0x11, 0x0a, 0x1f, 0x40, 0x22, 0x07, 0x11, 0x11, 0xf9, 0xc0, 0x17, 0x10, 0x52, 0x22, 0x3e, 0x20,
	0x84, 0x50, 0xd7, 0x9f, 0xee, 0xaa, 0xd7, 0xaf, 0xba, 0x67, 0xd6, 0x53, 0x3b, 0x1b, 0x89, 0x2f,
	0xf6, 0x4e, 0x75, 0x77, 0xd5, 0xab, 0xf7, 0x5e, 0xbd, 0xf7, 0xea, 0xd5, 0xab, 0xf7, 0xc8, 0x7c,
	0xdd, 0x0d, 0xdd, 0x6d, 0xb7, 0xed, 0x36, 0xbc, 0xce, 0x6a, 0xd0, 0xf1, 0x43, 0xdf, 0x2e, 0x4b,
	0x4d, 0xd5, 0xcb, 0x1b, 0x0f, 0x2e, 0x6f, 0x74, 0x6b, 0xc1, 0x95, 0x66, 0x3b, 0xf4, 0x3a, 0x6d,
	0xb7, 0x75, 0x85, 0xbe, 0x54, 0xf3, 0x5b, 0x57, 0x6a, 0xfe, 0xf6, 0xb6, 0xdf, 0xe6, 0xff, 0xb1,
	0x6f, 0x9d, 0xd7, 0xc9, 0x91, 0x8f, 0xed, 0x7a, 0x9d, 0xbd, 0x6b, 0x41, 0x70, 0xd3, 0x0b, 0xdd,
	0xa8, 0xa7, 0x75, 0x6f, 0xc7, 0x9e, 0x23, 0xa3, 0x5d, 0x6f, 0xa7, 0x62, 0x9d, 0xb1, 0x56, 0x26,
	0xd7, 0xa3, 0x3f, 0xed, 0x63, 0x64, 0x6c, 0xa3, 0xf9, 0xe8, 0x7e, 0xb3, 0x5e, 0x29, 0xd0, 0xc6,
	0xd2, 0x46, 0xf3, 0xd1, 0x5a, 0x3d, 0x6a, 0x76, 0x83, 0x20, 0x6a, 0x1e, 0x65, 0xcd, 0x6e, 0x10,
	0xac, 0xd5, 0x9d, 0x06, 0x39, 0x9a, 0xee, 0xb6, 0x1b, 0x20, 0xfd, 0x9e, 0x25, 0xc5, 0x9a, 0x5f,
	0xf7, 0x68, 0xaf, 0x33, 0x57, 0x67, 0x57, 0x39, 0x74, 0x2f, 0x76, 0x3a, 0xd7, 0xfd, 0xba, 0xb7,
	0x4e, 0x1f, 0xda, 0x15, 0x32, 0xbe, 0xed, 0x75, 0xbb, 0x6e, 0xc3, 0xe3, 0xc3, 0x88, 0x9f, 0xce,
	0x5f, 0x59, 0x64, 0xea, 0x7a, 0xc7, 0x73, 0x43, 0xef, 0x5a, 0x10, 0x0c, 0x00, 0x72, 0xdb, 0x26,
	0xc5, 0xb6, 0xbb, 0xed, 0x55, 0x8a, 0xb4, 0x91, 0xfe, 0x6d, 0x2f, 0x91, 0x72, 0xdd, 0x0b, 0x5a,
	0xfe, 0xde, 0xfd, 0x70, 0x2f, 0xf0, 0x2a, 0xa5, 0x33, 0xd6, 0x4a, 0x69, 0x9d, 0xb0, 0xa6, 0xbb,
	0x7b, 0x81, 0x67, 0x1f, 0x25, 0xa5, 0x6e, 0xe8, 0x86, 0x5e, 0x65, 0x8c, 0x3e, 0x62, 0x3f, 0x22,
	0xa8, 0x6b, 0x11, 0x68, 0x7e, 0xa7, 0x32, 0xce, 0xa0, 0xe6, 0x3f, 0xa3, 0x41, 0xb6, 0xbd, 0x6d,
	0xbf, 0x32, 0xc1, 0x06, 0x89, 0xfe, 0x76, 0xfe, 0xd4, 0x22, 0xd3, 0xd2, 0x4c, 0x0c, 0x20, 0xcb,
	0xfe, 0x7f, 0xa4, 0x18, 0x51, 0x82, 0xce, 0xad, 0x7c, 0xf5, 0xec, 0xaa, 0xcc, 0x4a, 0xca, 0xd0,
	0xab, 0xd1, 0x3f, 0x37, 0x22, 0xa2, 0xd1, 0x0f, 0xaa, 0xcb, 0x64, 0x42, 0xb4, 0x48, 0x78, 0xb3,
	0x64, 0x8a, 0xbb, 0xa4, 0x2c, 0x28, 0x6e, 0x88, 0x0c, 0xce, 0xcf, 0x5b, 0x64, 0x2a, 0x19, 0xc3,
	0x04, 0x82, 0x96, 0x14, 0x04, 0x95, 0xc5, 0xe7, 0xd1, 0x78, 0xf4, 0x81, 0xf3, 0x06, 0x99, 0x15,
	0x10, 0xbc, 0xd6, 0xec, 0x86, 0x7d, 0xcd, 0xf4, 0x0c, 0x29, 0x06, 0x62, 0xcc, 0xf2, 0xd5, 0x29,
	0xd1, 0xf9, 0x6d, 0xb7, 0xe1, 0xad, 0xd3, 0x27, 0xce, 0xbf, 0x59, 0x64, 0x4e, 0xed, 0xde, 0xc4,
	0x24, 0x3f, 0xa4, 0x4c, 0xf2, 0xbc, 0xc2, 0x05, 0x70, 0x74, 0xc8, 0x08, 0xaf, 0x49, 0x8c, 0xb0,
	0x44, 0xca, 0xa1, 0x1f, 0xba, 0xad, 0xfb, 0x35, 0x7f, 0xb7, 0x1d, 0x52, 0x00, 0xa7, 0xd7, 0x09,
	0x6d, 0xba, 0x1e, 0xb5, 0x44, 0xd8, 0x6c, 0xb6, 0x37, 0xfd, 0x4a, 0xe1, 0xcc, 0x68, 0x0a, 0x9b,
	0xd1, 0x03, 0xe7, 0x9b, 0x16, 0x99, 0x7a, 0x3d, 0xa8, 0x0f, 0x79, 0xf1, 0x8a, 0xc5, 0x38, 0x96,
	0x2c, 0xc6, 0x64, 0x41, 0x8f, 0xcb, 0x0b, 0xba, 0x4a, 0x26, 0xfc, 0xc0, 0xeb, 0xd0, 0x15, 0xcd,
	0x96, 0x6e, 0xfc, 0xdb, 0xf9, 0x19, 0x32, 0x2d, 0x4d, 0xc5, 0x84, 0xa8, 0x7b, 0x93, 0x4c, 0xdd,
	0xf0, 0x5a, 0xde, 0xc0, 0x90, 0x25, 0xcf, 0xa6, 0x98, 0x9e, 0x8d, 0x34, 0x96, 0x89, 0xd9, 0xfc,
	0xb9, 0x45, 0x8e, 0x31, 0x99, 0x73, 0xd7, 0xdb, 0x0e, 0x5a, 0x6e, 0xe8, 0xbd, 0xd0, 0x6c, 0xd7,
	0xfb, 0x9a, 0x57, 0xc4, 0x80, 0xfc, 0xdb, 0x64, 0x72, 0x44, 0x34, 0x29, 0x13, 0x2f, 0xca, 0x13,
	0x3f, 0x46, 0xc6, 0x6a, 0x9b, 0x8d, 0xa8, 0xb9, 0xc4, 0x9a, 0x6b, 0x9b, 0x8d, 0xb5, 0x7a, 0xbf,
	0x42, 0xdc, 0xf9, 0x1b, 0x8b, 0x2c, 0x60, 0x33, 0x30, 0xb1, 0x66, 0x7f, 0x52, 0x59, 0xb3, 0xcf,
	0x20, 0x92, 0x1b, 0xc2, 0x90, 0x23, 0xc2, 0x39, 0x02, 0x2c, 0x09, 0x01, 0xce, 0x63, 0x8b, 0x6b,
	0xed, 0x43, 0x42, 0x11, 0xe7, 0x57, 0x2d, 0x72, 0x0c, 0x01, 0xc8, 0x04, 0x82, 0x57, 0x14, 0x04,
	0x1f, 0x15, 0x9f, 0x2b, 0x03, 0x33, 0x15, 0xf0, 0x1b, 0x16, 0xa9, 0xa4, 0x80, 0xea, 0x5b, 0x19,
	0xec, 0x17, 0x53, 0x42, 0x89, 0x94, 0xb4, 0x4a, 0xe4, 0x73, 0x05, 0x72, 0x42, 0x03, 0x9f, 0x09,
	0xc4, 0x5d, 0x57, 0x10, 0x77, 0x25, 0xad, 0x4d, 0x30, 0x30, 0x20, 0x73, 0xbe, 0xde, 0x8f, 0x5a,
	0x59, 0x51, 0xd4, 0x8a, 0x86, 0x54, 0x54, 0xbf, 0xfc, 0x9e, 0x45, 0x8e, 0x31, 0x31, 0x76, 0x58,
	0x64, 0x8c, 0x2c, 0x73, 0xc7, 0x80, 0xcc, 0x6d, 0x92, 0x05, 0x0c, 0x58, 0x13, 0xc2, 0xf7, 0xf7,
	0x47, 0xc9, 0x71, 0x26, 0x36, 0xae, 0xfb, 0xed, 0xcd, 0x66, 0x43, 0x8c, 0x88, 0xa3, 0x06, 0xe0,
	0xa0, 0x80, 0xe1, 0x80, 0xe3, 0x6e, 0x54, 0xc6, 0x1d, 0xa6, 0x8d, 0x4f, 0x90, 0x89, 0x08, 0x2f,
	0xb4, 0xbd, 0xc4, 0xe5, 0xe9, 0x66, 0xe3, 0x56, 0xf4, 0xe8, 0x24, 0x99, 0x8c, 0x1e, 0x6d, 0x06,
	0x6e, 0xb8, 0x25, 0x90, 0x53, 0xdb, 0x6c, 0xbc, 0x14, 0xfd, 0x8e, 0xfa, 0xda, 0xed, 0x7a, 0x42,
	0x06, 0xd3, 0xbf, 0xed, 0x45, 0x42, 0xa2, 0xff, 0xef, 0x37, 0x3a, 0xfe, 0x6e, 0xc0, 0x15, 0xf2,
	0x64, 0xd4, 0xf2, 0x72, 0xd4, 0x60, 0x3f, 0x45, 0x66, 0x36, 0x9b, 0x2d, 0xef, 0x7e, 0xd0, 0x69,
	0x3e, 0x6c, 0xb6, 0xbc, 0x86, 0x57, 0x99, 0xa4, 0xaf, 0x4c, 0x47, 0xad, 0xb7, 0x45, 0x63, 0x34,
	0x3b, 0xfa, 0xda, 0xa6, 0xdf, 0xd9, 0x76, 0xc3, 0x0a, 0x61, 0xb3, 0x8b, 0x9a, 0x5e, 0xa2, 0x2d,
	0x11, 0x5c, 0xf4, 0x85, 0xed, 0x08, 0xe1, 0x65, 0xaa, 0x1b, 0x26, 0xa2, 0x86, 0x9b, 0x11, 0x8e,
	0x97, 0x48, 0xd9, 0x6b, 0x37, 0x9a, 0x6d, 0x8f, 0x59, 0x17, 0x53, 0xcc, 0xba, 0x60, 0x4d, 0x8a,
	0x75, 0x31, 0x8d, 0x59, 0x17, 0x33, 0x1a, 0x4d, 0x33, 0xab, 0x6a, 0x9a, 0x7f, 0xb4, 0x48, 0x05,
	0x27, 0x97, 0x89, 0x15, 0xfd, 0x82, 0xb2, 0xa2, 0x57, 0x11, 0x5d, 0x93, 0x86, 0x02, 0x2e, 0xe8,
	0xa7, 0xc1, 0x82, 0x96, 0xd8, 0xc7, 0x82, 0xec, 0xe3, 0x6c, 0x90, 0x05, 0x2a, 0x29, 0x7a, 0xe1,
	0xc5, 0x7d, 0x2e, 0x53, 0xe7, 0xcb, 0x16, 0x39, 0x8e, 0x0e, 0x62, 0x02, 0x83, 0x97, 0x14, 0x0c,
	0x2e, 0x88, 0xcf, 0xc1, 0xd0, 0x4c, 0x9d, 0x34, 0x48, 0x15, 0x81, 0xcb, 0xc0, 0xe6, 0xe2, 0x71,
	0x81, 0x9c, 0xd4, 0x8e, 0x64, 0x02, 0x0b, 0x2f, 0x2a, 0x58, 0x78, 0x2e, 0xad, 0x19, 0x70, 0x40,
	0x20, 0x2b, 0x7d, 0xbc, 0x1f, 0xdd, 0x70, 0x49, 0xd1, 0x0d, 0x5a, 0xcc, 0x53, 0xed, 0xf0, 0xb5,
	0x51, 0x72, 0x9c, 0x99, 0xec, 0x06, 0x19, 0xef, 0xff, 0x84, 0x60, 0x7f, 0x42, 0x50, 0x56, 0x90,
	0xb3, 0x40, 0x41, 0x3e, 0x20, 0x15, 0x9c, 0x5e, 0x26, 0x54, 0xe4, 0xa7, 0xc8, 0x71, 0xa6, 0x8d,
	0x4d, 0x32, 0x47, 0xd6, 0x16, 0xec, 0x01, 0xa9, 0xe0, 0x00, 0x98, 0x98, 0xed, 0xd7, 0x0b, 0xe4,
	0x34, 0x26, 0xdb, 0xef, 0x79, 0x9d, 0x6e, 0xd3, 0x6f, 0xe3, 0xb3, 0x5e, 0x24, 0xe4, 0x21, 0x7b,
	0x9e, 0xcc, 0x7c, 0x92, 0xb7, 0xe8, 0xad, 0x02, 0x80, 0x94, 0x62, 0x0a, 0x29, 0x4b, 0xa4, 0x2c,
	0xba, 0x0d, 0xdd, 0x06, 0x5f, 0x20, 0x62, 0xa4, 0xbb, 0x6e, 0x23, 0x1a, 0xb7, 0xe6, 0xb7, 0x43,
	0xaf, 0x1d, 0x46, 0x1d, 0xb0, 0x45, 0x32, 0xc9, 0x5b, 0xd6, 0xea, 0xf6, 0x32, 0x99, 0x12, 0x8f,
	0xbb, 0xcd, 0x47, 0x6c, 0x0b, 0x3f, 0xbd, 0x5e, 0xe6, 0x6d, 0x77, 0x9a, 0x8f, 0x3c, 0xcc, 0xff,
	0x96, 0xf0, 0xe3, 0xa4, 0x46, 0x29, 0x13, 0x55, 0x29, 0xff, 0xab, 0x45, 0x96, 0x32, 0x51, 0x66,
	0x42, 0xa6, 0xae, 0x29, 0x32, 0xf5, 0xfd, 0xb9, 0xba, 0x59, 0x02, 0x06, 0xca, 0xd5, 0x8b, 0x92,
	0x5c, 0x55, 0x29, 0x69, 0x01, 0x4a, 0x3a, 0x0d, 0xb2, 0x88, 0x08, 0xec, 0x4c, 0xde, 0xd0, 0xac,
	0x08, 0x75, 0xa0, 0x51, 0x38, 0xd0, 0x57, 0x2c, 0x72, 0x3a, 0x6b, 0x24, 0x13, 0x28, 0x7d, 0x4e,
	0x41, 0xe9, 0x22, 0xae, 0x32, 0x04, 0x04, 0x4c, 0x67, 0xbf, 0x63, 0x91, 0x65, 0x3d, 0x98, 0x83,
	0xdf, 0x0b, 0x0a, 0xe5, 0x5e, 0xd4, 0x2a, 0xf7, 0xdf, 0x29, 0x10, 0x27, 0x0f, 0x22, 0x13, 0xc8,
	0x7b, 0x4d, 0x41, 0xde, 0x07, 0xf3, 0x74, 0x3c, 0x80, 0x07, 0xb2, 0xe4, 0x4f, 0xf7, 0xa3, 0xea,
	0x9f, 0x53, 0x54, 0x7d, 0x1e, 0xdd, 0xa8, 0xc6, 0xff, 0x0f, 0x8b, 0x9c, 0xc6, 0x34, 0xc8, 0xe0,
	0x39, 0x19, 0xc8, 0xa8, 0x62, 0x9e, 0x8c, 0x2a, 0xe9, 0x65, 0xd4, 0x93, 0xb9, 0x25, 0x3b, 0x64,
	0x29, 0x73, 0xc6, 0x26, 0x94, 0xc9, 0xa7, 0x2d, 0x72, 0x1a, 0x53, 0x5d, 0x06, 0xd0, 0x9c, 0xa5,
	0x40, 0x3b, 0x64, 0x29, 0x13, 0x0a, 0x13, 0x53, 0xff, 0xdd, 0xd8, 0x27, 0x78, 0xcf, 0xed, 0x34,
	0xdd, 0x8d, 0x96, 0x47, 0xcd, 0xb0, 0x3e, 0x4d, 0xf9, 0xa9, 0x87, 0x2e, 0x37, 0xe8, 0x24, 0x79,
	0xf0, 0xd0, 0x65, 0x26, 0x9d, 0xc6, 0xa6, 0x14, 0xec, 0x52, 0x92, 0xd8, 0x45, 0x52, 0x5e, 0x63,
	0xaa, 0xf2, 0x7a, 0xcf, 0x12, 0x0e, 0x00, 0x00, 0xa7, 0x09, 0x21, 0x71, 0x4d, 0x11, 0x12, 0x97,
	0x11, 0xa5, 0x95, 0x02, 0x02, 0x4a, 0x86, 0x67, 0x24, 0xc9, 0x00, 0xf1, 0x63, 0x41, 0xfc, 0x38,
	0x0f, 0xb9, 0xdb, 0xf0, 0x80, 0x69, 0xe0, 0x7c, 0xd1, 0xe2, 0x3b, 0xd9, 0x03, 0x40, 0xea, 0x45,
	0x05, 0xa9, 0xc7, 0xc4, 0xe7, 0xea, 0xc8, 0x4c, 0x5d, 0x6d, 0x72, 0x87, 0xa0, 0xf2, 0xcc, 0xc0,
	0x0e, 0xf3, 0x57, 0x0a, 0x7c, 0x2f, 0x8b, 0x0c, 0x64, 0x02, 0x05, 0x37, 0x14, 0x14, 0x3c, 0x9b,
	0x56, 0x3e, 0x28, 0x1c, 0x90, 0xb5, 0xee, 0xf5, 0xa3, 0x74, 0x2e, 0x2a, 0x4a, 0x47, 0x87, 0x75,
	0xaa, 0x6c, 0x3e, 0x25, 0xdc, 0x79, 0x26, 0xb9, 0x30, 0x4b, 0xfe, 0xbd, 0x29, 0x76, 0x30, 0xe6,
	0xb9, 0xd1, 0xf9, 0x63, 0x8b, 0xcc, 0xab, 0x4b, 0xb9, 0xdf, 0x13, 0xaa, 0x68, 0xa2, 0xc9, 0x56,
	0xe1, 0xa1, 0xdb, 0xd1, 0xc8, 0xb9, 0xa3, 0xa4, 0xf4, 0xd0, 0x6d, 0xed, 0x8a, 0x8d, 0x33, 0xfb,
	0x91, 0xc2, 0xd4, 0x58, 0x0a, 0x53, 0xfa, 0x73, 0x9c, 0xbf, 0xb4, 0x88, 0x0d, 0x61, 0x37, 0xc1,
	0xae, 0x3f, 0xa6, 0xb0, 0xeb, 0x4a, 0x86, 0x18, 0xec, 0xe1, 0xfc, 0x86, 0xa3, 0xcb, 0x92, 0xd0,
	0xe5, 0x7c, 0xc6, 0x22, 0xf3, 0x4c, 0xd9, 0x0f, 0x92, 0x08, 0x31, 0xc2, 0x8b, 0x32, 0xc2, 0x65,
	0xc6, 0x2b, 0x01, 0xc6, 0xf3, 0x88, 0x0d, 0xc1, 0x30, 0xc1, 0x73, 0x9f, 0x13, 0xa7, 0xe5, 0x83,
	0x9c, 0x2d, 0x64, 0xa4, 0xa2, 0x56, 0xf0, 0x97, 0x24, 0xc1, 0xff, 0xcb, 0x16, 0x99, 0x07, 0xa0,
	0x98, 0xe0, 0xa0, 0x73, 0x0a, 0x07, 0xcd, 0x41, 0xe9, 0xc3, 0xc5, 0xfd, 0xdb, 0xe2, 0x18, 0x4f,
	0xb4, 0xef, 0x43, 0xd4, 0xe7, 0xc9, 0x9d, 0xfc, 0x1d, 0xc9, 0x7f, 0x5b, 0x40, 0x09, 0x9b, 0xd3,
	0x03, 0x1f, 0x51, 0xd0, 0xf2, 0xb4, 0x5e, 0x0f, 0xe8, 0x54, 0xc0, 0xc7, 0xfa, 0x51, 0x01, 0xe7,
	0x14, 0x15, 0x80, 0x10, 0x81, 0x4a, 0x7f, 0x9f, 0xcc, 0xab, 0xc2, 0x77, 0x10, 0xcc, 0x99, 0x25,
	0xed, 0x3d, 0x62, 0xc3, 0x01, 0x4d, 0x2c, 0xba, 0x7f, 0x2f, 0x90, 0x59, 0xd9, 0xd1, 0x30, 0x88,
	0x40, 0x84, 0xe4, 0xac, 0xac, 0x28, 0x9f, 0x95, 0x21, 0x0b, 0x2d, 0x12, 0x46, 0xb2, 0x6b, 0x94,
	0xfd, 0x38, 0xb4, 0x7e, 0xd1, 0x78, 0xbb, 0x36, 0xa5, 0x71, 0x29, 0x4d, 0xe3, 0x61, 0x61, 0x33,
	0x52, 0x58, 0xd8, 0x5f, 0x58, 0x64, 0x4e, 0x45, 0xf8, 0x41, 0xc7, 0x04, 0xc1, 0xd1, 0xf7, 0x11,
	0x59, 0xf0, 0xae, 0x45, 0x66, 0x24, 0x77, 0xc0, 0x61, 0x60, 0x1a, 0xe7, 0xb3, 0x16, 0x8f, 0xe5,
	0x32, 0x89, 0x57, 0x47, 0xc1, 0xeb, 0x8c, 0xea, 0xa4, 0xe0, 0xf2, 0xfa, 0xeb, 0x16, 0xb1, 0x25,
	0x40, 0xfa, 0x96, 0xd6, 0x1a, 0x04, 0x9d, 0x20, 0x13, 0x51, 0xb3, 0x64, 0x40, 0x8d, 0xbb, 0x41,
	0x40, 0x0f, 0x19, 0x72, 0x83, 0x08, 0xa2, 0xd5, 0xb3, 0x13, 0x81, 0xc4, 0x1c, 0xfa, 0x2c, 0x20,
	0x66, 0x92, 0xb6, 0xdc, 0xdd, 0x0b, 0x3c, 0xe7, 0x3f, 0x2d, 0x1e, 0x36, 0x2a, 0x83, 0x6c, 0x02,
	0x7f, 0x3f, 0xae, 0xe0, 0xef, 0xa2, 0xce, 0xbf, 0xa4, 0x13, 0xec, 0x1f, 0xed, 0x47, 0xb0, 0x3b,
	0x8a, 0x60, 0x4f, 0xd1, 0x8a, 0x8a, 0xf5, 0x7f, 0x28, 0x90, 0x59, 0xd9, 0x9f, 0xd2, 0x2f, 0xa1,
	0x38, 0xcb, 0x8e, 0x62, 0x2c, 0x5b, 0xc4, 0x58, 0xb6, 0x84, 0xc9, 0xb9, 0x31, 0xad, 0x9c, 0x1b,
	0xcf, 0x97, 0x73, 0x13, 0x3d, 0xc8, 0xb9, 0xc9, 0x6c, 0x39, 0x47, 0x80, 0x9c, 0x13, 0x72, 0xab,
	0x8c, 0xb9, 0xaa, 0xa6, 0x74, 0xae, 0xaa, 0x69, 0xa0, 0xc1, 0x6a, 0x64, 0x4e, 0x45, 0xad, 0x09,
	0xfd, 0xb5, 0x4d, 0x66, 0x65, 0xa7, 0xd0, 0x20, 0xe8, 0x97, 0xa5, 0x95, 0x6b, 0x64, 0x4e, 0x1d,
	0xce, 0xc4, 0x9c, 0xbe, 0x5a, 0x10, 0x4e, 0x27, 0x36, 0xca, 0x75, 0xe6, 0x45, 0x34, 0x28, 0x65,
	0x4f, 0x92, 0xc9, 0x08, 0xc6, 0x66, 0x98, 0x04, 0xb8, 0x4c, 0xb0, 0x06, 0xb6, 0x61, 0x68, 0xb6,
	0xeb, 0xde, 0x27, 0x85, 0xb8, 0xa5, 0x3f, 0x80, 0x43, 0x74, 0x3c, 0xcf, 0x21, 0x3a, 0x91, 0x76,
	0x88, 0x4a, 0x7a, 0x73, 0x12, 0xd7, 0x9b, 0x04, 0xe3, 0xbf, 0xb2, 0xc4, 0x7f, 0xd1, 0x9e, 0x18,
	0xc5, 0x94, 0x09, 0xb2, 0x3c, 0x2e, 0x70, 0x0b, 0xf8, 0x50, 0x50, 0xe5, 0x25, 0x32, 0xd6, 0x72,
	0x37, 0xbc, 0x56, 0xb7, 0x32, 0x46, 0xe5, 0xdb, 0xaa, 0x4e, 0x96, 0x26, 0x70, 0xae, 0xbe, 0x46,
	0x3f, 0x78, 0xb1, 0x1d, 0x76, 0xf6, 0xd6, 0xf9, 0xd7, 0xd5, 0xff, 0x4f, 0xca, 0x52, 0x73, 0x34,
	0x95, 0x07, 0xde, 0x9e, 0x98, 0xca, 0x03, 0x6f, 0x2f, 0xd9, 0x2f, 0x16, 0xa4, 0xfd, 0xe2, 0x87,
	0x0a, 0x1f, 0xb4, 0x9c, 0xc7, 0x96, 0x12, 0xe8, 0x61, 0x12, 0xf9, 0xd1, 0xe7, 0x92, 0xe2, 0x98,
	0x95, 0x84, 0x39, 0x1d, 0x93, 0x69, 0xde, 0xf7, 0x0a, 0xe4, 0x14, 0x05, 0x68, 0xdd, 0x6b, 0x79,
	0x6e, 0x77, 0xf0, 0xcb, 0xe7, 0x04, 0x99, 0xa8, 0xb5, 0xfc, 0xdd, 0x7a, 0x42, 0xaa, 0x71, 0xfa,
	0x7b, 0xad, 0x6e, 0xcf, 0x90, 0x42, 0x33, 0xe0, 0x54, 0x2a, 0x34, 0x83, 0x88, 0x87, 0x25, 0x1b,
	0x85, 0xfe, 0x6d, 0xdf, 0x8c, 0x69, 0x36, 0x4e, 0x69, 0xf6, 0xfe, 0x34, 0xcd, 0x34, 0x90, 0x63,
	0xa4, 0x93, 0xd8, 0x66, 0x42, 0xcb, 0x36, 0x93, 0x2a, 0xdb, 0x3c, 0x09, 0xb9, 0xbf, 0x64, 0xf1,
	0x63, 0x43, 0x1c, 0xc6, 0xa1, 0x51, 0xfd, 0x0f, 0x2c, 0xee, 0x0f, 0x55, 0x00, 0x1a, 0x94, 0xd9,
	0xb5, 0x9f, 0xb5, 0x29, 0xec, 0xb1, 0x31, 0xed, 0x6e, 0xfa, 0x33, 0x05, 0x25, 0x4c, 0x48, 0x81,
	0x79, 0x28, 0xae, 0x55, 0x14, 0x0e, 0x68, 0x7e, 0xdd, 0xee, 0xc7, 0xfc, 0x3a, 0xab, 0x98, 0x5f,
	0x69, 0xda, 0x51, 0xfb, 0xeb, 0x8b, 0xd2, 0xf6, 0x33, 0x42, 0xde, 0x20, 0x28, 0xa6, 0x90, 0xa6,
	0x08, 0x48, 0xa3, 0x89, 0xe3, 0x5c, 0x22, 0x65, 0xfe, 0x0d, 0x35, 0x88, 0x98, 0x81, 0x4c, 0x58,
	0x13, 0x35, 0x89, 0x64, 0xa3, 0x60, 0x5c, 0x35, 0x0a, 0xec, 0xf3, 0x64, 0x76, 0x7b, 0xb7, 0x15,
	0x36, 0xef, 0x27, 0xc3, 0x72, 0xa3, 0x8c, 0x36, 0x5f, 0x17, 0x63, 0x0b, 0xb5, 0x36, 0x89, 0xa9,
	0x35, 0x22, 0xab, 0xb5, 0xbf, 0x96, 0x36, 0x89, 0x0c, 0x2d, 0xc3, 0xda, 0x24, 0x8a, 0xd1, 0x21,
	0x2b, 0x5c, 0x90, 0x58, 0x41, 0x41, 0xb8, 0xa5, 0x22, 0xdc, 0xb9, 0x17, 0xef, 0x14, 0xfb, 0xa6,
	0xaf, 0xd2, 0xef, 0x28, 0xe8, 0x57, 0xda, 0xee, 0x99, 0xc3, 0x90, 0x76, 0xbb, 0x47, 0x87, 0x64,
	0xe2, 0xe7, 0x5b, 0x42, 0x0b, 0xbe, 0xd2, 0xec, 0x86, 0xbe, 0x80, 0xa7, 0x6b, 0x50, 0xf6, 0x64,
	0xf8, 0x6a, 0x73, 0x36, 0x7a, 0xb1, 0x64, 0x1a, 0xd7, 0x4a, 0xa6, 0xff, 0x11, 0x81, 0x95, 0x70,
	0x3a, 0x07, 0x7d, 0x92, 0xa8, 0x01, 0xc2, 0xcc, 0x96, 0x90, 0xd1, 0x93, 0x8a, 0xa4, 0xaf, 0x5a,
	0xc9, 0x96, 0x70, 0xa0, 0x2c, 0x0b, 0x85, 0x4c, 0x31, 0x53, 0xc8, 0x40, 0xc2, 0x22, 0xe1, 0x03,
	0xf2, 0x0e, 0xcb, 0xd8, 0x1a, 0x70, 0xba, 0x64, 0xf6, 0xba, 0xdb, 0xae, 0x79, 0xad, 0x41, 0xa3,
	0x23, 0x67, 0x9f, 0xa5, 0x0e, 0x6a, 0x62, 0x66, 0x21, 0x99, 0xa3, 0x6a, 0xaf, 0xb3, 0x7d, 0x90,
	0x53, 0xab, 0x93, 0x79, 0x30, 0xaa, 0x89, 0xb9, 0xfd, 0x57, 0x1c, 0xcd, 0x76, 0x33, 0xd1, 0x41,
	0x1f, 0x6f, 0x86, 0x5b, 0x03, 0xb4, 0x86, 0x11, 0xbd, 0x57, 0xcc, 0xd2, 0x7b, 0x72, 0x28, 0x43,
	0xc6, 0xc5, 0x09, 0xfb, 0x23, 0x64, 0x72, 0x9b, 0x5f, 0x32, 0x16, 0x96, 0xf2, 0xb2, 0xba, 0x54,
	0xc5, 0x1d, 0x64, 0x79, 0x42, 0xc9, 0x37, 0xce, 0x0f, 0x2c, 0x72, 0x26, 0x7b, 0xf2, 0x26, 0x84,
	0xd9, 0xab, 0x8a, 0x30, 0xfb, 0x00, 0xa2, 0x4e, 0xf5, 0xd0, 0x40, 0xa9, 0x76, 0x55, 0x92, 0x6a,
	0x08, 0x9a, 0x2d, 0x04, 0xcd, 0xce, 0xf7, 0x2d, 0x72, 0x34, 0x35, 0xce, 0x61, 0xa6, 0xf3, 0xf3,
	0x69, 0x3a, 0x2f, 0xe0, 0x74, 0x96, 0x89, 0xfb, 0x4f, 0xf1, 0x45, 0x43, 0x65, 0x9a, 0x07, 0x7d,
	0x10, 0x85, 0x82, 0x30, 0x08, 0x32, 0x6e, 0x72, 0x57, 0xec, 0x7e, 0x89, 0x88, 0x8c, 0x33, 0x8a,
	0x8d, 0xf3, 0x05, 0x71, 0xac, 0x68, 0x1c, 0x8d, 0x17, 0x14, 0x34, 0x1e, 0x11, 0x9f, 0xcb, 0xe3,
	0x32, 0x53, 0xea, 0x4f, 0x2c, 0x7e, 0xa5, 0x81, 0xab, 0x7d, 0xe9, 0x8d, 0xae, 0xe1, 0x1b, 0xb2,
	0xc0, 0x70, 0x2a, 0xe9, 0x0c, 0x27, 0xfd, 0x96, 0xee, 0xf3, 0xc2, 0xf9, 0x80, 0x02, 0x6f, 0x02,
	0xaf, 0x2f, 0x29, 0x78, 0xbd, 0xaa, 0xb5, 0x9e, 0x20, 0x24, 0x90, 0x4b, 0xef, 0xf6, 0x63, 0x42,
	0x5d, 0x50, 0x4c, 0x28, 0x9c, 0x98, 0xd4, 0x8e, 0xda, 0xe6, 0x3b, 0x5c, 0xe9, 0xc9, 0x9d, 0xdd,
	0x8d, 0xbe, 0xb7, 0xe5, 0xbd, 0xb2, 0xf3, 0x3f, 0x0b, 0xde, 0xc1, 0xc6, 0x1b, 0xca, 0x75, 0x18,
	0x1c, 0x90, 0x9c, 0xb0, 0xed, 0x78, 0x96, 0xdd, 0x8a, 0x75, 0x66, 0x94, 0xf9, 0x54, 0xd9, 0x0c,
	0xbb, 0xce, 0xaf, 0x5b, 0xe4, 0x28, 0xb3, 0xf7, 0x0c, 0xcb, 0x86, 0x58, 0x92, 0x17, 0x35, 0x92,
	0x1c, 0x46, 0x88, 0x6c, 0x91, 0x63, 0x08, 0x60, 0x26, 0xec, 0x9a, 0xb7, 0x23, 0x25, 0x47, 0x2d,
	0x43, 0xd3, 0x38, 0xc8, 0xb2, 0xe1, 0xb6, 0xc8, 0x31, 0x04, 0x08, 0x43, 0xb1, 0xb7, 0xc7, 0xb8,
	0xb9, 0x38, 0xcc, 0x09, 0x37, 0xc9, 0x02, 0x06, 0x85, 0x89, 0x19, 0xff, 0x51, 0x51, 0xf8, 0x3e,
	0xb8, 0x9f, 0xb1, 0xdf, 0xf8, 0xe2, 0x0e, 0xfb, 0x4c, 0x8a, 0x2f, 0xe6, 0x2d, 0x9a, 0xb3, 0xb9,
	0x44, 0x59, 0x94, 0xf0, 0xcd, 0xf7, 0x98, 0xbc, 0xf9, 0x96, 0xef, 0x7a, 0x8d, 0x67, 0xdc, 0xf5,
	0x9a, 0xd0, 0xdc, 0xf5, 0x9a, 0xd4, 0x9e, 0xf5, 0x91, 0xfc, 0xb3, 0xbe, 0x72, 0x0f, 0x67, 0x7d,
	0x53, 0xd9, 0x67, 0x7d, 0xd3, 0xe9, 0xbb, 0x5e, 0xdd, 0xb0, 0xe3, 0x86, 0x5e, 0x63, 0x2f, 0x9a,
	0x2b, 0x0b, 0x55, 0x20, 0xa2, 0x69, 0xad, 0x6e, 0x9f, 0x26, 0xe2, 0x57, 0xd3, 0xeb, 0xf2, 0x3b,
	0x5c, 0x52, 0x8b, 0xba, 0x11, 0x9a, 0x03, 0x1b, 0xa1, 0x15, 0x32, 0xc7, 0x78, 0x4f, 0x22, 0xca,
	0x3c, 0x7d, 0x67, 0x86, 0xb6, 0xaf, 0xcb, 0x94, 0xa1, 0x22, 0xc7, 0xc6, 0xe3, 0x9d, 0x8f, 0xa8,
	0x27, 0x44, 0xb1, 0xdb, 0xec, 0xa8, 0xec, 0x36, 0xfb, 0x56, 0x1c, 0xb5, 0x18, 0xb3, 0x8e, 0x09,
	0xc9, 0xff, 0x61, 0x45, 0xf2, 0x5f, 0x40, 0xcc, 0x42, 0x69, 0xf8, 0x1c, 0x79, 0x2f, 0xe1, 0xc5,
	0x02, 0xcc, 0xea, 0x7c, 0x82, 0x7b, 0xb8, 0x06, 0xbf, 0x0e, 0x92, 0x58, 0x3b, 0xa3, 0x88, 0xd2,
	0xb8, 0xef, 0xc5, 0x98, 0xcc, 0xe8, 0xfb, 0x8a, 0xf0, 0x9f, 0xdd, 0xf2, 0xde, 0xf2, 0x22, 0x1d,
	0x49, 0x1f, 0x76, 0x07, 0x71, 0x92, 0xbb, 0x42, 0xe6, 0x5a, 0x7e, 0xcd, 0x6d, 0xc9, 0xdc, 0xc7,
	0x56, 0xfe, 0x0c, 0x6d, 0x4f, 0xb8, 0x2f, 0x3f, 0x0d, 0xc3, 0x77, 0x85, 0x5f, 0x0c, 0x82, 0x39,
	0x14, 0xbf, 0x58, 0x1a, 0x08, 0xc8, 0x67, 0x57, 0x24, 0x3e, 0x13, 0xae, 0x78, 0x4b, 0x75, 0xc5,
	0xc7, 0x74, 0xa0, 0xf6, 0xda, 0xdf, 0x01, 0xc7, 0xdf, 0x20, 0x09, 0xf1, 0x04, 0x86, 0xf7, 0x22,
	0x21, 0x7e, 0xa7, 0xee, 0x75, 0x14, 0x87, 0x26, 0x6d, 0xe9, 0xd1, 0xa1, 0xf9, 0x0b, 0x05, 0x9e,
	0xdf, 0x23, 0x35, 0xaf, 0x83, 0xbe, 0x6c, 0xaf, 0x83, 0xc2, 0xc4, 0x31, 0x8b, 0x4a, 0xdb, 0xdf,
	0xb4, 0x84, 0xa7, 0xf0, 0x80, 0x74, 0x6a, 0x9f, 0xae, 0x00, 0xa7, 0x2e, 0x22, 0x9d, 0x4d, 0xca,
	0x23, 0xe7, 0xa1, 0xf0, 0x2a, 0x1a, 0xc0, 0x42, 0x9e, 0xcb, 0x4f, 0x1d, 0xd7, 0xc4, 0xec, 0x3e,
	0x49, 0xec, 0x75, 0xbf, 0xd5, 0xda, 0x70, 0x6b, 0x0f, 0x0e, 0x78, 0x7e, 0x9b, 0xe4, 0x48, 0x6a,
	0x64, 0x13, 0x33, 0x7c, 0x8b, 0xcc, 0xdf, 0xde, 0xdd, 0x68, 0x35, 0xbb, 0x5b, 0x07, 0x3c, 0x41,
	0x8f, 0xd8, 0x70, 0x60, 0x23, 0x69, 0x5c, 0x0a, 0x8a, 0x6b, 0x6b, 0x3f, 0x93, 0xd4, 0x78, 0x3e,
	0x30, 0x3b, 0xac, 0xa8, 0xb3, 0xc3, 0x52, 0x01, 0x97, 0xc8, 0x0e, 0x62, 0x0c, 0xdb, 0x41, 0x00,
	0x5b, 0x72, 0x3c, 0xc7, 0x96, 0x9c, 0x48, 0xd9, 0x92, 0xd8, 0x09, 0xa9, 0xfe, 0xc6, 0xf6, 0xf7,
	0xe2, 0xcb, 0x79, 0x2a, 0xba, 0x86, 0x93, 0xb0, 0x0b, 0xc2, 0x00, 0xa5, 0xfa, 0xf3, 0x92, 0x54,
	0xc7, 0xc8, 0x61, 0x61, 0xe4, 0x70, 0x9a, 0xb2, 0x93, 0x6e, 0x3f, 0x0c, 0x81, 0x0d, 0x35, 0x8a,
	0x0e, 0x15, 0x67, 0xe7, 0x32, 0x8f, 0x4d, 0x4d, 0x76, 0x2e, 0x65, 0x60, 0x66, 0x1d, 0x7e, 0xc7,
	0x42, 0xbc, 0x6a, 0xfb, 0x35, 0x4d, 0x06, 0xec, 0x13, 0x7c, 0x62, 0xd3, 0xe4, 0x0b, 0x05, 0x1e,
	0x51, 0x83, 0x4f, 0xce, 0x04, 0xe6, 0x5f, 0x56, 0x30, 0xff, 0xbe, 0x6c, 0x9f, 0x61, 0x96, 0x91,
	0x32, 0x88, 0x14, 0x5f, 0x2a, 0xbd, 0x59, 0x12, 0x17, 0x4b, 0x71, 0x25, 0x19, 0xe5, 0xf8, 0x81,
	0x58, 0x2e, 0x4d, 0xb2, 0x80, 0xc1, 0x6b, 0x42, 0x3d, 0x04, 0xb2, 0x87, 0x93, 0x8f, 0xb4, 0x1f,
	0x97, 0x6a, 0xef, 0x22, 0xe1, 0xfb, 0x62, 0xf5, 0xa1, 0x43, 0x0e, 0xc5, 0xa7, 0xad, 0x81, 0x24,
	0x27, 0x61, 0x55, 0x32, 0x53, 0xe1, 0x57, 0x25, 0xb1, 0xe6, 0xef, 0x3a, 0x9f, 0xb5, 0x14, 0x7f,
	0x9e, 0x59, 0xa6, 0xcb, 0x73, 0xb3, 0x21, 0x70, 0x98, 0x60, 0xa6, 0x5f, 0xb2, 0xc8, 0x02, 0xb7,
	0x69, 0x86, 0x3c, 0xe9, 0x37, 0xc9, 0x71, 0x14, 0x10, 0x43, 0x77, 0x0c, 0x8f, 0x0b, 0x53, 0x75,
	0xc8, 0xd3, 0x7e, 0x40, 0x2a, 0x38, 0x24, 0x26, 0xe6, 0xfd, 0x8d, 0xf8, 0x6c, 0xf8, 0x5a, 0x10,
	0xac, 0xb5, 0xbb, 0x61, 0xc4, 0x65, 0x87, 0x20, 0x22, 0x76, 0x41, 0x8a, 0x88, 0x8d, 0x5a, 0x45,
	0x68, 0x6b, 0xec, 0xdf, 0x9b, 0x90, 0xfd, 0x7b, 0x5b, 0xc2, 0x3c, 0x56, 0x26, 0x61, 0x02, 0x5f,
	0xff, 0x92, 0xc4, 0xba, 0xba, 0xb5, 0x2d, 0x77, 0xa3, 0x25, 0x0f, 0x39, 0x10, 0xbb, 0x63, 0x95,
	0x4c, 0xb2, 0xb9, 0xde, 0xa7, 0xbc, 0x11, 0xe9, 0xc5, 0x79, 0x01, 0x25, 0x8b, 0xd0, 0xbd, 0xe9,
	0x06, 0xeb, 0x13, 0xec, 0x9d, 0x8f, 0x76, 0xec, 0x67, 0x09, 0xe1, 0xef, 0xbb, 0xed, 0x7a, 0xa5,
	0xa4, 0xfb, 0x80, 0x77, 0x7a, 0xad, 0xdd, 0x4b, 0x14, 0xea, 0xbb, 0x05, 0x9e, 0x9e, 0x47, 0x33,
	0x4b, 0x13, 0x02, 0xfe, 0x15, 0x45, 0xc0, 0x3f, 0x8f, 0x45, 0x40, 0x6b, 0x60, 0x31, 0x71, 0x6c,
	0x29, 0x33, 0x12, 0x33, 0x40, 0xbe, 0x11, 0x1f, 0xb2, 0xfd, 0x88, 0xaf, 0x14, 0x64, 0x12, 0x26,
	0x56, 0xca, 0x77, 0x2d, 0x72, 0x12, 0x59, 0x94, 0x03, 0xdb, 0xb9, 0x1a, 0x42, 0xdb, 0x0a, 0x29,
	0x45, 0xe4, 0x8e, 0x36, 0xa1, 0x11, 0x43, 0xd8, 0x89, 0xdf, 0x2c, 0xf0, 0x3b, 0xe1, 0x5a, 0x7b,
	0xd3, 0x5f, 0x67, 0x2f, 0x38, 0x3e, 0x39, 0xa5, 0x9f, 0x9f, 0x09, 0x8c, 0xfe, 0xa1, 0xc5, 0x4f,
	0xce, 0x0f, 0x25, 0x42, 0x13, 0x0f, 0xef, 0xb8, 0x7c, 0x23, 0xf4, 0x9b, 0xa3, 0xdc, 0x38, 0x3d,
	0x20, 0x2c, 0xe5, 0x1f, 0xbf, 0xe3, 0x80, 0x40, 0x21, 0xf2, 0x6e, 0x01, 0x9e, 0xbf, 0xc7, 0x77,
	0x9a, 0xac, 0xbc, 0x3b, 0x4d, 0x85, 0xf4, 0x9d, 0xa6, 0x1c, 0x1f, 0x53, 0x66, 0x68, 0x3a, 0x66,
	0x56, 0x94, 0x50, 0xb3, 0xa2, 0x57, 0x7f, 0xcc, 0x32, 0x99, 0x12, 0x7d, 0x49, 0xe7, 0x95, 0xc2,
	0x18, 0xbe, 0x25, 0x6f, 0x77, 0xe4, 0xca, 0x15, 0xbf, 0x1d, 0x87, 0x52, 0xb8, 0x61, 0x6d, 0xcb,
	0xab, 0x0f, 0x5a, 0xf5, 0x01, 0x37, 0x51, 0x31, 0xe5, 0x26, 0xca, 0x3f, 0x8d, 0x89, 0x83, 0x6d,
	0x50, 0x10, 0x87, 0xb3, 0x31, 0xc1, 0x21, 0x39, 0x18, 0xad, 0xf5, 0x5b, 0x62, 0xa3, 0xf6, 0xe2,
	0xe6, 0xa6, 0x57, 0x0b, 0x9f, 0x8c, 0x66, 0xd8, 0x09, 0x8e, 0xca, 0xd8, 0x45, 0xc8, 0xd8, 0xf9,
	0x14, 0xfb, 0xb2, 0xf0, 0x75, 0xe0, 0x10, 0x0e, 0xc5, 0xd7, 0xa1, 0x03, 0x05, 0xd2, 0xec, 0xa7,
	0xfa, 0xa1, 0xd9, 0xaa, 0x42, 0xb3, 0x2a, 0x46, 0x33, 0xc5, 0xe3, 0xf1, 0xed, 0xf8, 0xd0, 0xfa,
	0x0e, 0x5f, 0x01, 0x07, 0xb2, 0xc6, 0x30, 0x3f, 0x6f, 0x85, 0x8c, 0x73, 0x61, 0x16, 0xe7, 0x17,
	0x63, 0x3f, 0x63, 0x31, 0x31, 0x8e, 0x3b, 0x66, 0x27, 0x54, 0xc7, 0xec, 0xb7, 0xe3, 0x0c, 0x3c,
	0xc9, 0x94, 0x86, 0x93, 0x81, 0x47, 0x1e, 0x3f, 0xc7, 0x45, 0x20, 0xa3, 0xcb, 0x82, 0xe8, 0x8a,
	0xb6, 0xcb, 0xec, 0xc0, 0x7c, 0xd8, 0x44, 0x4a, 0x72, 0xd3, 0x98, 0xc5, 0xad, 0x26, 0x37, 0x4d,
	0x3c, 0x28, 0x73, 0xcf, 0xfe, 0x9a, 0x08, 0x22, 0x15, 0xed, 0x87, 0x21, 0xdb, 0x41, 0x92, 0xab,
	0x46, 0x85, 0x6a, 0x28, 0xb9, 0x6a, 0x20, 0x08, 0x26, 0x72, 0xd5, 0x24, 0x44, 0xa1, 0x12, 0x65,
	0x4f, 0xe4, 0xaa, 0xd9, 0x17, 0xaf, 0x02, 0xa6, 0x1c, 0x4d, 0x31, 0x65, 0x4f, 0x59, 0x6b, 0x8c,
	0x32, 0xa7, 0xf3, 0xc3, 0x58, 0x66, 0xde, 0xee, 0xf8, 0xb5, 0x6b, 0x61, 0xd8, 0xc1, 0xa7, 0x28,
	0xdb, 0xba, 0x05, 0xcc, 0xd6, 0x1d, 0x8d, 0x6d, 0xdd, 0x04, 0x1b, 0x45, 0x9c, 0x3d, 0x95, 0xe0,
	0xb0, 0x05, 0xe9, 0xf6, 0xb5, 0xbc, 0xad, 0x10, 0x16, 0xf3, 0xb8, 0x64, 0x31, 0x6b, 0xe5, 0x24,
	0x7a, 0xdc, 0x15, 0x61, 0xf7, 0xa1, 0xd7, 0xe9, 0x34, 0x79, 0x5e, 0x86, 0x89, 0xf5, 0xf8, 0x77,
	0x84, 0x5d, 0x38, 0x6b, 0x13, 0xd8, 0xfd, 0x92, 0x58, 0xd4, 0xaf, 0xf8, 0xdd, 0x70, 0x48, 0x08,
	0x46, 0xb6, 0x1e, 0xce, 0x63, 0xb1, 0xac, 0x55, 0xb8, 0x0e, 0x50, 0xfa, 0xc5, 0x83, 0x32, 0xe9,
	0xb7, 0x27, 0x22, 0x4b, 0x24, 0x78, 0xf4, 0x02, 0xb0, 0x0f, 0x5c, 0xe5, 0xa7, 0xe3, 0xfa, 0xb4,
	0xa8, 0x0a, 0x93, 0x1e, 0x7b, 0x28, 0x55, 0x61, 0x30, 0x30, 0x4c, 0x88, 0xba, 0x84, 0x02, 0x54,
	0xd4, 0xfd, 0x2c, 0x8f, 0x59, 0xba, 0x16, 0x04, 0xf9, 0x04, 0xe8, 0x4f, 0x03, 0xe5, 0xd3, 0xe0,
	0x17, 0x45, 0x64, 0x51, 0x6a, 0xf4, 0xa1, 0x44, 0x16, 0x21, 0x50, 0x1c, 0x00, 0x05, 0xbe, 0x13,
	0x27, 0x29, 0x3c, 0x3c, 0x92, 0x42, 0xeb, 0xf5, 0xc1, 0xf2, 0xc4, 0xcb, 0xea, 0x6c, 0x52, 0x97,
	0xf9, 0xd0, 0xac, 0xc0, 0xfd, 0x9a, 0x25, 0x34, 0xf6, 0x21, 0xc2, 0x61, 0xc6, 0x8d, 0xf7, 0x44,
	0xcd, 0x9b, 0xc5, 0xcb, 0x53, 0x64, 0x7e, 0xad, 0xdd, 0x0c, 0xef, 0x6c, 0xb9, 0x9d, 0x7a, 0xb3,
	0xdd, 0xb8, 0xf1, 0x02, 0x8a, 0x96, 0x08, 0x1a, 0xf8, 0x9a, 0x09, 0x68, 0xfe, 0xcc, 0x22, 0x47,
	0xf8, 0xae, 0x22, 0x1b, 0x20, 0xfb, 0x08, 0x29, 0xd5, 0x37, 0x12, 0x22, 0x15, 0xeb, 0x1b, 0x0c,
	0xc7, 0x5b, 0x7e, 0x37, 0xe4, 0xbd, 0xd2, 0xbf, 0x29, 0xde, 0xfd, 0x4e, 0xc8, 0xaf, 0x02, 0xd3,
	0xbf, 0xe3, 0x40, 0xf1, 0x92, 0x14, 0x28, 0x5e, 0x25, 0x13, 0x81, 0xdb, 0xed, 0xbe, 0xe5, 0x77,
	0x84, 0xa7, 0x27, 0xfe, 0x8d, 0x6e, 0xcd, 0x70, 0xa7, 0x70, 0x43, 0x9c, 0x01, 0x99, 0xc6, 0xd4,
	0x87, 0x79, 0x02, 0xb4, 0xfd, 0xe0, 0x29, 0xd2, 0xf2, 0x47, 0x52, 0x5f, 0x9b, 0x10, 0xa8, 0xe7,
	0x15, 0x81, 0x1a, 0x7b, 0x80, 0xa5, 0x61, 0x99, 0x96, 0xbf, 0xc4, 0xe3, 0x93, 0x93, 0x07, 0x5a,
	0x15, 0xe3, 0x7c, 0x4f, 0x04, 0xd1, 0xc2, 0x97, 0x87, 0x12, 0x25, 0x9c, 0x06, 0x22, 0xfb, 0x82,
	0xa2, 0x1c, 0x25, 0x8c, 0xe2, 0x83, 0x4a, 0xfc, 0x68, 0x1d, 0x30, 0xa9, 0xf8, 0xa3, 0xbb, 0x0e,
	0xd2, 0xf0, 0x9b, 0x58, 0x07, 0xef, 0x24, 0xae, 0x1d, 0x3e, 0x12, 0x8e, 0x27, 0x9e, 0x85, 0xa7,
	0x90, 0x64, 0xe1, 0x89, 0x31, 0x37, 0x2a, 0x61, 0xee, 0x38, 0x19, 0xaf, 0x6f, 0xc8, 0x5b, 0xe2,
	0xb1, 0xfa, 0xc6, 0x2d, 0x5d, 0xcc, 0x0a, 0x5a, 0xfd, 0x32, 0xd9, 0x41, 0x24, 0x00, 0x99, 0x98,
	0xf8, 0x07, 0x84, 0xb3, 0xa4, 0xbf, 0x69, 0x4b, 0xbe, 0x0d, 0x93, 0xe0, 0x69, 0x7d, 0x1b, 0x62,
	0x50, 0xb6, 0xee, 0x57, 0x84, 0x6b, 0x83, 0x37, 0xeb, 0x57, 0xfd, 0x7b, 0xb1, 0xbf, 0x41, 0x79,
	0x75, 0x38, 0xfe, 0x06, 0x00, 0x02, 0x5c, 0xf1, 0xcf, 0x4a, 0x2b, 0xfe, 0x9c, 0xb2, 0xe2, 0x11,
	0x3c, 0xd0, 0xf5, 0xfe, 0x4e, 0x6c, 0xe1, 0x1d, 0x22, 0x2e, 0x86, 0x00, 0x99, 0xe0, 0xe2, 0xbf,
	0xb7, 0xc8, 0x0c, 0x3f, 0xfa, 0xdb, 0xad, 0xeb, 0x2e, 0xdd, 0x2d, 0x91, 0x72, 0xd7, 0xdf, 0xed,
	0xd4, 0x78, 0xad, 0xac, 0x02, 0x4b, 0xea, 0xc1, 0x9a, 0x68, 0x18, 0xe0, 0x71, 0x32, 0xee, 0x07,
	0xec, 0xe1, 0x28, 0x7d, 0x38, 0xe6, 0x07, 0xf4, 0x81, 0xc6, 0x44, 0x3b, 0x49, 0x26, 0x79, 0x87,
	0x49, 0x66, 0x29, 0xd6, 0x90, 0x5d, 0x6f, 0xb2, 0x0f, 0x01, 0xb8, 0x21, 0x92, 0x2e, 0xf1, 0x79,
	0x99, 0x40, 0xde, 0xdf, 0x8a, 0xa5, 0x4c, 0xc7, 0xd8, 0x4f, 0x0d, 0x1d, 0x19, 0xad, 0xa3, 0x59,
	0x68, 0x2d, 0x2a, 0x68, 0xdd, 0x37, 0xfe, 0xf2, 0xe3, 0x35, 0x7f, 0x20, 0x32, 0xbb, 0x4a, 0x73,
	0x3a, 0x68, 0xbf, 0x76, 0x7a, 0x7c, 0xb8, 0xc2, 0x6f, 0xf5, 0xb3, 0xc9, 0x5b, 0x56, 0x36, 0x79,
	0xd3, 0xf1, 0x69, 0x05, 0x65, 0x0c, 0xb6, 0xfe, 0x4f, 0x13, 0xf2, 0x8a, 0xe7, 0xb6, 0xc2, 0xad,
	0x47, 0xb8, 0xf4, 0xfb, 0xbc, 0x45, 0xca, 0xf1, 0x0b, 0x26, 0xd0, 0x71, 0x59, 0x41, 0xc7, 0x89,
	0x38, 0x7a, 0xd4, 0xaf, 0xef, 0xb6, 0x3c, 0x3e, 0x32, 0x3d, 0xb1, 0xa7, 0xaf, 0x5d, 0xfd, 0xe1,
	0xcb, 0xa4, 0x1c, 0x4d, 0xfe, 0x26, 0xc3, 0x98, 0xfd, 0x89, 0xa4, 0x08, 0xbb, 0xc8, 0x27, 0x61,
	0x9f, 0x41, 0xb7, 0xcf, 0x71, 0xba, 0x09, 0x6f, 0xa7, 0xba, 0x9c, 0xf3, 0x46, 0x37, 0x70, 0x46,
	0xec, 0x1b, 0x64, 0x32, 0x8e, 0x0d, 0xb0, 0x4f, 0xe8, 0xea, 0xef, 0xef, 0x54, 0xab, 0xfa, 0xd2,
	0xfc, 0xce, 0x88, 0x7d, 0x8d, 0x4c, 0x88, 0xfe, 0xed, 0x0a, 0x3a, 0x6c, 0xd4, 0xc7, 0x09, 0xcd,
	0x13, 0xda, 0xc5, 0xcd, 0xa4, 0x92, 0x7e, 0xc4, 0x16, 0xf6, 0xa9, 0x8c, 0x2a, 0xf0, 0x3b, 0xd5,
	0xc5, 0xcc, 0x1a, 0xf1, 0x6c, 0x5e, 0x71, 0xf8, 0x08, 0x98, 0x97, 0x5c, 0xdf, 0x1d, 0xcc, 0x4b,
	0xa9, 0x97, 0xce, 0x7a, 0x89, 0x8b, 0x8e, 0x83, 0x5e, 0xe4, 0xc2, 0xe7, 0xa0, 0x17, 0xa5, 0x4e,
	0xb9, 0x33, 0x62, 0xdf, 0x17, 0x26, 0x8b, 0x5c, 0x46, 0xd7, 0x76, 0x72, 0x4b, 0x66, 0xef, 0x54,
	0xcf, 0xf6, 0x50, 0x56, 0xdb, 0x19, 0xb1, 0xdf, 0xe0, 0x82, 0x4a, 0xe9, 0x7f, 0x39, 0xbb, 0xf0,
	0x71, 0xd4, 0xbd, 0x93, 0xf7, 0x0a, 0xed, 0x7d, 0x0b, 0x29, 0x79, 0x4d, 0x49, 0xf4, 0x54, 0x2f,
	0xa5, 0x95, 0x77, 0xaa, 0xe7, 0x7b, 0xab, 0xc0, 0xcc, 0x10, 0x95, 0xae, 0x37, 0x0c, 0x10, 0x85,
	0x56, 0x4f, 0x06, 0x88, 0xc2, 0x8b, 0x16, 0x3b, 0x23, 0xb6, 0x27, 0xf6, 0x8f, 0x6a, 0x01, 0x26,
	0xfb, 0x5c, 0x0f, 0x25, 0x65, 0x77, 0xaa, 0x4f, 0xf5, 0x54, 0x78, 0xd6, 0x19, 0xb1, 0x37, 0x94,
	0x5c, 0xd4, 0xf1, 0x28, 0x67, 0xf3, 0x8a, 0x91, 0x45, 0x83, 0x9c, 0xcb, 0x7f, 0x89, 0x8e, 0xd1,
	0x46, 0xab, 0xc7, 0x52, 0xba, 0x5c, 0xe8, 0xad, 0xb0, 0xe9, 0x4e, 0x75, 0xa5, 0xd7, 0x0a, 0xa8,
	0x0c, 0x75, 0x58, 0xd9, 0x2e, 0x80, 0x3a, 0x4d, 0xf5, 0x52, 0x80, 0x3a, 0x5d, 0xcd, 0x4c, 0x36,
	0x0c, 0x56, 0x22, 0x0b, 0x0c, 0xa3, 0xa9, 0x83, 0x09, 0x86, 0xd1, 0x15, 0xab, 0x74, 0x46, 0xec,
	0x47, 0x22, 0xe4, 0x0b, 0xad, 0xc4, 0x65, 0x3f, 0xdd, 0x7b, 0x19, 0xc3, 0x9d, 0xea, 0x33, 0xfd,
	0xd4, 0x3c, 0x74, 0x46, 0xec, 0xb7, 0xd0, 0xfa, 0xba, 0x62, 0xe8, 0x4b, 0x3d, 0x56, 0xac, 0x8b,
	0x46, 0x7e, 0xba, 0xe7, 0x77, 0xe9, 0xc0, 0x6f, 0x67, 0xd6, 0x32, 0xa4, 0xac, 0xb3, 0xda, 0x57,
	0xbd, 0xbc, 0x9d, 0xea, 0x95, 0x3e, 0xeb, 0xeb, 0x31, 0xd4, 0x67, 0xd4, 0x7f, 0x03, 0xa8, 0xcf,
	0xae, 0x8d, 0x07, 0x50, 0x9f, 0x53, 0x56, 0x8e, 0x8d, 0x9d, 0x51, 0x80, 0x0d, 0x8c, 0x9d, 0x5d,
	0x30, 0x0e, 0x8c, 0x9d, 0x53, 0xd7, 0x8d, 0x09, 0x05, 0xa4, 0xb4, 0x98, 0x7d, 0x36, 0xbf, 0xf8,
	0x18, 0x14, 0x0a, 0x9a, 0x0a, 0x65, 0x4c, 0x80, 0xa6, 0xcb, 0x4c, 0xd9, 0x4e, 0x4e, 0x1d, 0xaa,
	0xb4, 0x00, 0xc5, 0x4b, 0x86, 0x39, 0x23, 0xf6, 0x03, 0xac, 0x9c, 0x18, 0xe5, 0x9c, 0xf3, 0x3d,
	0x15, 0xbb, 0xda, 0xa9, 0x5e, 0xe8, 0xb1, 0x28, 0x16, 0xc3, 0x18, 0x52, 0x2e, 0xca, 0xc6, 0x64,
	0x7d, 0x0e, 0xc6, 0x34, 0x55, 0xa7, 0x9c, 0x11, 0xfb, 0x8e, 0xd8, 0x20, 0x89, 0x87, 0xf6, 0xe9,
	0xcc, 0x32, 0x48, 0x3b, 0xd5, 0xa5, 0x9c, 0x32, 0x49, 0xac, 0x53, 0xb5, 0xdc, 0x10, 0xe8, 0x34,
	0x55, 0x12, 0x09, 0x74, 0x9a, 0xae, 0x55, 0xe4, 0x8c, 0xd8, 0xb7, 0xc9, 0xb4, 0x82, 0x2d, 0x7b,
	0x51, 0x8f, 0xc9, 0xa8, 0xcb, 0xd3, 0x59, 0x8f, 0x15, 0xb3, 0x41, 0x2e, 0x46, 0x83, 0x99, 0x0d,
	0xa0, 0x6a, 0x4f, 0xd5, 0xc9, 0xaf, 0x67, 0xc3, 0x90, 0xa0, 0xa2, 0x1d, 0x20, 0x21, 0x55, 0x8c,
	0x06, 0x20, 0x21, 0x5d, 0x3b, 0x86, 0x59, 0x89, 0xb2, 0x80, 0x05, 0x56, 0x22, 0x28, 0x03, 0x03,
	0xac, 0x44, 0x58, 0x35, 0xc4, 0x19, 0xb1, 0x5f, 0x25, 0x65, 0x49, 0x66, 0xd9, 0x27, 0x75, 0xd2,
	0x2c, 0xea, 0xec, 0x94, 0xfe, 0x21, 0xed, 0xeb, 0x9e, 0x52, 0xbc, 0x83, 0xe2, 0x72, 0x29, 0xbb,
	0x3a, 0xc4, 0x4e, 0xf5, 0x4c, 0x5e, 0xf9, 0x08, 0x36, 0x65, 0x59, 0xb0, 0x81, 0x29, 0x83, 0xd2,
	0x0f, 0x60, 0xca, 0xb0, 0x7a, 0x01, 0xeb, 0x4e, 0x96, 0x55, 0xa0, 0x3b, 0x50, 0x89, 0x00, 0x74,
	0x07, 0x0b, 0x07, 0xc8, 0x52, 0x4d, 0x49, 0xbf, 0x8c, 0x4a, 0x35, 0x98, 0x11, 0xbc, 0x7a, 0x2e,
	0xff, 0x25, 0x45, 0xaa, 0xa9, 0x43, 0x38, 0xf9, 0xe9, 0xe2, 0xab, 0x67, 0x73, 0xdf, 0x51, 0xa4,
	0x5a, 0x2a, 0x85, 0x34, 0x26, 0xd5, 0xb0, 0x1c, 0xdd, 0xd5, 0x0b, 0x3d, 0xe6, 0xa3, 0x76, 0x46,
	0xec, 0x90, 0x1f, 0x7b, 0x63, 0x39, 0xc8, 0xed, 0x8b, 0x3d, 0xe7, 0x53, 0xaf, 0x5e, 0xea, 0xf5,
	0x55, 0xb8, 0x70, 0xb6, 0xb7, 0x9b, 0xa1, 0x66, 0xe1, 0xf0, 0xcc, 0x4c, 0x9a, 0x85, 0x23, 0x32,
	0x26, 0x29, 0x0b, 0x87, 0xf6, 0x86, 0x2e, 0x1c, 0xd1, 0xd9, 0x29, 0xfd, 0x43, 0xc5, 0x5a, 0x56,
	0x33, 0xe5, 0x62, 0xd6, 0x72, 0x2a, 0x3f, 0x31, 0x66, 0x2d, 0xa7, 0x13, 0xee, 0xaa, 0x8b, 0x08,
	0x99, 0x3e, 0x48, 0x96, 0xab, 0x59, 0x44, 0x12, 0xc8, 0x11, 0x36, 0xa5, 0xe4, 0xae, 0x10, 0x9b,
	0x6a, 0xb2, 0x59, 0x88, 0x4d, 0x90, 0x15, 0x96, 0x89, 0x76, 0x25, 0xa1, 0x2a, 0x10, 0xed, 0x30,
	0xc5, 0x2b, 0x10, 0xed, 0xa9, 0x5c, 0xac, 0xce, 0x88, 0xfd, 0x73, 0x22, 0xe4, 0x1f, 0x4f, 0xd8,
	0x69, 0x3f, 0xd3, 0x47, 0x6e, 0xcf, 0x9d, 0xea, 0xe5, 0xbe, 0x32, 0x81, 0x32, 0xcd, 0x92, 0x7a,
	0x0b, 0x68, 0x16, 0x2c, 0xcf, 0x67, 0xd5, 0xc9, 0x4f, 0x50, 0xe9, 0x8c, 0xc4, 0xee, 0x10, 0xb9,
	0xf3, 0x33, 0x99, 0xd9, 0xeb, 0x34, 0xee, 0x90, 0x74, 0xd7, 0x3b, 0x6a, 0xa6, 0x15, 0x39, 0xef,
	0xa0, 0xbd, 0xd2, 0x63, 0x7a, 0xc2, 0x9d, 0xea, 0xc5, 0x9e, 0x13, 0x19, 0x4a, 0x1b, 0xb9, 0x74,
	0xb2, 0x3d, 0x6c, 0x23, 0x87, 0xe6, 0x22, 0xc4, 0x36, 0x72, 0x78, 0xee, 0x3e, 0x46, 0x9b, 0x54,
	0xa6, 0x3b, 0x40, 0x1b, 0x2c, 0x45, 0x1f, 0xa0, 0x0d, 0x9a, 0x2c, 0x8f, 0x53, 0x1e, 0xe6, 0x95,
	0x83, 0x94, 0x47, 0x92, 0xdf, 0x41, 0xca, 0x63, 0xa9, 0xe9, 0xb8, 0x27, 0x25, 0x95, 0xc4, 0x0d,
	0x7a, 0x52, 0xb0, 0x5c, 0x73, 0xd0, 0x93, 0x82, 0x66, 0x82, 0xe3, 0x2b, 0x51, 0xce, 0x7f, 0x65,
	0x2f, 0x66, 0xe5, 0xc6, 0x4a, 0xad, 0x44, 0x98, 0x3a, 0x4b, 0xf2, 0x6b, 0x89, 0x0e, 0x4f, 0x69,
	0xc5, 0xb6, 0xc6, 0xaf, 0xa5, 0x76, 0x27, 0x84, 0xa5, 0x9a, 0x3e, 0x09, 0x13, 0x96, 0xa9, 0x64,
	0x54, 0x98, 0xb0, 0x4c, 0x67, 0x61, 0x62, 0x7b, 0x70, 0x2c, 0xd1, 0x8f, 0x7d, 0xae, 0x87, 0x5c,
	0x40, 0x70, 0x0f, 0xae, 0xcb, 0x18, 0xc4, 0x70, 0xad, 0x64, 0xcc, 0xb1, 0x31, 0xb1, 0xab, 0xc5,
	0x75, 0x2a, 0xd9, 0x0e, 0xa7, 0x9e, 0x9c, 0xa5, 0xc6, 0xc6, 0x24, 0xaf, 0x9e, 0x7a, 0x30, 0xc1,
	0x0d, 0x33, 0xea, 0x40, 0x5e, 0x18, 0x60, 0xd4, 0xa5, 0xf3, 0xd5, 0x00, 0xa3, 0x0e, 0x49, 0x2b,
	0xc3, 0x8c, 0x63, 0x35, 0x1d, 0x0b, 0x30, 0x8e, 0x53, 0x49, 0x62, 0x80, 0x71, 0x9c, 0xce, 0xe5,
	0x22, 0xfb, 0x19, 0xe5, 0xdb, 0xb8, 0xb6, 0x93, 0x9b, 0xe9, 0x03, 0xf7, 0x33, 0xc2, 0x2b, 0xbd,
	0xd2, 0x86, 0x41, 0xe9, 0x7f, 0x39, 0xfb, 0x86, 0xbb, 0x66, 0xc3, 0x80, 0xf4, 0x2e, 0x64, 0x2f,
	0x72, 0x3f, 0xde, 0x5e, 0xe9, 0xf1, 0x1a, 0x3d, 0x2a, 0x7b, 0x35, 0x17, 0xee, 0x19, 0xc6, 0xd2,
	0xa9, 0x0f, 0x6c, 0xad, 0xa4, 0xd3, 0x62, 0x0c, 0xcf, 0x9f, 0xc0, 0x49, 0x92, 0xba, 0x0e, 0x6f,
	0x6b, 0x85, 0x9d, 0x9e, 0x24, 0xe8, 0x9d, 0x7a, 0x26, 0x0f, 0x90, 0xab, 0xe7, 0x40, 0x1e, 0xe0,
	0xb7, 0xe4, 0x81, 0x3c, 0xd0, 0xdc, 0x60, 0x67, 0xf2, 0x00, 0xbb, 0xe7, 0x0d, 0xe4, 0x81, 0xe6,
	0x52, 0x3a, 0x90, 0x07, 0xba, 0x0b, 0xe3, 0x92, 0x61, 0x8c, 0xe5, 0xef, 0xb0, 0x2f, 0xf6, 0x9a,
	0xe7, 0x03, 0x35, 0x8c, 0x75, 0x29, 0x41, 0x64, 0x53, 0x45, 0xba, 0xde, 0x82, 0x9a, 0x2a, 0xea,
	0x65, 0x5a, 0xd4, 0x54, 0x01, 0x57, 0x55, 0x65, 0x65, 0xab, 0xef, 0x1d, 0xbb, 0xaa, 0x8b, 0x2a,
	0xdb, 0x74, 0xef, 0xc2, 0x93, 0x88, 0x5e, 0x38, 0xb6, 0x2f, 0xf5, 0x7c, 0x33, 0x19, 0xf5, 0x24,
	0x6a, 0x6f, 0x31, 0xb3, 0xa5, 0xaa, 0xbb, 0x51, 0x6a, 0xaf, 0xe4, 0x21, 0x26, 0xe6, 0x8c, 0x8b,
	0x3d, 0xbe, 0xa9, 0x98, 0x49, 0xc8, 0x88, 0x17, 0x7a, 0xbb, 0x3a, 0x89, 0x9a, 0x49, 0xda, 0xf1,
	0x04, 0x37, 0x62, 0x37, 0xac, 0x30, 0x6e, 0xd4, 0x5c, 0x5b, 0xc3, 0xb8, 0x51, 0x77, 0x69, 0x4b,
	0x96, 0x81, 0xe9, 0xab, 0x78, 0xa8, 0x0c, 0x44, 0xaf, 0x37, 0xa2, 0x32, 0x10, 0xbf, 0xdb, 0x27,
	0x7b, 0xc0, 0xc4, 0x85, 0x07, 0xd4, 0x03, 0x26, 0x5d, 0xc4, 0x40, 0x3d, 0x60, 0xf2, 0x6d, 0x09,
	0xc9, 0x59, 0x15, 0xf7, 0xb9, 0xa8, 0xbf, 0x57, 0xa2, 0x71, 0x56, 0x81, 0x1e, 0xdf, 0x00, 0x77,
	0x86, 0x74, 0xce, 0x2a, 0x70, 0x8d, 0x07, 0xd3, 0x3d, 0xf0, 0x42, 0x8b, 0xec, 0xac, 0xd2, 0x20,
	0x21, 0x75, 0x1b, 0x05, 0x75, 0x56, 0x01, 0x90, 0x63, 0xcc, 0x8a, 0x18, 0x53, 0x14, 0xb3, 0x52,
	0xc0, 0x2c, 0x8a, 0x59, 0x39, 0x40, 0x55, 0xc2, 0x83, 0x1c, 0xae, 0x8e, 0xe1, 0x01, 0xdc, 0x7c,
	0xc0, 0xf0, 0x00, 0x2f, 0x21, 0x48, 0x67, 0x7d, 0x30, 0x18, 0x1e, 0x3b, 0xeb, 0x43, 0xee, 0x0c,
	0x60, 0x67, 0x7d, 0x58, 0x5c, 0xbd, 0x64, 0x64, 0x82, 0x98, 0x6f, 0xcc, 0xc8, 0x4c, 0x87, 0xc6,
	0x63, 0x46, 0x26, 0x12, 0x3c, 0x2e, 0xbb, 0x62, 0x35, 0x34, 0x48, 0x05, 0x7e, 0xa3, 0xae, 0x58,
	0x80, 0xa5, 0x98, 0x5b, 0x34, 0x9d, 0xa6, 0x22, 0xa1, 0x51, 0x6e, 0x49, 0x77, 0xaa, 0xc6, 0x00,
	0x83, 0x4e, 0x53, 0x71, 0xc4, 0xa0, 0xd3, 0x74, 0x00, 0x31, 0xdb, 0x2a, 0xc3, 0x80, 0x59, 0xb0,
	0x55, 0x46, 0xe2, 0x81, 0xab, 0xcb, 0x39, 0x6f, 0x28, 0xfe, 0x4e, 0xa9, 0xe7, 0xa5, 0xac, 0x00,
	0x4e, 0x8d, 0xbf, 0x33, 0xd5, 0xef, 0x46, 0x2a, 0x78, 0x96, 0xf2, 0xc5, 0xd9, 0xfc, 0xe0, 0x50,
	0x74, 0x87, 0x93, 0x8e, 0x20, 0x65, 0x68, 0x81, 0xf1, 0x93, 0x00, 0x2d, 0x48, 0x78, 0x68, 0x75,
	0x39, 0xe7, 0x0d, 0x20, 0x4e, 0xf9, 0x13, 0x5c, 0x9c, 0x26, 0x71, 0x68, 0xb8, 0x38, 0x95, 0xc2,
	0xc2, 0x64, 0x71, 0x2a, 0xfa, 0x5c, 0xd4, 0x4f, 0x54, 0x27, 0x4e, 0xd5, 0x1e, 0xdf, 0x00, 0x61,
	0x8a, 0x5a, 0x71, 0xaa, 0x86, 0x0e, 0xa2, 0xe2, 0x14, 0xc4, 0xeb, 0xc9, 0xab, 0x4e, 0x83, 0x84,
	0x54, 0x30, 0x1e, 0xba, 0xea, 0x00, 0xc8, 0xaf, 0x92, 0xb2, 0x14, 0xf3, 0x05, 0x7c, 0x8e, 0x6a,
	0x94, 0x5b, 0xf5, 0x94, 0xfe, 0xa1, 0x00, 0x50, 0x0d, 0x43, 0xb2, 0x4f, 0x67, 0xc6, 0x28, 0x41,
	0x00, 0xd3, 0x31, 0x4c, 0xce, 0x88, 0xfd, 0x13, 0x64, 0x9c, 0xc7, 0xf2, 0xd8, 0xc7, 0x95, 0xb7,
	0x93, 0xe0, 0xa3, 0x6a, 0x05, 0x7f, 0x10, 0x7d, 0xbf, 0x31, 0x16, 0x74, 0xfc, 0xd0, 0x7f, 0xdf,
	0xff, 0x06, 0x00, 0x00, 0xff, 0xff, 0x00, 0x59, 0x9c, 0x82, 0x51, 0xa5, 0x00, 0x00,
}
