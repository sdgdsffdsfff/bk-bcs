{
  "swagger": "2.0",
  "info": {
    "title": "蓝鲸基础服务配置平台Sidecar Instance API说明文档",
    "version": "2.0.0"
  },
  "schemes": [
    "http"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/instance/v2/inject": {
      "post": {
        "summary": "注入实例标签",
        "description": "注入实例标签信息",
        "operationId": "Inject",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/sidecarInjectResp"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/sidecarInjectReq"
            }
          }
        ],
        "tags": [
          "Instance"
        ]
      }
    },
    "/instance/v2/ping": {
      "post": {
        "summary": "获取sidecar实例信息",
        "description": "获取sidecar实例信息",
        "operationId": "Ping",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/sidecarPingResp"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/sidecarPingReq"
            }
          }
        ],
        "tags": [
          "Instance"
        ]
      }
    },
    "/instance/v2/report_reload": {
      "post": {
        "summary": "上报Reload信息",
        "description": "上报Reload信息",
        "operationId": "ReportReload",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/sidecarReportReloadResp"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/sidecarReportReloadReq"
            }
          }
        ],
        "tags": [
          "Instance"
        ]
      }
    },
    "/instance/v2/watch_reload": {
      "post": {
        "summary": "订阅reload事件",
        "description": "订阅reload事件",
        "operationId": "WatchReload",
        "responses": {
          "200": {
            "description": "A successful response.(streaming responses)",
            "schema": {
              "$ref": "#/x-stream-definitions/sidecarWatchReloadResp"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/sidecarWatchReloadReq"
            }
          }
        ],
        "tags": [
          "Instance"
        ]
      }
    }
  },
  "definitions": {
    "commonErrCode": {
      "type": "string",
      "enum": [
        "E_OK",
        "E_TIMEOUT",
        "E_NOT_AUTHORIZED",
        "E_API_SYSTEM_UNKNOWN",
        "E_API_PARAMS_INVALID",
        "E_AUTH_SYSTEM_UNKNOWN",
        "E_AUTH_PARAMS_INVALID",
        "E_AUTH_AUTHORIZE_FAILED",
        "E_AUTH_LOCAL_AUTHORIZE_FAILED",
        "E_AUTH_BKIAM_AUTHORIZE_FAILED",
        "E_AUTH_NOT_AUTHORIZED",
        "E_AUTH_LOCAL_ADD_POLICY_FAILED",
        "E_AUTH_BKIAM_ADD_POLICY_FAILED",
        "E_AUTH_LOCAL_REM_POLICY_FAILED",
        "E_AUTH_BKIAM_REM_POLICY_FAILED",
        "E_TPL_SYSTEM_UNKNOWN",
        "E_TPL_PARAMS_INVALID",
        "E_TPL_NOT_FOUND",
        "E_TPL_ALREADY_EXISTS",
        "E_TPL_RENDER_PLUGIN_CHECK_FAILED",
        "E_TPL_NONEED_RENDER",
        "E_TPL_UNKNOWN_ENGINE_TYPE",
        "E_TPL_RENDER_CHECK_ERROR",
        "E_TPL_RENDER_FAILED",
        "E_TPL_TPLBINDED_CANNOT_DELETE",
        "E_CS_SYSTEM_UNKNOWN",
        "E_CS_PARAMS_INVALID",
        "E_CS_CREATE_RELEASE_WITH_UNCONFIRMED_COMMIT",
        "E_CS_COMMIT_ALREADY_CANCELED",
        "E_CS_COMMIT_ALREADY_CONFIRMED",
        "E_CS_ALREADY_EXISTS",
        "E_CS_ROLLBACK_UNPUBLISHED_RELEASE",
        "E_CS_PUBLISHED_NOT_INIT_RELEASE",
        "E_CS_RELEASE_ALREADY_PUBLISHED",
        "E_CS_RELEASE_ALREADY_ROLLBACKED",
        "E_CS_RELOAD_UNPUBLISHED_RELEASE",
        "E_DM_SYSTEM_UNKNOWN",
        "E_DM_PARAMS_INVALID",
        "E_DM_NOT_FOUND",
        "E_DM_ALREADY_EXISTS",
        "E_DM_ERR_DBSHARDING",
        "E_DM_DB_EXEC_ERR",
        "E_DM_DB_UPDATE_ERR",
        "E_DM_DB_ROW_AFFECTED_ERR",
        "E_DM_CFGSET_LOCK_FAILED",
        "E_DM_CFGSET_UNLOCK_FAILED",
        "E_DM_PUBLISH_RELEASE_FAILED",
        "E_DM_ALREADY_EXISTS_UNCONFIRMED_COMMIT",
        "E_DM_COMMIT_NOT_INIT_STATE",
        "E_DM_RELEASE_CONTENT_NOT_FOUND",
        "E_GSE_SYSTEM_UNKNOWN",
        "E_GSE_PARAMS_INVALID",
        "E_GSE_MARSHAL_PUBLISHING_FAILED",
        "E_GSE_PUBLISH_RELEASE_FAILED",
        "E_GSE_ALREADY_PUBLISHED",
        "E_GSE_ALREADY_CANCELED",
        "E_GSE_ALREADY_ROLLBACKED",
        "E_CONNS_SYSTEM_UNKNOWN",
        "E_CONNS_PARAMS_INVALID",
        "E_CONNS_SCHEDULE_RES_FAILED",
        "E_TS_SYSTEM_UNKNOWN",
        "E_TS_PARAMS_INVALID",
        "E_TS_PUBLISH_RELEASE_FAILED",
        "E_IS_SYSTEM_UNKNOWN",
        "E_IS_PARAMS_INVALID"
      ],
      "default": "E_OK",
      "description": "- E_OK: 0 成功\n - E_TIMEOUT: -1 接口超时\n - E_NOT_AUTHORIZED: 4030403 未授权\n - E_API_SYSTEM_UNKNOWN: 4000000 API服务, 节点调用失败\n - E_API_PARAMS_INVALID: 4000001 API服务, 参数校验失败\n - E_AUTH_SYSTEM_UNKNOWN: 4001000 AUTH服务, 节点调用失败\n - E_AUTH_PARAMS_INVALID: 4001001 AUTH服务, 参数校验失败\n - E_AUTH_AUTHORIZE_FAILED: 4001002 AUTH服务, 权限校验失败\n - E_AUTH_LOCAL_AUTHORIZE_FAILED: 4001003 AUTH服务, 本地模式权限失败\n - E_AUTH_BKIAM_AUTHORIZE_FAILED: 4001004 AUTH服务, IAM模式权限失败\n - E_AUTH_NOT_AUTHORIZED: 4001005 AUTH服务, 无权限\n - E_AUTH_LOCAL_ADD_POLICY_FAILED: 4001006 AUTH服务, 本地模式新建策略失败\n - E_AUTH_BKIAM_ADD_POLICY_FAILED: 4001007 AUTH服务, IAM模式新建策略失败\n - E_AUTH_LOCAL_REM_POLICY_FAILED: 4001008 AUTH服务, 本地模式删除策略失败\n - E_AUTH_BKIAM_REM_POLICY_FAILED: 4001009 AUTH服务, IAM模式删除策略失败\n - E_TPL_SYSTEM_UNKNOWN: 4002000 模板服务, 节点调用失败\n - E_TPL_PARAMS_INVALID: 4002001 模板服务, 参数校验失败\n - E_TPL_NOT_FOUND: 4002002 模板服务, 指定目标对象不存在\n - E_TPL_ALREADY_EXISTS: 4002003 模板服务, 指定目标对象已存在\n - E_TPL_RENDER_PLUGIN_CHECK_FAILED: 4002004 模板服务, 插件检查失败\n - E_TPL_NONEED_RENDER: 4002005 模板服务, 无需渲染\n - E_TPL_UNKNOWN_ENGINE_TYPE: 4002006 模板服务, 不支持的引擎\n - E_TPL_RENDER_CHECK_ERROR: 4002007 模板服务, 渲染前置检查失败\n - E_TPL_RENDER_FAILED: 4002008 模板服务, 渲染失败\n - E_TPL_TPLBINDED_CANNOT_DELETE: 4002009 模版服务, 模板绑定中，无法删除\n - E_CS_SYSTEM_UNKNOWN: 4003000 配置服务, 节点调用失败\n - E_CS_PARAMS_INVALID: 4003001 配置服务, 参数校验失败\n - E_CS_CREATE_RELEASE_WITH_UNCONFIRMED_COMMIT: 4003002 配置服务, 无法根据未提交确认的Commit创建配置发布版本\n - E_CS_COMMIT_ALREADY_CANCELED: 4003003 配置服务, 该Commit已撤销，无法再进行Confirm操作\n - E_CS_COMMIT_ALREADY_CONFIRMED: 4003004 配置服务, 该Commit已提交\n - E_CS_ALREADY_EXISTS: 4003005 配置服务, 目标资源已存在无法重复创建\n - E_CS_ROLLBACK_UNPUBLISHED_RELEASE: 4003006 配置服务, 无法回滚一个未发布的版本\n - E_CS_PUBLISHED_NOT_INIT_RELEASE: 4003007 配置服务, 无法发布非初始化状态的版本\n - E_CS_RELEASE_ALREADY_PUBLISHED: 4003008 配置服务, 无法撤销已经发布的Release\n - E_CS_RELEASE_ALREADY_ROLLBACKED: 4003009 配置服务, 无法撤销已经回滚的Release\n - E_CS_RELOAD_UNPUBLISHED_RELEASE: 4003010 配置服务, 无法Reload未发布或未回滚的版本\n - E_DM_SYSTEM_UNKNOWN: 4004000 数据管理服务, 通用未知异常\n - E_DM_PARAMS_INVALID: 4004001 数据管理服务, 参数校验失败\n - E_DM_NOT_FOUND: 4004002 数据管理服务, 指定目标对象不存在\n - E_DM_ALREADY_EXISTS: 4004003 数据管理服务, 指定目标对象已存在\n - E_DM_ERR_DBSHARDING: 4004004 数据管理服务, 获取数据存储分片失败\n - E_DM_DB_EXEC_ERR: 4004005 数据管理服务, 数据操作执行异常\n - E_DM_DB_UPDATE_ERR: 4004006 数据管理服务, 更新失败, 无满足限定条件的目标对象\n - E_DM_DB_ROW_AFFECTED_ERR: 4004007 数据管理服务, 更新失败, 无满足限定条件的目标对象\n - E_DM_CFGSET_LOCK_FAILED: 4004008 数据管理服务, 加锁指定配置集合失败\n - E_DM_CFGSET_UNLOCK_FAILED: 4004009 数据管理服务, 解锁指定配置集合失败\n - E_DM_PUBLISH_RELEASE_FAILED: 4004010 数据管理服务, 配置版本发布失败，无满足限定条件的目标版本对象\n - E_DM_ALREADY_EXISTS_UNCONFIRMED_COMMIT: 4004011 数据管理服务, 存在未完结的Commit提交，无法重新创建Commit\n - E_DM_COMMIT_NOT_INIT_STATE: 4004012 数据管理服务, 关联的Commit已提交或已撤销，无法对其配置实体内容再次修改\n - E_DM_RELEASE_CONTENT_NOT_FOUND: 4004013 数据管理服务, 无法找到指定配置版本的实际配置内如（发布策略触达范围有误或渲染规则有误）\n - E_GSE_SYSTEM_UNKNOWN: 4005000 GSE控制器, 节点调用失败\n - E_GSE_PARAMS_INVALID: 4005001 GSE控制器, 参数校验失败\n - E_GSE_MARSHAL_PUBLISHING_FAILED: 4005002 BCS控制器, 配置版本发布消息解析失败\n - E_GSE_PUBLISH_RELEASE_FAILED: 4005003 GSE控制器, 配置版本任务发布失败\n - E_GSE_ALREADY_PUBLISHED: 4005004 BCS控制器, 配置版本已执行发布，请勿重复执行\n - E_GSE_ALREADY_CANCELED: 4005005 BCS控制器, 配置版本已撤销，无法执行发布\n - E_GSE_ALREADY_ROLLBACKED: 4005006 BCS控制器, 配置版本已回滚\n - E_CONNS_SYSTEM_UNKNOWN: 4006000 会话链接服务, 节点调用失败\n - E_CONNS_PARAMS_INVALID: 4006001 会话链接服务, 参数校验失败\n - E_CONNS_SCHEDULE_RES_FAILED: 4006002 会话链接服务, BCS sidecar接入调度失败\n - E_TS_SYSTEM_UNKNOWN: 4007000 通道服务, 节点调用失败\n - E_TS_PARAMS_INVALID: 4007001 通道服务, 参数校验失败\n - E_TS_PUBLISH_RELEASE_FAILED: 4007002 通道服务, 配置版本发布失败\n - E_IS_SYSTEM_UNKNOWN: 4008000 实例服务, 节点调用失败\n - E_IS_PARAMS_INVALID: 4008001 实例服务, 参数校验失败",
      "title": "ErrCode 错误码"
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "type_url": {
          "type": "string",
          "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
        },
        "value": {
          "type": "string",
          "format": "byte",
          "description": "Must be a valid serialized protocol buffer of the above specified type."
        }
      },
      "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(\u0026foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n\n Example 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\n Example 4: Pack and unpack a message in Go\n\n     foo := \u0026pb.Foo{...}\n     any, err := ptypes.MarshalAny(foo)\n     ...\n     foo := \u0026pb.Foo{}\n     if err := ptypes.UnmarshalAny(any, foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\n\nJSON\n====\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": \u003cstring\u003e,\n      \"lastName\": \u003cstring\u003e\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
    },
    "runtimeStreamError": {
      "type": "object",
      "properties": {
        "grpc_code": {
          "type": "integer",
          "format": "int32"
        },
        "http_code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "http_status": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    },
    "sidecarConfigsMetadata": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "title": "配置名称",
          "maxLength": 64
        },
        "fpath": {
          "type": "string",
          "title": "配置子路径",
          "maxLength": 1024
        }
      },
      "description": "需要reload的配置信息描述",
      "title": "ConfigsMetadata"
    },
    "sidecarInjectReq": {
      "type": "object",
      "example": {
        "seq": "1",
        "biz_id": "f879ab8f-c7e5-11e9-9dc5-525400f99278",
        "app_id": "f879ab8f-c7e5-11e9-9dc5-525400f99278",
        "labels": {
          "k1": "v1",
          "k2": "v2"
        }
      },
      "properties": {
        "seq": {
          "type": "string",
          "description": "调用方的请求序列号，用于指定时间内标识某次请求",
          "title": "请求序列号"
        },
        "biz_id": {
          "type": "string",
          "title": "业务名称",
          "maxLength": 64
        },
        "app_id": {
          "type": "string",
          "title": "应用名称",
          "maxLength": 64
        },
        "path": {
          "type": "string",
          "title": "应用在sidecar的配置缓存路径",
          "maxLength": 128
        },
        "labels": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "description": "实例标签信息注入请求",
      "title": "InjectReq",
      "required": [
        "seq",
        "biz_id",
        "app_id",
        "path",
        "labels"
      ]
    },
    "sidecarInjectResp": {
      "type": "object",
      "example": {
        "seq": "1",
        "code": 0,
        "message": "OK"
      },
      "properties": {
        "seq": {
          "type": "string",
          "description": "响应序列号, 与调用方的请求序列号一致，用于指定时间内标识某次请求",
          "title": "响应序列号"
        },
        "code": {
          "$ref": "#/definitions/commonErrCode",
          "title": "错误码"
        },
        "message": {
          "type": "string",
          "title": "错误描述"
        }
      },
      "description": "实例标签信息注入响应",
      "title": "InjectResp",
      "required": [
        "seq",
        "code",
        "message"
      ]
    },
    "sidecarModInfo": {
      "type": "object",
      "properties": {
        "biz_id": {
          "type": "string",
          "title": "所属业务名称",
          "maxLength": 64
        },
        "app_id": {
          "type": "string",
          "title": "所属应用名称",
          "maxLength": 64
        },
        "cloud_id": {
          "type": "string",
          "title": "区域标识",
          "maxLength": 64
        },
        "ip": {
          "type": "string",
          "title": "IP",
          "maxLength": 32
        },
        "path": {
          "type": "string",
          "title": "应用在sidecar的配置缓存路径",
          "maxLength": 128
        },
        "labels": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "is_ready": {
          "type": "boolean",
          "format": "boolean",
          "description": "在通常情况下，需要业务方完成注入后App才会就绪拉取配置内容，业务方需要保证注入完成使得状态为true",
          "title": "该App模块是否已就绪"
        }
      },
      "description": "Sidecar实例中承载处理的应用模块信息",
      "title": "ModInfo"
    },
    "sidecarPingReq": {
      "type": "object",
      "example": {
        "seq": "1"
      },
      "properties": {
        "seq": {
          "type": "string",
          "description": "调用方的请求序列号，用于指定时间内标识某次请求",
          "title": "请求序列号"
        }
      },
      "description": "Ping请求",
      "title": "PingReq",
      "required": [
        "seq"
      ]
    },
    "sidecarPingResp": {
      "type": "object",
      "example": {
        "seq": "1",
        "code": 0,
        "message": "OK",
        "mods": [
          {
            "biz_id": "f879ab8f-c7e5-11e9-9dc5-525400f99278",
            "app_id": "f879ab8f-c7e5-11e9-9dc5-525400f99278",
            "cloud_id": "dc01",
            "ip": "127.0.0.1",
            "labels": {
              "k1": "v1",
              "k2": "v2"
            },
            "path": "/data/bk-bscp/"
          }
        ]
      },
      "properties": {
        "seq": {
          "type": "string",
          "description": "响应序列号, 与调用方的请求序列号一致，用于指定时间内标识某次请求",
          "title": "响应序列号"
        },
        "code": {
          "$ref": "#/definitions/commonErrCode",
          "title": "错误码"
        },
        "message": {
          "type": "string",
          "title": "错误描述"
        },
        "mods": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/sidecarModInfo"
          },
          "description": "成功后返回实例信息(单Sidecar可以承载处理多个App)",
          "title": "实例信息"
        }
      },
      "description": "Ping响应",
      "title": "PingResp",
      "required": [
        "seq",
        "code",
        "message"
      ]
    },
    "sidecarReportReloadReq": {
      "type": "object",
      "example": {
        "seq": "1",
        "biz_id": "f879ab8f-c7e5-11e9-9dc5-525400f99278",
        "app_id": "f879ab8f-c7e5-11e9-9dc5-525400f99278",
        "release_id": "f879ab8f-c7e5-11e9-9dc5-525400f99278",
        "multi_release_id": "0b67a798-e9c1-11e9-8c23-525400f99278",
        "reload_time": "2019-08-29 17:18:22",
        "reload_code": 0,
        "reload_msg": "SUCCESS"
      },
      "properties": {
        "seq": {
          "type": "string",
          "description": "调用方的请求序列号，用于指定时间内标识某次请求",
          "title": "请求序列号"
        },
        "biz_id": {
          "type": "string",
          "title": "业务名称",
          "maxLength": 64
        },
        "app_id": {
          "type": "string",
          "title": "应用名称",
          "maxLength": 64
        },
        "path": {
          "type": "string",
          "title": "应用在sidecar的配置缓存路径",
          "maxLength": 128
        },
        "release_id": {
          "type": "string",
          "description": "releaseid和multiReleaseid互斥存在，通常差量reload机制下只存在multiReleaseid",
          "title": "已执行生效的发布版本ID",
          "maxLength": 64
        },
        "multi_release_id": {
          "type": "string",
          "description": "releaseid和multiReleaseid互斥存在，通常差量reload机制下只存在multiReleaseid",
          "title": "已执行生效的发布版本ID(组模式)",
          "maxLength": 64
        },
        "reload_time": {
          "type": "string",
          "description": "版本reload时间, 2019-08-29 17:18:22",
          "title": "版本Reload时间"
        },
        "reload_code": {
          "type": "integer",
          "format": "int32",
          "title": "Reload执行错误码"
        },
        "reload_msg": {
          "type": "string",
          "title": "Reload执行错误信息"
        }
      },
      "description": "Reload执行上报请求",
      "title": "ReportReloadReq",
      "required": [
        "seq",
        "biz_id",
        "app_id",
        "path",
        "reload_time",
        "reload_codereload_msg"
      ]
    },
    "sidecarReportReloadResp": {
      "type": "object",
      "example": {
        "seq": "1",
        "code": 0,
        "message": "OK"
      },
      "properties": {
        "seq": {
          "type": "string",
          "description": "响应序列号, 与调用方的请求序列号一致，用于指定时间内标识某次请求",
          "title": "响应序列号"
        },
        "code": {
          "$ref": "#/definitions/commonErrCode",
          "title": "错误码"
        },
        "message": {
          "type": "string",
          "title": "错误描述"
        }
      },
      "description": "Reload执行上报响应",
      "title": "ReportReloadResp",
      "required": [
        "seq",
        "code",
        "message"
      ]
    },
    "sidecarWatchReloadReq": {
      "type": "object",
      "example": {
        "seq": "1",
        "biz_id": "f879ab8f-c7e5-11e9-9dc5-525400f99278",
        "app_id": "f879ab8f-c7e5-11e9-9dc5-525400f99278"
      },
      "properties": {
        "seq": {
          "type": "string",
          "description": "调用方的请求序列号，用于指定时间内标识某次请求",
          "title": "请求序列号"
        },
        "biz_id": {
          "type": "string",
          "title": "业务名称",
          "maxLength": 64
        },
        "app_id": {
          "type": "string",
          "title": "应用名称",
          "maxLength": 64
        },
        "path": {
          "type": "string",
          "title": "应用在sidecar的配置缓存路径",
          "maxLength": 128
        }
      },
      "description": "订阅Reload事件请求",
      "title": "WatchReloadReq",
      "required": [
        "seq",
        "biz_id",
        "app_id",
        "path"
      ]
    },
    "sidecarWatchReloadResp": {
      "type": "object",
      "example": {
        "seq": "1",
        "code": 0,
        "message": "OK",
        "release_id": "f879ab8f-c7e5-11e9-9dc5-525400f99278",
        "multi_release_id": "f879a282-c7e5-11e9-9dc5-525400f99278",
        "release_name": "new release",
        "reload_type": 0,
        "root_path": "/data/bk-bscp",
        "metadatas": [
          {
            "name": "server.yaml",
            "fpath": "/etc"
          }
        ]
      },
      "properties": {
        "seq": {
          "type": "string",
          "description": "响应序列号, 与调用方的请求序列号一致，用于指定时间内标识某次请求",
          "title": "响应序列号"
        },
        "code": {
          "$ref": "#/definitions/commonErrCode",
          "title": "错误码"
        },
        "message": {
          "type": "string",
          "title": "错误描述"
        },
        "release_id": {
          "type": "string",
          "description": "releaseid和multiReleaseid互斥存在，通常差量reload机制下只存在multiReleaseid",
          "title": "新发布版本ID",
          "maxLength": 64
        },
        "multi_release_id": {
          "type": "string",
          "description": "releaseid和multiReleaseid互斥存在，通常差量reload机制下只存在multiReleaseid",
          "title": "新发布版本ID(组模式)",
          "maxLength": 64
        },
        "release_name": {
          "type": "string",
          "title": "新发布版本名称",
          "maxLength": 64
        },
        "reload_type": {
          "type": "integer",
          "format": "int32",
          "description": "0：发布更新  1：回滚  主要是用于描述事件背景",
          "title": "reload类型"
        },
        "root_path": {
          "type": "string",
          "description": "只是sidecar容器内的缓存路径，通过volums后在业务容器中位置并不一定相同",
          "title": "缓存根目录"
        },
        "metadatas": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/sidecarConfigsMetadata"
          },
          "description": "根据该信息到业务容器侧的volums目录中拿取指定配置数据做更新",
          "title": "需要做reload的配置信息"
        }
      },
      "description": "订阅Reload事件流式响应",
      "title": "WatchReloadResp",
      "required": [
        "seq",
        "code",
        "message"
      ]
    }
  },
  "x-stream-definitions": {
    "sidecarWatchReloadResp": {
      "type": "object",
      "properties": {
        "result": {
          "$ref": "#/definitions/sidecarWatchReloadResp"
        },
        "error": {
          "$ref": "#/definitions/runtimeStreamError"
        }
      },
      "title": "Stream result of sidecarWatchReloadResp"
    }
  }
}
