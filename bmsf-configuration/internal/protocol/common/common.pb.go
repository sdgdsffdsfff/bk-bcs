// Code generated by protoc-gen-go.
// source: common.proto
// DO NOT EDIT!

/*
Package common is a generated protocol buffer package.

It is generated from these files:
	common.proto

It has these top-level messages:
	Endpoint
	ComponentHealthzInfo
	ModuleHealthzInfo
	Page
	LabelsMap
	CommitContent
	CommitMetadataWithContent
	CommitMetadata
	ReleaseMetadata
	EffectInfo
	ReloadSpec
	Publishing
	Signalling
	App
	TemplateBind
	ConfigTemplate
	ConfigTemplateVersion
	VariableGroup
	Variable
	Config
	Content
	Commit
	MultiCommit
	Release
	MultiRelease
	AppInstance
	AppInstanceRelease
	ReportInfo
	Strategy
	ProcAttr
	ShardingDB
	Sharding
	Audit
*/
package common

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// ErrCode 错误码
type ErrCode int32

const (
	// 0 成功
	ErrCode_E_OK ErrCode = 0
	// -1 接口超时
	ErrCode_E_TIMEOUT ErrCode = -1
	// 4030403 未授权
	ErrCode_E_NOT_AUTHORIZED ErrCode = 4030403
	// 4000000 API服务, 节点调用失败
	ErrCode_E_API_SYSTEM_UNKNOWN ErrCode = 4000000
	// 4000001 API服务, 参数校验失败
	ErrCode_E_API_PARAMS_INVALID ErrCode = 4000001
	// 4001000 AUTH服务, 节点调用失败
	ErrCode_E_AUTH_SYSTEM_UNKNOWN ErrCode = 4001000
	// 4001001 AUTH服务, 参数校验失败
	ErrCode_E_AUTH_PARAMS_INVALID ErrCode = 4001001
	// 4001002 AUTH服务, 权限校验失败
	ErrCode_E_AUTH_AUTHORIZE_FAILED ErrCode = 4001002
	// 4001003 AUTH服务, 本地模式权限失败
	ErrCode_E_AUTH_LOCAL_AUTHORIZE_FAILED ErrCode = 4001003
	// 4001004 AUTH服务, IAM模式权限失败
	ErrCode_E_AUTH_BKIAM_AUTHORIZE_FAILED ErrCode = 4001004
	// 4001005 AUTH服务, 无权限
	ErrCode_E_AUTH_NOT_AUTHORIZED ErrCode = 4001005
	// 4001006 AUTH服务, 本地模式新建策略失败
	ErrCode_E_AUTH_LOCAL_ADD_POLICY_FAILED ErrCode = 4001006
	// 4001007 AUTH服务, IAM模式新建策略失败
	ErrCode_E_AUTH_BKIAM_ADD_POLICY_FAILED ErrCode = 4001007
	// 4001008 AUTH服务, 本地模式删除策略失败
	ErrCode_E_AUTH_LOCAL_REM_POLICY_FAILED ErrCode = 4001008
	// 4001009 AUTH服务, IAM模式删除策略失败
	ErrCode_E_AUTH_BKIAM_REM_POLICY_FAILED ErrCode = 4001009
	// 4002000 模板服务, 节点调用失败
	ErrCode_E_TPL_SYSTEM_UNKNOWN ErrCode = 4002000
	// 4002001 模板服务, 参数校验失败
	ErrCode_E_TPL_PARAMS_INVALID ErrCode = 4002001
	// 4002002 模板服务, 指定目标对象不存在
	ErrCode_E_TPL_NOT_FOUND ErrCode = 4002002
	// 4002003 模板服务, 指定目标对象已存在
	ErrCode_E_TPL_ALREADY_EXISTS ErrCode = 4002003
	// 4002004 模板服务, 插件检查失败
	ErrCode_E_TPL_RENDER_PLUGIN_CHECK_FAILED ErrCode = 4002004
	// 4002005 模板服务, 无需渲染
	ErrCode_E_TPL_NONEED_RENDER ErrCode = 4002005
	// 4002006 模板服务, 不支持的引擎
	ErrCode_E_TPL_UNKNOWN_ENGINE_TYPE ErrCode = 4002006
	// 4002007 模板服务, 渲染前置检查失败
	ErrCode_E_TPL_RENDER_CHECK_ERROR ErrCode = 4002007
	// 4002008 模板服务, 渲染失败
	ErrCode_E_TPL_RENDER_FAILED ErrCode = 4002008
	// 4002009 模版服务, 模板绑定中，无法删除
	ErrCode_E_TPL_TPLBINDED_CANNOT_DELETE ErrCode = 4002009
	// 4003000 配置服务, 节点调用失败
	ErrCode_E_CS_SYSTEM_UNKNOWN ErrCode = 4003000
	// 4003001 配置服务, 参数校验失败
	ErrCode_E_CS_PARAMS_INVALID ErrCode = 4003001
	// 4003002 配置服务, 无法根据未提交确认的Commit创建配置发布版本
	ErrCode_E_CS_CREATE_RELEASE_WITH_UNCONFIRMED_COMMIT ErrCode = 4003002
	// 4003003 配置服务, 该Commit已撤销，无法再进行Confirm操作
	ErrCode_E_CS_COMMIT_ALREADY_CANCELED ErrCode = 4003003
	// 4003004 配置服务, 该Commit已提交
	ErrCode_E_CS_COMMIT_ALREADY_CONFIRMED ErrCode = 4003004
	// 4003005 配置服务, 目标资源已存在无法重复创建
	ErrCode_E_CS_ALREADY_EXISTS ErrCode = 4003005
	// 4003006 配置服务, 无法回滚一个未发布的版本
	ErrCode_E_CS_ROLLBACK_UNPUBLISHED_RELEASE ErrCode = 4003006
	// 4003007 配置服务, 无法发布非初始化状态的版本
	ErrCode_E_CS_PUBLISHED_NOT_INIT_RELEASE ErrCode = 4003007
	// 4003008 配置服务, 无法撤销已经发布的Release
	ErrCode_E_CS_RELEASE_ALREADY_PUBLISHED ErrCode = 4003008
	// 4003009 配置服务, 无法撤销已经回滚的Release
	ErrCode_E_CS_RELEASE_ALREADY_ROLLBACKED ErrCode = 4003009
	// 4003010 配置服务, 无法Reload未发布或未回滚的版本
	ErrCode_E_CS_RELOAD_UNPUBLISHED_RELEASE ErrCode = 4003010
	// 4004000 数据管理服务, 通用未知异常
	ErrCode_E_DM_SYSTEM_UNKNOWN ErrCode = 4004000
	// 4004001 数据管理服务, 参数校验失败
	ErrCode_E_DM_PARAMS_INVALID ErrCode = 4004001
	// 4004002 数据管理服务, 指定目标对象不存在
	ErrCode_E_DM_NOT_FOUND ErrCode = 4004002
	// 4004003 数据管理服务, 指定目标对象已存在
	ErrCode_E_DM_ALREADY_EXISTS ErrCode = 4004003
	// 4004004 数据管理服务, 获取数据存储分片失败
	ErrCode_E_DM_ERR_DBSHARDING ErrCode = 4004004
	// 4004005 数据管理服务, 数据操作执行异常
	ErrCode_E_DM_DB_EXEC_ERR ErrCode = 4004005
	// 4004006 数据管理服务, 更新失败, 无满足限定条件的目标对象
	ErrCode_E_DM_DB_UPDATE_ERR ErrCode = 4004006
	// 4004007 数据管理服务, 更新失败, 无满足限定条件的目标对象
	ErrCode_E_DM_DB_ROW_AFFECTED_ERR ErrCode = 4004007
	// 4004008 数据管理服务, 加锁指定配置集合失败
	ErrCode_E_DM_CFGSET_LOCK_FAILED ErrCode = 4004008
	// 4004009 数据管理服务, 解锁指定配置集合失败
	ErrCode_E_DM_CFGSET_UNLOCK_FAILED ErrCode = 4004009
	// 4004010 数据管理服务, 配置版本发布失败，无满足限定条件的目标版本对象
	ErrCode_E_DM_PUBLISH_RELEASE_FAILED ErrCode = 4004010
	// 4004011 数据管理服务, 存在未完结的Commit提交，无法重新创建Commit
	ErrCode_E_DM_ALREADY_EXISTS_UNCONFIRMED_COMMIT ErrCode = 4004011
	// 4004012 数据管理服务, 关联的Commit已提交或已撤销，无法对其配置实体内容再次修改
	ErrCode_E_DM_COMMIT_NOT_INIT_STATE ErrCode = 4004012
	// 4004013 数据管理服务, 无法找到指定配置版本的实际配置内如（发布策略触达范围有误或渲染规则有误）
	ErrCode_E_DM_RELEASE_CONTENT_NOT_FOUND ErrCode = 4004013
	// 4005000 GSE控制器, 节点调用失败
	ErrCode_E_GSE_SYSTEM_UNKNOWN ErrCode = 4005000
	// 4005001 GSE控制器, 参数校验失败
	ErrCode_E_GSE_PARAMS_INVALID ErrCode = 4005001
	// 4005002 BCS控制器, 配置版本发布消息解析失败
	ErrCode_E_GSE_MARSHAL_PUBLISHING_FAILED ErrCode = 4005002
	// 4005003 GSE控制器, 配置版本任务发布失败
	ErrCode_E_GSE_PUBLISH_RELEASE_FAILED ErrCode = 4005003
	// 4005004 BCS控制器, 配置版本已执行发布，请勿重复执行
	ErrCode_E_GSE_ALREADY_PUBLISHED ErrCode = 4005004
	// 4005005 BCS控制器, 配置版本已撤销，无法执行发布
	ErrCode_E_GSE_ALREADY_CANCELED ErrCode = 4005005
	// 4005006 BCS控制器, 配置版本已回滚
	ErrCode_E_GSE_ALREADY_ROLLBACKED ErrCode = 4005006
	// 4006000 会话链接服务, 节点调用失败
	ErrCode_E_CONNS_SYSTEM_UNKNOWN ErrCode = 4006000
	// 4006001 会话链接服务, 参数校验失败
	ErrCode_E_CONNS_PARAMS_INVALID ErrCode = 4006001
	// 4006002 会话链接服务, BCS sidecar接入调度失败
	ErrCode_E_CONNS_SCHEDULE_RES_FAILED ErrCode = 4006002
	// 4007000 通道服务, 节点调用失败
	ErrCode_E_TS_SYSTEM_UNKNOWN ErrCode = 4007000
	// 4007001 通道服务, 参数校验失败
	ErrCode_E_TS_PARAMS_INVALID ErrCode = 4007001
	// 4007002 通道服务, 配置版本发布失败
	ErrCode_E_TS_PUBLISH_RELEASE_FAILED ErrCode = 4007002
	// 4008000 实例服务, 节点调用失败
	ErrCode_E_IS_SYSTEM_UNKNOWN ErrCode = 4008000
	// 4008001 实例服务, 参数校验失败
	ErrCode_E_IS_PARAMS_INVALID ErrCode = 4008001
)

var ErrCode_name = map[int32]string{
	0:       "E_OK",
	-1:      "E_TIMEOUT",
	4030403: "E_NOT_AUTHORIZED",
	4000000: "E_API_SYSTEM_UNKNOWN",
	4000001: "E_API_PARAMS_INVALID",
	4001000: "E_AUTH_SYSTEM_UNKNOWN",
	4001001: "E_AUTH_PARAMS_INVALID",
	4001002: "E_AUTH_AUTHORIZE_FAILED",
	4001003: "E_AUTH_LOCAL_AUTHORIZE_FAILED",
	4001004: "E_AUTH_BKIAM_AUTHORIZE_FAILED",
	4001005: "E_AUTH_NOT_AUTHORIZED",
	4001006: "E_AUTH_LOCAL_ADD_POLICY_FAILED",
	4001007: "E_AUTH_BKIAM_ADD_POLICY_FAILED",
	4001008: "E_AUTH_LOCAL_REM_POLICY_FAILED",
	4001009: "E_AUTH_BKIAM_REM_POLICY_FAILED",
	4002000: "E_TPL_SYSTEM_UNKNOWN",
	4002001: "E_TPL_PARAMS_INVALID",
	4002002: "E_TPL_NOT_FOUND",
	4002003: "E_TPL_ALREADY_EXISTS",
	4002004: "E_TPL_RENDER_PLUGIN_CHECK_FAILED",
	4002005: "E_TPL_NONEED_RENDER",
	4002006: "E_TPL_UNKNOWN_ENGINE_TYPE",
	4002007: "E_TPL_RENDER_CHECK_ERROR",
	4002008: "E_TPL_RENDER_FAILED",
	4002009: "E_TPL_TPLBINDED_CANNOT_DELETE",
	4003000: "E_CS_SYSTEM_UNKNOWN",
	4003001: "E_CS_PARAMS_INVALID",
	4003002: "E_CS_CREATE_RELEASE_WITH_UNCONFIRMED_COMMIT",
	4003003: "E_CS_COMMIT_ALREADY_CANCELED",
	4003004: "E_CS_COMMIT_ALREADY_CONFIRMED",
	4003005: "E_CS_ALREADY_EXISTS",
	4003006: "E_CS_ROLLBACK_UNPUBLISHED_RELEASE",
	4003007: "E_CS_PUBLISHED_NOT_INIT_RELEASE",
	4003008: "E_CS_RELEASE_ALREADY_PUBLISHED",
	4003009: "E_CS_RELEASE_ALREADY_ROLLBACKED",
	4003010: "E_CS_RELOAD_UNPUBLISHED_RELEASE",
	4004000: "E_DM_SYSTEM_UNKNOWN",
	4004001: "E_DM_PARAMS_INVALID",
	4004002: "E_DM_NOT_FOUND",
	4004003: "E_DM_ALREADY_EXISTS",
	4004004: "E_DM_ERR_DBSHARDING",
	4004005: "E_DM_DB_EXEC_ERR",
	4004006: "E_DM_DB_UPDATE_ERR",
	4004007: "E_DM_DB_ROW_AFFECTED_ERR",
	4004008: "E_DM_CFGSET_LOCK_FAILED",
	4004009: "E_DM_CFGSET_UNLOCK_FAILED",
	4004010: "E_DM_PUBLISH_RELEASE_FAILED",
	4004011: "E_DM_ALREADY_EXISTS_UNCONFIRMED_COMMIT",
	4004012: "E_DM_COMMIT_NOT_INIT_STATE",
	4004013: "E_DM_RELEASE_CONTENT_NOT_FOUND",
	4005000: "E_GSE_SYSTEM_UNKNOWN",
	4005001: "E_GSE_PARAMS_INVALID",
	4005002: "E_GSE_MARSHAL_PUBLISHING_FAILED",
	4005003: "E_GSE_PUBLISH_RELEASE_FAILED",
	4005004: "E_GSE_ALREADY_PUBLISHED",
	4005005: "E_GSE_ALREADY_CANCELED",
	4005006: "E_GSE_ALREADY_ROLLBACKED",
	4006000: "E_CONNS_SYSTEM_UNKNOWN",
	4006001: "E_CONNS_PARAMS_INVALID",
	4006002: "E_CONNS_SCHEDULE_RES_FAILED",
	4007000: "E_TS_SYSTEM_UNKNOWN",
	4007001: "E_TS_PARAMS_INVALID",
	4007002: "E_TS_PUBLISH_RELEASE_FAILED",
	4008000: "E_IS_SYSTEM_UNKNOWN",
	4008001: "E_IS_PARAMS_INVALID",
}
var ErrCode_value = map[string]int32{
	"E_OK":                                        0,
	"E_TIMEOUT":                                   -1,
	"E_NOT_AUTHORIZED":                            4030403,
	"E_API_SYSTEM_UNKNOWN":                        4000000,
	"E_API_PARAMS_INVALID":                        4000001,
	"E_AUTH_SYSTEM_UNKNOWN":                       4001000,
	"E_AUTH_PARAMS_INVALID":                       4001001,
	"E_AUTH_AUTHORIZE_FAILED":                     4001002,
	"E_AUTH_LOCAL_AUTHORIZE_FAILED":               4001003,
	"E_AUTH_BKIAM_AUTHORIZE_FAILED":               4001004,
	"E_AUTH_NOT_AUTHORIZED":                       4001005,
	"E_AUTH_LOCAL_ADD_POLICY_FAILED":              4001006,
	"E_AUTH_BKIAM_ADD_POLICY_FAILED":              4001007,
	"E_AUTH_LOCAL_REM_POLICY_FAILED":              4001008,
	"E_AUTH_BKIAM_REM_POLICY_FAILED":              4001009,
	"E_TPL_SYSTEM_UNKNOWN":                        4002000,
	"E_TPL_PARAMS_INVALID":                        4002001,
	"E_TPL_NOT_FOUND":                             4002002,
	"E_TPL_ALREADY_EXISTS":                        4002003,
	"E_TPL_RENDER_PLUGIN_CHECK_FAILED":            4002004,
	"E_TPL_NONEED_RENDER":                         4002005,
	"E_TPL_UNKNOWN_ENGINE_TYPE":                   4002006,
	"E_TPL_RENDER_CHECK_ERROR":                    4002007,
	"E_TPL_RENDER_FAILED":                         4002008,
	"E_TPL_TPLBINDED_CANNOT_DELETE":               4002009,
	"E_CS_SYSTEM_UNKNOWN":                         4003000,
	"E_CS_PARAMS_INVALID":                         4003001,
	"E_CS_CREATE_RELEASE_WITH_UNCONFIRMED_COMMIT": 4003002,
	"E_CS_COMMIT_ALREADY_CANCELED":                4003003,
	"E_CS_COMMIT_ALREADY_CONFIRMED":               4003004,
	"E_CS_ALREADY_EXISTS":                         4003005,
	"E_CS_ROLLBACK_UNPUBLISHED_RELEASE":           4003006,
	"E_CS_PUBLISHED_NOT_INIT_RELEASE":             4003007,
	"E_CS_RELEASE_ALREADY_PUBLISHED":              4003008,
	"E_CS_RELEASE_ALREADY_ROLLBACKED":             4003009,
	"E_CS_RELOAD_UNPUBLISHED_RELEASE":             4003010,
	"E_DM_SYSTEM_UNKNOWN":                         4004000,
	"E_DM_PARAMS_INVALID":                         4004001,
	"E_DM_NOT_FOUND":                              4004002,
	"E_DM_ALREADY_EXISTS":                         4004003,
	"E_DM_ERR_DBSHARDING":                         4004004,
	"E_DM_DB_EXEC_ERR":                            4004005,
	"E_DM_DB_UPDATE_ERR":                          4004006,
	"E_DM_DB_ROW_AFFECTED_ERR":                    4004007,
	"E_DM_CFGSET_LOCK_FAILED":                     4004008,
	"E_DM_CFGSET_UNLOCK_FAILED":                   4004009,
	"E_DM_PUBLISH_RELEASE_FAILED":                 4004010,
	"E_DM_ALREADY_EXISTS_UNCONFIRMED_COMMIT":      4004011,
	"E_DM_COMMIT_NOT_INIT_STATE":                  4004012,
	"E_DM_RELEASE_CONTENT_NOT_FOUND":              4004013,
	"E_GSE_SYSTEM_UNKNOWN":                        4005000,
	"E_GSE_PARAMS_INVALID":                        4005001,
	"E_GSE_MARSHAL_PUBLISHING_FAILED":             4005002,
	"E_GSE_PUBLISH_RELEASE_FAILED":                4005003,
	"E_GSE_ALREADY_PUBLISHED":                     4005004,
	"E_GSE_ALREADY_CANCELED":                      4005005,
	"E_GSE_ALREADY_ROLLBACKED":                    4005006,
	"E_CONNS_SYSTEM_UNKNOWN":                      4006000,
	"E_CONNS_PARAMS_INVALID":                      4006001,
	"E_CONNS_SCHEDULE_RES_FAILED":                 4006002,
	"E_TS_SYSTEM_UNKNOWN":                         4007000,
	"E_TS_PARAMS_INVALID":                         4007001,
	"E_TS_PUBLISH_RELEASE_FAILED":                 4007002,
	"E_IS_SYSTEM_UNKNOWN":                         4008000,
	"E_IS_PARAMS_INVALID":                         4008001,
}

func (x ErrCode) String() string {
	return proto.EnumName(ErrCode_name, int32(x))
}
func (ErrCode) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// ConfigType 配置类型
type ConfigType int32

const (
	// 0 文件配置
	ConfigType_CT_FILE ConfigType = 0
	// 1 KV-String
	ConfigType_CT_STRING ConfigType = 1
	// 2 KV-Json
	ConfigType_CT_JSON ConfigType = 2
	// 3 KV-Yaml
	ConfigType_CT_YAML ConfigType = 3
)

var ConfigType_name = map[int32]string{
	0: "CT_FILE",
	1: "CT_STRING",
	2: "CT_JSON",
	3: "CT_YAML",
}
var ConfigType_value = map[string]int32{
	"CT_FILE":   0,
	"CT_STRING": 1,
	"CT_JSON":   2,
	"CT_YAML":   3,
}

func (x ConfigType) String() string {
	return proto.EnumName(ConfigType_name, int32(x))
}
func (ConfigType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

// TemplateEngineType 模板渲染引擎类型
type TemplateEngineType int32

const (
	// 0 非模板
	TemplateEngineType_TET_NONE TemplateEngineType = 0
	// 1 Golang内置模板引擎
	TemplateEngineType_TET_GOLANG TemplateEngineType = 1
	// 2 Python Mako模板引擎
	TemplateEngineType_TET_PYTHONMAKO TemplateEngineType = 2
	// 3 外部模板
	TemplateEngineType_TET_EXTERNAL TemplateEngineType = 3
)

var TemplateEngineType_name = map[int32]string{
	0: "TET_NONE",
	1: "TET_GOLANG",
	2: "TET_PYTHONMAKO",
	3: "TET_EXTERNAL",
}
var TemplateEngineType_value = map[string]int32{
	"TET_NONE":       0,
	"TET_GOLANG":     1,
	"TET_PYTHONMAKO": 2,
	"TET_EXTERNAL":   3,
}

func (x TemplateEngineType) String() string {
	return proto.EnumName(TemplateEngineType_name, int32(x))
}
func (TemplateEngineType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

// ConfigFileMode 配置文件类型(仅当ConfigType为0，即文件型配置时有效)
type ConfigFileMode int32

const (
	// 0 文本文件
	ConfigFileMode_CFM_TEXT ConfigFileMode = 0
	// 1 二进制文件
	ConfigFileMode_CFM_BINARY ConfigFileMode = 1
	// 2 模板文件
	ConfigFileMode_CFM_TEMPLATE ConfigFileMode = 2
)

var ConfigFileMode_name = map[int32]string{
	0: "CFM_TEXT",
	1: "CFM_BINARY",
	2: "CFM_TEMPLATE",
}
var ConfigFileMode_value = map[string]int32{
	"CFM_TEXT":     0,
	"CFM_BINARY":   1,
	"CFM_TEMPLATE": 2,
}

func (x ConfigFileMode) String() string {
	return proto.EnumName(ConfigFileMode_name, int32(x))
}
func (ConfigFileMode) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

// CommonState 通用状态
type CommonState int32

const (
	// 0 正常
	CommonState_CS_VALID CommonState = 0
	// 1 非正常
	CommonState_CS_INVALID CommonState = 1
)

var CommonState_name = map[int32]string{
	0: "CS_VALID",
	1: "CS_INVALID",
}
var CommonState_value = map[string]int32{
	"CS_VALID":   0,
	"CS_INVALID": 1,
}

func (x CommonState) String() string {
	return proto.EnumName(CommonState_name, int32(x))
}
func (CommonState) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

// ConfigState 配置逻辑状态
type ConfigState int32

const (
	// 0 通用状态
	ConfigState_CS_NORMAL ConfigState = 0
	// 1 已发布过版本的状态
	ConfigState_CS_RELEASED ConfigState = 1
)

var ConfigState_name = map[int32]string{
	0: "CS_NORMAL",
	1: "CS_RELEASED",
}
var ConfigState_value = map[string]int32{
	"CS_NORMAL":   0,
	"CS_RELEASED": 1,
}

func (x ConfigState) String() string {
	return proto.EnumName(ConfigState_name, int32(x))
}
func (ConfigState) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

// CommitState 改动提交状态
type CommitState int32

const (
	// 0 初始化
	CommitState_CS_INIT CommitState = 0
	// 1 已提交
	CommitState_CS_CONFIRMED CommitState = 1
	// 2 已撤销
	CommitState_CS_CANCELED CommitState = 2
)

var CommitState_name = map[int32]string{
	0: "CS_INIT",
	1: "CS_CONFIRMED",
	2: "CS_CANCELED",
}
var CommitState_value = map[string]int32{
	"CS_INIT":      0,
	"CS_CONFIRMED": 1,
	"CS_CANCELED":  2,
}

func (x CommitState) String() string {
	return proto.EnumName(CommitState_name, int32(x))
}
func (CommitState) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

// CommitMode 提交模式
type CommitMode int32

const (
	// 0 非模板提交模式
	CommitMode_CM_CONFIGS CommitMode = 0
	// 1 模板提交模式
	CommitMode_CM_TEMPLATE CommitMode = 1
)

var CommitMode_name = map[int32]string{
	0: "CM_CONFIGS",
	1: "CM_TEMPLATE",
}
var CommitMode_value = map[string]int32{
	"CM_CONFIGS":  0,
	"CM_TEMPLATE": 1,
}

func (x CommitMode) String() string {
	return proto.EnumName(CommitMode_name, int32(x))
}
func (CommitMode) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

// ReleaseState 发布版本状态
type ReleaseState int32

const (
	// 0 初始化
	ReleaseState_RS_INIT ReleaseState = 0
	// 1 已发布
	ReleaseState_RS_PUBLISHED ReleaseState = 1
	// 2 已撤销
	ReleaseState_RS_CANCELED ReleaseState = 2
	// 3 已回滚
	ReleaseState_RS_ROLLBACKED ReleaseState = 3
)

var ReleaseState_name = map[int32]string{
	0: "RS_INIT",
	1: "RS_PUBLISHED",
	2: "RS_CANCELED",
	3: "RS_ROLLBACKED",
}
var ReleaseState_value = map[string]int32{
	"RS_INIT":       0,
	"RS_PUBLISHED":  1,
	"RS_CANCELED":   2,
	"RS_ROLLBACKED": 3,
}

func (x ReleaseState) String() string {
	return proto.EnumName(ReleaseState_name, int32(x))
}
func (ReleaseState) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

// AppInstanceState 应用实例状态
type AppInstanceState int32

const (
	// 0 离线
	AppInstanceState_INSS_OFFLINE AppInstanceState = 0
	// 1 在线
	AppInstanceState_INSS_ONLINE AppInstanceState = 1
)

var AppInstanceState_name = map[int32]string{
	0: "INSS_OFFLINE",
	1: "INSS_ONLINE",
}
var AppInstanceState_value = map[string]int32{
	"INSS_OFFLINE": 0,
	"INSS_ONLINE":  1,
}

func (x AppInstanceState) String() string {
	return proto.EnumName(AppInstanceState_name, int32(x))
}
func (AppInstanceState) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

// DeployType 部署环境类型
type DeployType int32

const (
	// 0 BCS容器部署
	DeployType_DT_BCS DeployType = 0
	// 1 GSE进程部署
	DeployType_DT_GSE DeployType = 1
)

var DeployType_name = map[int32]string{
	0: "DT_BCS",
	1: "DT_GSE",
}
var DeployType_value = map[string]int32{
	"DT_BCS": 0,
	"DT_GSE": 1,
}

func (x DeployType) String() string {
	return proto.EnumName(DeployType_name, int32(x))
}
func (DeployType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

// SourceType 系统资源类型
type SourceType int32

const (
	// 0 应用模块资源
	SourceType_ST_APP SourceType = 0
	// 1 模板资源
	SourceType_ST_TEMPLATE SourceType = 1
	// 2 模板绑定
	SourceType_ST_TEMPLATE_BIND SourceType = 2
	// 3 模板版本
	SourceType_ST_TEMPLATE_VERSION SourceType = 3
	// 4 配置资源
	SourceType_ST_CONFIG SourceType = 4
	// 5 提交资源
	SourceType_ST_COMMIT SourceType = 5
	// 6 配置内容
	SourceType_ST_CONTENT SourceType = 6
	// 7 版本资源
	SourceType_ST_RELEASE SourceType = 7
	// 8 策略资源
	SourceType_ST_STRATEGY SourceType = 8
	// 9 组模式提交资源
	SourceType_ST_MULTI_COMMIT SourceType = 9
	// 10 组模式配置版本
	SourceType_ST_MULTI_RELEASE SourceType = 10
	// 11 进程环境应用归属信息
	SourceType_ST_PROC_ATTR SourceType = 11
	// 12 变量分组
	SourceType_ST_VAR_GROUP SourceType = 12
	// 13 变量
	SourceType_ST_VAR SourceType = 13
	SourceType_ST_END SourceType = 14
)

var SourceType_name = map[int32]string{
	0:  "ST_APP",
	1:  "ST_TEMPLATE",
	2:  "ST_TEMPLATE_BIND",
	3:  "ST_TEMPLATE_VERSION",
	4:  "ST_CONFIG",
	5:  "ST_COMMIT",
	6:  "ST_CONTENT",
	7:  "ST_RELEASE",
	8:  "ST_STRATEGY",
	9:  "ST_MULTI_COMMIT",
	10: "ST_MULTI_RELEASE",
	11: "ST_PROC_ATTR",
	12: "ST_VAR_GROUP",
	13: "ST_VAR",
	14: "ST_END",
}
var SourceType_value = map[string]int32{
	"ST_APP":              0,
	"ST_TEMPLATE":         1,
	"ST_TEMPLATE_BIND":    2,
	"ST_TEMPLATE_VERSION": 3,
	"ST_CONFIG":           4,
	"ST_COMMIT":           5,
	"ST_CONTENT":          6,
	"ST_RELEASE":          7,
	"ST_STRATEGY":         8,
	"ST_MULTI_COMMIT":     9,
	"ST_MULTI_RELEASE":    10,
	"ST_PROC_ATTR":        11,
	"ST_VAR_GROUP":        12,
	"ST_VAR":              13,
	"ST_END":              14,
}

func (x SourceType) String() string {
	return proto.EnumName(SourceType_name, int32(x))
}
func (SourceType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

// SourceOpType 资源操作类型
type SourceOpType int32

const (
	// 0 创建
	SourceOpType_SOT_CREATE SourceOpType = 0
	// 1 更新
	SourceOpType_SOT_UPDATE SourceOpType = 1
	// 2 查询
	SourceOpType_SOT_QUERY SourceOpType = 2
	// 3 查询列表、历史记录
	SourceOpType_SOT_LIST SourceOpType = 3
	// 4 删除
	SourceOpType_SOT_DELETE SourceOpType = 4
	// 5 取消
	SourceOpType_SOT_CANCEL SourceOpType = 5
	// 6 确认提交
	SourceOpType_SOT_CONFIRM SourceOpType = 6
	// 7 发布版本
	SourceOpType_SOT_PUBLISH SourceOpType = 7
	// 8 回滚版本
	SourceOpType_SOT_ROLLBACK SourceOpType = 8
	// 9 Reload配置版本
	SourceOpType_SOT_RELOAD SourceOpType = 9
	SourceOpType_SOT_END    SourceOpType = 10
)

var SourceOpType_name = map[int32]string{
	0:  "SOT_CREATE",
	1:  "SOT_UPDATE",
	2:  "SOT_QUERY",
	3:  "SOT_LIST",
	4:  "SOT_DELETE",
	5:  "SOT_CANCEL",
	6:  "SOT_CONFIRM",
	7:  "SOT_PUBLISH",
	8:  "SOT_ROLLBACK",
	9:  "SOT_RELOAD",
	10: "SOT_END",
}
var SourceOpType_value = map[string]int32{
	"SOT_CREATE":   0,
	"SOT_UPDATE":   1,
	"SOT_QUERY":    2,
	"SOT_LIST":     3,
	"SOT_DELETE":   4,
	"SOT_CANCEL":   5,
	"SOT_CONFIRM":  6,
	"SOT_PUBLISH":  7,
	"SOT_ROLLBACK": 8,
	"SOT_RELOAD":   9,
	"SOT_END":      10,
}

func (x SourceOpType) String() string {
	return proto.EnumName(SourceOpType_name, int32(x))
}
func (SourceOpType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

// SignallingType 下行信令类型
type SignallingType int32

const (
	// ST_SignallingTypePublish 配置发布信令
	SignallingType_ST_SignallingTypePublish SignallingType = 0
	// ST_SignallingTypeRollback 配置回滚信令
	SignallingType_ST_SignallingTypeRollback SignallingType = 1
	// ST_SignallingTypeReload 配置Reload信令
	SignallingType_ST_SignallingTypeReload SignallingType = 2
	SignallingType_ST_SignallingTypeEnd    SignallingType = 3
)

var SignallingType_name = map[int32]string{
	0: "ST_SignallingTypePublish",
	1: "ST_SignallingTypeRollback",
	2: "ST_SignallingTypeReload",
	3: "ST_SignallingTypeEnd",
}
var SignallingType_value = map[string]int32{
	"ST_SignallingTypePublish":  0,
	"ST_SignallingTypeRollback": 1,
	"ST_SignallingTypeReload":   2,
	"ST_SignallingTypeEnd":      3,
}

func (x SignallingType) String() string {
	return proto.EnumName(SignallingType_name, int32(x))
}
func (SignallingType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

// Endpoint 接入节点实例
type Endpoint struct {
	// ip 接入点IP
	Ip string `protobuf:"bytes,1,opt,name=ip" json:"ip,omitempty"`
	// port 接入点端口
	Port int32 `protobuf:"varint,2,opt,name=port" json:"port,omitempty"`
}

func (m *Endpoint) Reset()                    { *m = Endpoint{} }
func (m *Endpoint) String() string            { return proto.CompactTextString(m) }
func (*Endpoint) ProtoMessage()               {}
func (*Endpoint) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Endpoint) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *Endpoint) GetPort() int32 {
	if m != nil {
		return m.Port
	}
	return 0
}

type ComponentHealthzInfo struct {
	Component string `protobuf:"bytes,1,opt,name=component" json:"component,omitempty"`
	IsHealthy bool   `protobuf:"varint,2,opt,name=is_healthy,json=isHealthy" json:"is_healthy,omitempty"`
	Message   string `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *ComponentHealthzInfo) Reset()                    { *m = ComponentHealthzInfo{} }
func (m *ComponentHealthzInfo) String() string            { return proto.CompactTextString(m) }
func (*ComponentHealthzInfo) ProtoMessage()               {}
func (*ComponentHealthzInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ComponentHealthzInfo) GetComponent() string {
	if m != nil {
		return m.Component
	}
	return ""
}

func (m *ComponentHealthzInfo) GetIsHealthy() bool {
	if m != nil {
		return m.IsHealthy
	}
	return false
}

func (m *ComponentHealthzInfo) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type ModuleHealthzInfo struct {
	Module     string                  `protobuf:"bytes,1,opt,name=module" json:"module,omitempty"`
	Version    string                  `protobuf:"bytes,2,opt,name=version" json:"version,omitempty"`
	BuildTime  string                  `protobuf:"bytes,3,opt,name=build_time,json=buildTime" json:"build_time,omitempty"`
	GitHash    string                  `protobuf:"bytes,4,opt,name=git_hash,json=gitHash" json:"git_hash,omitempty"`
	IsHealthy  bool                    `protobuf:"varint,5,opt,name=is_healthy,json=isHealthy" json:"is_healthy,omitempty"`
	Message    string                  `protobuf:"bytes,6,opt,name=message" json:"message,omitempty"`
	Components []*ComponentHealthzInfo `protobuf:"bytes,7,rep,name=components" json:"components,omitempty"`
}

func (m *ModuleHealthzInfo) Reset()                    { *m = ModuleHealthzInfo{} }
func (m *ModuleHealthzInfo) String() string            { return proto.CompactTextString(m) }
func (*ModuleHealthzInfo) ProtoMessage()               {}
func (*ModuleHealthzInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ModuleHealthzInfo) GetModule() string {
	if m != nil {
		return m.Module
	}
	return ""
}

func (m *ModuleHealthzInfo) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *ModuleHealthzInfo) GetBuildTime() string {
	if m != nil {
		return m.BuildTime
	}
	return ""
}

func (m *ModuleHealthzInfo) GetGitHash() string {
	if m != nil {
		return m.GitHash
	}
	return ""
}

func (m *ModuleHealthzInfo) GetIsHealthy() bool {
	if m != nil {
		return m.IsHealthy
	}
	return false
}

func (m *ModuleHealthzInfo) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *ModuleHealthzInfo) GetComponents() []*ComponentHealthzInfo {
	if m != nil {
		return m.Components
	}
	return nil
}

type Page struct {
	ReturnTotal bool  `protobuf:"varint,1,opt,name=return_total,json=returnTotal" json:"return_total,omitempty"`
	Start       int32 `protobuf:"varint,2,opt,name=start" json:"start,omitempty"`
	Limit       int32 `protobuf:"varint,3,opt,name=limit" json:"limit,omitempty"`
}

func (m *Page) Reset()                    { *m = Page{} }
func (m *Page) String() string            { return proto.CompactTextString(m) }
func (*Page) ProtoMessage()               {}
func (*Page) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Page) GetReturnTotal() bool {
	if m != nil {
		return m.ReturnTotal
	}
	return false
}

func (m *Page) GetStart() int32 {
	if m != nil {
		return m.Start
	}
	return 0
}

func (m *Page) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type LabelsMap struct {
	Labels map[string]string `protobuf:"bytes,1,rep,name=labels" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *LabelsMap) Reset()                    { *m = LabelsMap{} }
func (m *LabelsMap) String() string            { return proto.CompactTextString(m) }
func (*LabelsMap) ProtoMessage()               {}
func (*LabelsMap) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *LabelsMap) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

type CommitContent struct {
	ContentId   string `protobuf:"bytes,1,opt,name=content_id,json=contentId" json:"content_id,omitempty"`
	ContentSize uint32 `protobuf:"varint,2,opt,name=content_size,json=contentSize" json:"content_size,omitempty"`
	// 内容索引策略，用于节点索引指定版本的配置内容. 支持多个标签，每个标签之间为逻辑或关系. 格式：KV, map type / JSON KV, key为目标标签名称，value为标签规则表达式，格式为OP|VALUES,
	// OP可以为eq(默认为空也按eq处理)等于、ne不等于、gt大于、lt小于、ge大于等于、le小于等于, VALUES可以为单独的标签值或多个标签值例如1,2,3 其表示
	// IN(1,2,3)的语意. OP和VALUES之间用竖线分割. 注意：以往协议中没有OP表达式支持的情况，即为空OP按照eq等于处理.
	LabelsOr []*LabelsMap `protobuf:"bytes,3,rep,name=labels_or,json=labelsOr" json:"labels_or,omitempty"`
	// 内容索引策略，用于节点索引指定版本的配置内容. 支持多个标签，每个标签之间为逻辑与关系. 格式：KV, map type / JSON KV, key为目标标签名称，value为标签规则表达式，格式为OP|VALUES,
	// OP可以为eq(默认为空也按eq处理)等于、ne不等于、gt大于、lt小于、ge大于等于、le小于等于, VALUES可以为单独的标签值或多个标签值例如1,2,3 其表示
	// IN(1,2,3)的语意. OP和VALUES之间用竖线分割. 注意：以往协议中没有OP表达式支持的情况，即为空OP按照eq等于处理.
	LabelsAnd []*LabelsMap `protobuf:"bytes,4,rep,name=labels_and,json=labelsAnd" json:"labels_and,omitempty"`
}

func (m *CommitContent) Reset()                    { *m = CommitContent{} }
func (m *CommitContent) String() string            { return proto.CompactTextString(m) }
func (*CommitContent) ProtoMessage()               {}
func (*CommitContent) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *CommitContent) GetContentId() string {
	if m != nil {
		return m.ContentId
	}
	return ""
}

func (m *CommitContent) GetContentSize() uint32 {
	if m != nil {
		return m.ContentSize
	}
	return 0
}

func (m *CommitContent) GetLabelsOr() []*LabelsMap {
	if m != nil {
		return m.LabelsOr
	}
	return nil
}

func (m *CommitContent) GetLabelsAnd() []*LabelsMap {
	if m != nil {
		return m.LabelsAnd
	}
	return nil
}

type CommitMetadataWithContent struct {
	CfgId    string           `protobuf:"bytes,1,opt,name=cfg_id,json=cfgId" json:"cfg_id,omitempty"`
	Contents []*CommitContent `protobuf:"bytes,2,rep,name=contents" json:"contents,omitempty"`
	CommitId string           `protobuf:"bytes,3,opt,name=commit_id,json=commitId" json:"commit_id,omitempty"`
}

func (m *CommitMetadataWithContent) Reset()                    { *m = CommitMetadataWithContent{} }
func (m *CommitMetadataWithContent) String() string            { return proto.CompactTextString(m) }
func (*CommitMetadataWithContent) ProtoMessage()               {}
func (*CommitMetadataWithContent) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *CommitMetadataWithContent) GetCfgId() string {
	if m != nil {
		return m.CfgId
	}
	return ""
}

func (m *CommitMetadataWithContent) GetContents() []*CommitContent {
	if m != nil {
		return m.Contents
	}
	return nil
}

func (m *CommitMetadataWithContent) GetCommitId() string {
	if m != nil {
		return m.CommitId
	}
	return ""
}

type CommitMetadata struct {
	CfgId      string `protobuf:"bytes,1,opt,name=cfg_id,json=cfgId" json:"cfg_id,omitempty"`
	CommitMode int32  `protobuf:"varint,2,opt,name=commit_mode,json=commitMode" json:"commit_mode,omitempty"`
	CommitId   string `protobuf:"bytes,3,opt,name=commit_id,json=commitId" json:"commit_id,omitempty"`
}

func (m *CommitMetadata) Reset()                    { *m = CommitMetadata{} }
func (m *CommitMetadata) String() string            { return proto.CompactTextString(m) }
func (*CommitMetadata) ProtoMessage()               {}
func (*CommitMetadata) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *CommitMetadata) GetCfgId() string {
	if m != nil {
		return m.CfgId
	}
	return ""
}

func (m *CommitMetadata) GetCommitMode() int32 {
	if m != nil {
		return m.CommitMode
	}
	return 0
}

func (m *CommitMetadata) GetCommitId() string {
	if m != nil {
		return m.CommitId
	}
	return ""
}

type ReleaseMetadata struct {
	CfgId     string `protobuf:"bytes,1,opt,name=cfg_id,json=cfgId" json:"cfg_id,omitempty"`
	ReleaseId string `protobuf:"bytes,2,opt,name=release_id,json=releaseId" json:"release_id,omitempty"`
	CommitId  string `protobuf:"bytes,3,opt,name=commit_id,json=commitId" json:"commit_id,omitempty"`
}

func (m *ReleaseMetadata) Reset()                    { *m = ReleaseMetadata{} }
func (m *ReleaseMetadata) String() string            { return proto.CompactTextString(m) }
func (*ReleaseMetadata) ProtoMessage()               {}
func (*ReleaseMetadata) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *ReleaseMetadata) GetCfgId() string {
	if m != nil {
		return m.CfgId
	}
	return ""
}

func (m *ReleaseMetadata) GetReleaseId() string {
	if m != nil {
		return m.ReleaseId
	}
	return ""
}

func (m *ReleaseMetadata) GetCommitId() string {
	if m != nil {
		return m.CommitId
	}
	return ""
}

type EffectInfo struct {
	CfgId     string `protobuf:"bytes,1,opt,name=cfg_id,json=cfgId" json:"cfg_id,omitempty"`
	ReleaseId string `protobuf:"bytes,2,opt,name=release_id,json=releaseId" json:"release_id,omitempty"`
}

func (m *EffectInfo) Reset()                    { *m = EffectInfo{} }
func (m *EffectInfo) String() string            { return proto.CompactTextString(m) }
func (*EffectInfo) ProtoMessage()               {}
func (*EffectInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *EffectInfo) GetCfgId() string {
	if m != nil {
		return m.CfgId
	}
	return ""
}

func (m *EffectInfo) GetReleaseId() string {
	if m != nil {
		return m.ReleaseId
	}
	return ""
}

type ReloadSpec struct {
	MultiReleaseId string        `protobuf:"bytes,1,opt,name=multi_release_id,json=multiReleaseId" json:"multi_release_id,omitempty"`
	Info           []*EffectInfo `protobuf:"bytes,2,rep,name=info" json:"info,omitempty"`
	Rollback       bool          `protobuf:"varint,3,opt,name=rollback" json:"rollback,omitempty"`
}

func (m *ReloadSpec) Reset()                    { *m = ReloadSpec{} }
func (m *ReloadSpec) String() string            { return proto.CompactTextString(m) }
func (*ReloadSpec) ProtoMessage()               {}
func (*ReloadSpec) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *ReloadSpec) GetMultiReleaseId() string {
	if m != nil {
		return m.MultiReleaseId
	}
	return ""
}

func (m *ReloadSpec) GetInfo() []*EffectInfo {
	if m != nil {
		return m.Info
	}
	return nil
}

func (m *ReloadSpec) GetRollback() bool {
	if m != nil {
		return m.Rollback
	}
	return false
}

type Publishing struct {
	BizId      string      `protobuf:"bytes,1,opt,name=biz_id,json=bizId" json:"biz_id,omitempty"`
	AppId      string      `protobuf:"bytes,2,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	CfgId      string      `protobuf:"bytes,3,opt,name=cfg_id,json=cfgId" json:"cfg_id,omitempty"`
	CfgName    string      `protobuf:"bytes,4,opt,name=cfg_name,json=cfgName" json:"cfg_name,omitempty"`
	CfgFpath   string      `protobuf:"bytes,5,opt,name=cfg_fpath,json=cfgFpath" json:"cfg_fpath,omitempty"`
	Serialno   uint64      `protobuf:"varint,6,opt,name=serialno" json:"serialno,omitempty"`
	ReleaseId  string      `protobuf:"bytes,7,opt,name=release_id,json=releaseId" json:"release_id,omitempty"`
	Strategies string      `protobuf:"bytes,8,opt,name=strategies" json:"strategies,omitempty"`
	ReloadSpec *ReloadSpec `protobuf:"bytes,9,opt,name=reload_spec,json=reloadSpec" json:"reload_spec,omitempty"`
	Nice       float64     `protobuf:"fixed64,10,opt,name=nice" json:"nice,omitempty"`
}

func (m *Publishing) Reset()                    { *m = Publishing{} }
func (m *Publishing) String() string            { return proto.CompactTextString(m) }
func (*Publishing) ProtoMessage()               {}
func (*Publishing) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *Publishing) GetBizId() string {
	if m != nil {
		return m.BizId
	}
	return ""
}

func (m *Publishing) GetAppId() string {
	if m != nil {
		return m.AppId
	}
	return ""
}

func (m *Publishing) GetCfgId() string {
	if m != nil {
		return m.CfgId
	}
	return ""
}

func (m *Publishing) GetCfgName() string {
	if m != nil {
		return m.CfgName
	}
	return ""
}

func (m *Publishing) GetCfgFpath() string {
	if m != nil {
		return m.CfgFpath
	}
	return ""
}

func (m *Publishing) GetSerialno() uint64 {
	if m != nil {
		return m.Serialno
	}
	return 0
}

func (m *Publishing) GetReleaseId() string {
	if m != nil {
		return m.ReleaseId
	}
	return ""
}

func (m *Publishing) GetStrategies() string {
	if m != nil {
		return m.Strategies
	}
	return ""
}

func (m *Publishing) GetReloadSpec() *ReloadSpec {
	if m != nil {
		return m.ReloadSpec
	}
	return nil
}

func (m *Publishing) GetNice() float64 {
	if m != nil {
		return m.Nice
	}
	return 0
}

type Signalling struct {
	Type       SignallingType `protobuf:"varint,1,opt,name=type,enum=common.SignallingType" json:"type,omitempty"`
	Publishing *Publishing    `protobuf:"bytes,2,opt,name=publishing" json:"publishing,omitempty"`
}

func (m *Signalling) Reset()                    { *m = Signalling{} }
func (m *Signalling) String() string            { return proto.CompactTextString(m) }
func (*Signalling) ProtoMessage()               {}
func (*Signalling) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *Signalling) GetType() SignallingType {
	if m != nil {
		return m.Type
	}
	return SignallingType_ST_SignallingTypePublish
}

func (m *Signalling) GetPublishing() *Publishing {
	if m != nil {
		return m.Publishing
	}
	return nil
}

type App struct {
	AppId        string `protobuf:"bytes,1,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	Name         string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	BizId        string `protobuf:"bytes,3,opt,name=biz_id,json=bizId" json:"biz_id,omitempty"`
	DeployType   int32  `protobuf:"varint,4,opt,name=deploy_type,json=deployType" json:"deploy_type,omitempty"`
	Creator      string `protobuf:"bytes,5,opt,name=creator" json:"creator,omitempty"`
	LastModifyBy string `protobuf:"bytes,6,opt,name=last_modify_by,json=lastModifyBy" json:"last_modify_by,omitempty"`
	Memo         string `protobuf:"bytes,7,opt,name=memo" json:"memo,omitempty"`
	State        int32  `protobuf:"varint,8,opt,name=state" json:"state,omitempty"`
	CreatedAt    string `protobuf:"bytes,9,opt,name=created_at,json=createdAt" json:"created_at,omitempty"`
	UpdatedAt    string `protobuf:"bytes,10,opt,name=updated_at,json=updatedAt" json:"updated_at,omitempty"`
}

func (m *App) Reset()                    { *m = App{} }
func (m *App) String() string            { return proto.CompactTextString(m) }
func (*App) ProtoMessage()               {}
func (*App) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *App) GetAppId() string {
	if m != nil {
		return m.AppId
	}
	return ""
}

func (m *App) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *App) GetBizId() string {
	if m != nil {
		return m.BizId
	}
	return ""
}

func (m *App) GetDeployType() int32 {
	if m != nil {
		return m.DeployType
	}
	return 0
}

func (m *App) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *App) GetLastModifyBy() string {
	if m != nil {
		return m.LastModifyBy
	}
	return ""
}

func (m *App) GetMemo() string {
	if m != nil {
		return m.Memo
	}
	return ""
}

func (m *App) GetState() int32 {
	if m != nil {
		return m.State
	}
	return 0
}

func (m *App) GetCreatedAt() string {
	if m != nil {
		return m.CreatedAt
	}
	return ""
}

func (m *App) GetUpdatedAt() string {
	if m != nil {
		return m.UpdatedAt
	}
	return ""
}

type TemplateBind struct {
	BizId        string `protobuf:"bytes,1,opt,name=biz_id,json=bizId" json:"biz_id,omitempty"`
	TemplateId   string `protobuf:"bytes,2,opt,name=template_id,json=templateId" json:"template_id,omitempty"`
	AppId        string `protobuf:"bytes,3,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	CfgId        string `protobuf:"bytes,4,opt,name=cfg_id,json=cfgId" json:"cfg_id,omitempty"`
	State        int32  `protobuf:"varint,5,opt,name=state" json:"state,omitempty"`
	Creator      string `protobuf:"bytes,6,opt,name=creator" json:"creator,omitempty"`
	LastModifyBy string `protobuf:"bytes,7,opt,name=last_modify_by,json=lastModifyBy" json:"last_modify_by,omitempty"`
	CreatedAt    string `protobuf:"bytes,8,opt,name=created_at,json=createdAt" json:"created_at,omitempty"`
	UpdatedAt    string `protobuf:"bytes,9,opt,name=updated_at,json=updatedAt" json:"updated_at,omitempty"`
}

func (m *TemplateBind) Reset()                    { *m = TemplateBind{} }
func (m *TemplateBind) String() string            { return proto.CompactTextString(m) }
func (*TemplateBind) ProtoMessage()               {}
func (*TemplateBind) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *TemplateBind) GetBizId() string {
	if m != nil {
		return m.BizId
	}
	return ""
}

func (m *TemplateBind) GetTemplateId() string {
	if m != nil {
		return m.TemplateId
	}
	return ""
}

func (m *TemplateBind) GetAppId() string {
	if m != nil {
		return m.AppId
	}
	return ""
}

func (m *TemplateBind) GetCfgId() string {
	if m != nil {
		return m.CfgId
	}
	return ""
}

func (m *TemplateBind) GetState() int32 {
	if m != nil {
		return m.State
	}
	return 0
}

func (m *TemplateBind) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *TemplateBind) GetLastModifyBy() string {
	if m != nil {
		return m.LastModifyBy
	}
	return ""
}

func (m *TemplateBind) GetCreatedAt() string {
	if m != nil {
		return m.CreatedAt
	}
	return ""
}

func (m *TemplateBind) GetUpdatedAt() string {
	if m != nil {
		return m.UpdatedAt
	}
	return ""
}

type ConfigTemplate struct {
	TemplateId    string `protobuf:"bytes,1,opt,name=template_id,json=templateId" json:"template_id,omitempty"`
	BizId         string `protobuf:"bytes,2,opt,name=biz_id,json=bizId" json:"biz_id,omitempty"`
	Name          string `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	CfgName       string `protobuf:"bytes,4,opt,name=cfg_name,json=cfgName" json:"cfg_name,omitempty"`
	CfgFpath      string `protobuf:"bytes,5,opt,name=cfg_fpath,json=cfgFpath" json:"cfg_fpath,omitempty"`
	CfgType       int32  `protobuf:"varint,6,opt,name=cfg_type,json=cfgType" json:"cfg_type,omitempty"`
	User          string `protobuf:"bytes,7,opt,name=user" json:"user,omitempty"`
	UserGroup     string `protobuf:"bytes,8,opt,name=user_group,json=userGroup" json:"user_group,omitempty"`
	FilePrivilege string `protobuf:"bytes,9,opt,name=file_privilege,json=filePrivilege" json:"file_privilege,omitempty"`
	FileFormat    string `protobuf:"bytes,10,opt,name=file_format,json=fileFormat" json:"file_format,omitempty"`
	FileMode      int32  `protobuf:"varint,11,opt,name=file_mode,json=fileMode" json:"file_mode,omitempty"`
	EngineType    int32  `protobuf:"varint,12,opt,name=engine_type,json=engineType" json:"engine_type,omitempty"`
	Memo          string `protobuf:"bytes,13,opt,name=memo" json:"memo,omitempty"`
	State         int32  `protobuf:"varint,14,opt,name=state" json:"state,omitempty"`
	Creator       string `protobuf:"bytes,15,opt,name=creator" json:"creator,omitempty"`
	LastModifyBy  string `protobuf:"bytes,16,opt,name=last_modify_by,json=lastModifyBy" json:"last_modify_by,omitempty"`
	CreatedAt     string `protobuf:"bytes,17,opt,name=created_at,json=createdAt" json:"created_at,omitempty"`
	UpdatedAt     string `protobuf:"bytes,18,opt,name=updated_at,json=updatedAt" json:"updated_at,omitempty"`
}

func (m *ConfigTemplate) Reset()                    { *m = ConfigTemplate{} }
func (m *ConfigTemplate) String() string            { return proto.CompactTextString(m) }
func (*ConfigTemplate) ProtoMessage()               {}
func (*ConfigTemplate) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *ConfigTemplate) GetTemplateId() string {
	if m != nil {
		return m.TemplateId
	}
	return ""
}

func (m *ConfigTemplate) GetBizId() string {
	if m != nil {
		return m.BizId
	}
	return ""
}

func (m *ConfigTemplate) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ConfigTemplate) GetCfgName() string {
	if m != nil {
		return m.CfgName
	}
	return ""
}

func (m *ConfigTemplate) GetCfgFpath() string {
	if m != nil {
		return m.CfgFpath
	}
	return ""
}

func (m *ConfigTemplate) GetCfgType() int32 {
	if m != nil {
		return m.CfgType
	}
	return 0
}

func (m *ConfigTemplate) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

func (m *ConfigTemplate) GetUserGroup() string {
	if m != nil {
		return m.UserGroup
	}
	return ""
}

func (m *ConfigTemplate) GetFilePrivilege() string {
	if m != nil {
		return m.FilePrivilege
	}
	return ""
}

func (m *ConfigTemplate) GetFileFormat() string {
	if m != nil {
		return m.FileFormat
	}
	return ""
}

func (m *ConfigTemplate) GetFileMode() int32 {
	if m != nil {
		return m.FileMode
	}
	return 0
}

func (m *ConfigTemplate) GetEngineType() int32 {
	if m != nil {
		return m.EngineType
	}
	return 0
}

func (m *ConfigTemplate) GetMemo() string {
	if m != nil {
		return m.Memo
	}
	return ""
}

func (m *ConfigTemplate) GetState() int32 {
	if m != nil {
		return m.State
	}
	return 0
}

func (m *ConfigTemplate) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *ConfigTemplate) GetLastModifyBy() string {
	if m != nil {
		return m.LastModifyBy
	}
	return ""
}

func (m *ConfigTemplate) GetCreatedAt() string {
	if m != nil {
		return m.CreatedAt
	}
	return ""
}

func (m *ConfigTemplate) GetUpdatedAt() string {
	if m != nil {
		return m.UpdatedAt
	}
	return ""
}

type ConfigTemplateVersion struct {
	VersionId    string `protobuf:"bytes,1,opt,name=version_id,json=versionId" json:"version_id,omitempty"`
	BizId        string `protobuf:"bytes,2,opt,name=biz_id,json=bizId" json:"biz_id,omitempty"`
	TemplateId   string `protobuf:"bytes,3,opt,name=template_id,json=templateId" json:"template_id,omitempty"`
	VersionTag   string `protobuf:"bytes,4,opt,name=version_tag,json=versionTag" json:"version_tag,omitempty"`
	ContentId    string `protobuf:"bytes,5,opt,name=content_id,json=contentId" json:"content_id,omitempty"`
	ContentSize  uint32 `protobuf:"varint,6,opt,name=content_size,json=contentSize" json:"content_size,omitempty"`
	Memo         string `protobuf:"bytes,7,opt,name=memo" json:"memo,omitempty"`
	State        int32  `protobuf:"varint,8,opt,name=state" json:"state,omitempty"`
	Creator      string `protobuf:"bytes,9,opt,name=creator" json:"creator,omitempty"`
	LastModifyBy string `protobuf:"bytes,10,opt,name=last_modify_by,json=lastModifyBy" json:"last_modify_by,omitempty"`
	CreatedAt    string `protobuf:"bytes,11,opt,name=created_at,json=createdAt" json:"created_at,omitempty"`
	UpdatedAt    string `protobuf:"bytes,12,opt,name=updated_at,json=updatedAt" json:"updated_at,omitempty"`
}

func (m *ConfigTemplateVersion) Reset()                    { *m = ConfigTemplateVersion{} }
func (m *ConfigTemplateVersion) String() string            { return proto.CompactTextString(m) }
func (*ConfigTemplateVersion) ProtoMessage()               {}
func (*ConfigTemplateVersion) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *ConfigTemplateVersion) GetVersionId() string {
	if m != nil {
		return m.VersionId
	}
	return ""
}

func (m *ConfigTemplateVersion) GetBizId() string {
	if m != nil {
		return m.BizId
	}
	return ""
}

func (m *ConfigTemplateVersion) GetTemplateId() string {
	if m != nil {
		return m.TemplateId
	}
	return ""
}

func (m *ConfigTemplateVersion) GetVersionTag() string {
	if m != nil {
		return m.VersionTag
	}
	return ""
}

func (m *ConfigTemplateVersion) GetContentId() string {
	if m != nil {
		return m.ContentId
	}
	return ""
}

func (m *ConfigTemplateVersion) GetContentSize() uint32 {
	if m != nil {
		return m.ContentSize
	}
	return 0
}

func (m *ConfigTemplateVersion) GetMemo() string {
	if m != nil {
		return m.Memo
	}
	return ""
}

func (m *ConfigTemplateVersion) GetState() int32 {
	if m != nil {
		return m.State
	}
	return 0
}

func (m *ConfigTemplateVersion) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *ConfigTemplateVersion) GetLastModifyBy() string {
	if m != nil {
		return m.LastModifyBy
	}
	return ""
}

func (m *ConfigTemplateVersion) GetCreatedAt() string {
	if m != nil {
		return m.CreatedAt
	}
	return ""
}

func (m *ConfigTemplateVersion) GetUpdatedAt() string {
	if m != nil {
		return m.UpdatedAt
	}
	return ""
}

type VariableGroup struct {
	VarGroupId   string `protobuf:"bytes,1,opt,name=var_group_id,json=varGroupId" json:"var_group_id,omitempty"`
	BizId        string `protobuf:"bytes,2,opt,name=biz_id,json=bizId" json:"biz_id,omitempty"`
	Name         string `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	Memo         string `protobuf:"bytes,4,opt,name=memo" json:"memo,omitempty"`
	State        int32  `protobuf:"varint,5,opt,name=state" json:"state,omitempty"`
	Creator      string `protobuf:"bytes,6,opt,name=creator" json:"creator,omitempty"`
	LastModifyBy string `protobuf:"bytes,7,opt,name=last_modify_by,json=lastModifyBy" json:"last_modify_by,omitempty"`
	CreatedAt    string `protobuf:"bytes,8,opt,name=created_at,json=createdAt" json:"created_at,omitempty"`
	UpdatedAt    string `protobuf:"bytes,9,opt,name=updated_at,json=updatedAt" json:"updated_at,omitempty"`
}

func (m *VariableGroup) Reset()                    { *m = VariableGroup{} }
func (m *VariableGroup) String() string            { return proto.CompactTextString(m) }
func (*VariableGroup) ProtoMessage()               {}
func (*VariableGroup) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *VariableGroup) GetVarGroupId() string {
	if m != nil {
		return m.VarGroupId
	}
	return ""
}

func (m *VariableGroup) GetBizId() string {
	if m != nil {
		return m.BizId
	}
	return ""
}

func (m *VariableGroup) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *VariableGroup) GetMemo() string {
	if m != nil {
		return m.Memo
	}
	return ""
}

func (m *VariableGroup) GetState() int32 {
	if m != nil {
		return m.State
	}
	return 0
}

func (m *VariableGroup) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *VariableGroup) GetLastModifyBy() string {
	if m != nil {
		return m.LastModifyBy
	}
	return ""
}

func (m *VariableGroup) GetCreatedAt() string {
	if m != nil {
		return m.CreatedAt
	}
	return ""
}

func (m *VariableGroup) GetUpdatedAt() string {
	if m != nil {
		return m.UpdatedAt
	}
	return ""
}

type Variable struct {
	VarId        string `protobuf:"bytes,1,opt,name=var_id,json=varId" json:"var_id,omitempty"`
	BizId        string `protobuf:"bytes,2,opt,name=biz_id,json=bizId" json:"biz_id,omitempty"`
	VarGroupId   string `protobuf:"bytes,3,opt,name=var_group_id,json=varGroupId" json:"var_group_id,omitempty"`
	Name         string `protobuf:"bytes,4,opt,name=name" json:"name,omitempty"`
	Value        string `protobuf:"bytes,5,opt,name=value" json:"value,omitempty"`
	Memo         string `protobuf:"bytes,6,opt,name=memo" json:"memo,omitempty"`
	State        int32  `protobuf:"varint,7,opt,name=state" json:"state,omitempty"`
	Creator      string `protobuf:"bytes,8,opt,name=creator" json:"creator,omitempty"`
	LastModifyBy string `protobuf:"bytes,9,opt,name=last_modify_by,json=lastModifyBy" json:"last_modify_by,omitempty"`
	CreatedAt    string `protobuf:"bytes,10,opt,name=created_at,json=createdAt" json:"created_at,omitempty"`
	UpdatedAt    string `protobuf:"bytes,11,opt,name=updated_at,json=updatedAt" json:"updated_at,omitempty"`
}

func (m *Variable) Reset()                    { *m = Variable{} }
func (m *Variable) String() string            { return proto.CompactTextString(m) }
func (*Variable) ProtoMessage()               {}
func (*Variable) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *Variable) GetVarId() string {
	if m != nil {
		return m.VarId
	}
	return ""
}

func (m *Variable) GetBizId() string {
	if m != nil {
		return m.BizId
	}
	return ""
}

func (m *Variable) GetVarGroupId() string {
	if m != nil {
		return m.VarGroupId
	}
	return ""
}

func (m *Variable) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Variable) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *Variable) GetMemo() string {
	if m != nil {
		return m.Memo
	}
	return ""
}

func (m *Variable) GetState() int32 {
	if m != nil {
		return m.State
	}
	return 0
}

func (m *Variable) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *Variable) GetLastModifyBy() string {
	if m != nil {
		return m.LastModifyBy
	}
	return ""
}

func (m *Variable) GetCreatedAt() string {
	if m != nil {
		return m.CreatedAt
	}
	return ""
}

func (m *Variable) GetUpdatedAt() string {
	if m != nil {
		return m.UpdatedAt
	}
	return ""
}

type Config struct {
	CfgId         string `protobuf:"bytes,1,opt,name=cfg_id,json=cfgId" json:"cfg_id,omitempty"`
	Name          string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Fpath         string `protobuf:"bytes,3,opt,name=fpath" json:"fpath,omitempty"`
	BizId         string `protobuf:"bytes,4,opt,name=biz_id,json=bizId" json:"biz_id,omitempty"`
	AppId         string `protobuf:"bytes,5,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	User          string `protobuf:"bytes,6,opt,name=user" json:"user,omitempty"`
	UserGroup     string `protobuf:"bytes,7,opt,name=user_group,json=userGroup" json:"user_group,omitempty"`
	FilePrivilege string `protobuf:"bytes,8,opt,name=file_privilege,json=filePrivilege" json:"file_privilege,omitempty"`
	FileFormat    string `protobuf:"bytes,9,opt,name=file_format,json=fileFormat" json:"file_format,omitempty"`
	FileMode      int32  `protobuf:"varint,10,opt,name=file_mode,json=fileMode" json:"file_mode,omitempty"`
	Creator       string `protobuf:"bytes,11,opt,name=creator" json:"creator,omitempty"`
	LastModifyBy  string `protobuf:"bytes,12,opt,name=last_modify_by,json=lastModifyBy" json:"last_modify_by,omitempty"`
	Memo          string `protobuf:"bytes,13,opt,name=memo" json:"memo,omitempty"`
	State         int32  `protobuf:"varint,14,opt,name=state" json:"state,omitempty"`
	CreatedAt     string `protobuf:"bytes,15,opt,name=created_at,json=createdAt" json:"created_at,omitempty"`
	UpdatedAt     string `protobuf:"bytes,16,opt,name=updated_at,json=updatedAt" json:"updated_at,omitempty"`
	Type          int32  `protobuf:"varint,17,opt,name=type" json:"type,omitempty"`
}

func (m *Config) Reset()                    { *m = Config{} }
func (m *Config) String() string            { return proto.CompactTextString(m) }
func (*Config) ProtoMessage()               {}
func (*Config) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *Config) GetCfgId() string {
	if m != nil {
		return m.CfgId
	}
	return ""
}

func (m *Config) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Config) GetFpath() string {
	if m != nil {
		return m.Fpath
	}
	return ""
}

func (m *Config) GetBizId() string {
	if m != nil {
		return m.BizId
	}
	return ""
}

func (m *Config) GetAppId() string {
	if m != nil {
		return m.AppId
	}
	return ""
}

func (m *Config) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

func (m *Config) GetUserGroup() string {
	if m != nil {
		return m.UserGroup
	}
	return ""
}

func (m *Config) GetFilePrivilege() string {
	if m != nil {
		return m.FilePrivilege
	}
	return ""
}

func (m *Config) GetFileFormat() string {
	if m != nil {
		return m.FileFormat
	}
	return ""
}

func (m *Config) GetFileMode() int32 {
	if m != nil {
		return m.FileMode
	}
	return 0
}

func (m *Config) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *Config) GetLastModifyBy() string {
	if m != nil {
		return m.LastModifyBy
	}
	return ""
}

func (m *Config) GetMemo() string {
	if m != nil {
		return m.Memo
	}
	return ""
}

func (m *Config) GetState() int32 {
	if m != nil {
		return m.State
	}
	return 0
}

func (m *Config) GetCreatedAt() string {
	if m != nil {
		return m.CreatedAt
	}
	return ""
}

func (m *Config) GetUpdatedAt() string {
	if m != nil {
		return m.UpdatedAt
	}
	return ""
}

func (m *Config) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

type Content struct {
	CfgId        string `protobuf:"bytes,1,opt,name=cfg_id,json=cfgId" json:"cfg_id,omitempty"`
	BizId        string `protobuf:"bytes,2,opt,name=biz_id,json=bizId" json:"biz_id,omitempty"`
	AppId        string `protobuf:"bytes,3,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	CommitId     string `protobuf:"bytes,4,opt,name=commit_id,json=commitId" json:"commit_id,omitempty"`
	Index        string `protobuf:"bytes,5,opt,name=index" json:"index,omitempty"`
	ContentId    string `protobuf:"bytes,6,opt,name=content_id,json=contentId" json:"content_id,omitempty"`
	ContentSize  uint32 `protobuf:"varint,7,opt,name=content_size,json=contentSize" json:"content_size,omitempty"`
	Creator      string `protobuf:"bytes,8,opt,name=creator" json:"creator,omitempty"`
	LastModifyBy string `protobuf:"bytes,9,opt,name=last_modify_by,json=lastModifyBy" json:"last_modify_by,omitempty"`
	Memo         string `protobuf:"bytes,10,opt,name=memo" json:"memo,omitempty"`
	State        int32  `protobuf:"varint,11,opt,name=state" json:"state,omitempty"`
	CreatedAt    string `protobuf:"bytes,12,opt,name=created_at,json=createdAt" json:"created_at,omitempty"`
	UpdatedAt    string `protobuf:"bytes,13,opt,name=updated_at,json=updatedAt" json:"updated_at,omitempty"`
}

func (m *Content) Reset()                    { *m = Content{} }
func (m *Content) String() string            { return proto.CompactTextString(m) }
func (*Content) ProtoMessage()               {}
func (*Content) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *Content) GetCfgId() string {
	if m != nil {
		return m.CfgId
	}
	return ""
}

func (m *Content) GetBizId() string {
	if m != nil {
		return m.BizId
	}
	return ""
}

func (m *Content) GetAppId() string {
	if m != nil {
		return m.AppId
	}
	return ""
}

func (m *Content) GetCommitId() string {
	if m != nil {
		return m.CommitId
	}
	return ""
}

func (m *Content) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

func (m *Content) GetContentId() string {
	if m != nil {
		return m.ContentId
	}
	return ""
}

func (m *Content) GetContentSize() uint32 {
	if m != nil {
		return m.ContentSize
	}
	return 0
}

func (m *Content) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *Content) GetLastModifyBy() string {
	if m != nil {
		return m.LastModifyBy
	}
	return ""
}

func (m *Content) GetMemo() string {
	if m != nil {
		return m.Memo
	}
	return ""
}

func (m *Content) GetState() int32 {
	if m != nil {
		return m.State
	}
	return 0
}

func (m *Content) GetCreatedAt() string {
	if m != nil {
		return m.CreatedAt
	}
	return ""
}

func (m *Content) GetUpdatedAt() string {
	if m != nil {
		return m.UpdatedAt
	}
	return ""
}

type Commit struct {
	CommitId      string `protobuf:"bytes,1,opt,name=commit_id,json=commitId" json:"commit_id,omitempty"`
	BizId         string `protobuf:"bytes,2,opt,name=biz_id,json=bizId" json:"biz_id,omitempty"`
	AppId         string `protobuf:"bytes,3,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	CfgId         string `protobuf:"bytes,4,opt,name=cfg_id,json=cfgId" json:"cfg_id,omitempty"`
	CommitMode    int32  `protobuf:"varint,5,opt,name=commit_mode,json=commitMode" json:"commit_mode,omitempty"`
	Operator      string `protobuf:"bytes,6,opt,name=operator" json:"operator,omitempty"`
	ReleaseId     string `protobuf:"bytes,7,opt,name=release_id,json=releaseId" json:"release_id,omitempty"`
	MultiCommitId string `protobuf:"bytes,8,opt,name=multi_commit_id,json=multiCommitId" json:"multi_commit_id,omitempty"`
	Memo          string `protobuf:"bytes,9,opt,name=memo" json:"memo,omitempty"`
	State         int32  `protobuf:"varint,10,opt,name=state" json:"state,omitempty"`
	CreatedAt     string `protobuf:"bytes,11,opt,name=created_at,json=createdAt" json:"created_at,omitempty"`
	UpdatedAt     string `protobuf:"bytes,12,opt,name=updated_at,json=updatedAt" json:"updated_at,omitempty"`
}

func (m *Commit) Reset()                    { *m = Commit{} }
func (m *Commit) String() string            { return proto.CompactTextString(m) }
func (*Commit) ProtoMessage()               {}
func (*Commit) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *Commit) GetCommitId() string {
	if m != nil {
		return m.CommitId
	}
	return ""
}

func (m *Commit) GetBizId() string {
	if m != nil {
		return m.BizId
	}
	return ""
}

func (m *Commit) GetAppId() string {
	if m != nil {
		return m.AppId
	}
	return ""
}

func (m *Commit) GetCfgId() string {
	if m != nil {
		return m.CfgId
	}
	return ""
}

func (m *Commit) GetCommitMode() int32 {
	if m != nil {
		return m.CommitMode
	}
	return 0
}

func (m *Commit) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

func (m *Commit) GetReleaseId() string {
	if m != nil {
		return m.ReleaseId
	}
	return ""
}

func (m *Commit) GetMultiCommitId() string {
	if m != nil {
		return m.MultiCommitId
	}
	return ""
}

func (m *Commit) GetMemo() string {
	if m != nil {
		return m.Memo
	}
	return ""
}

func (m *Commit) GetState() int32 {
	if m != nil {
		return m.State
	}
	return 0
}

func (m *Commit) GetCreatedAt() string {
	if m != nil {
		return m.CreatedAt
	}
	return ""
}

func (m *Commit) GetUpdatedAt() string {
	if m != nil {
		return m.UpdatedAt
	}
	return ""
}

type MultiCommit struct {
	MultiCommitId  string `protobuf:"bytes,1,opt,name=multi_commit_id,json=multiCommitId" json:"multi_commit_id,omitempty"`
	BizId          string `protobuf:"bytes,2,opt,name=biz_id,json=bizId" json:"biz_id,omitempty"`
	AppId          string `protobuf:"bytes,3,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	Operator       string `protobuf:"bytes,4,opt,name=operator" json:"operator,omitempty"`
	MultiReleaseId string `protobuf:"bytes,5,opt,name=multi_release_id,json=multiReleaseId" json:"multi_release_id,omitempty"`
	Memo           string `protobuf:"bytes,6,opt,name=memo" json:"memo,omitempty"`
	State          int32  `protobuf:"varint,7,opt,name=state" json:"state,omitempty"`
	CreatedAt      string `protobuf:"bytes,8,opt,name=created_at,json=createdAt" json:"created_at,omitempty"`
	UpdatedAt      string `protobuf:"bytes,9,opt,name=updated_at,json=updatedAt" json:"updated_at,omitempty"`
}

func (m *MultiCommit) Reset()                    { *m = MultiCommit{} }
func (m *MultiCommit) String() string            { return proto.CompactTextString(m) }
func (*MultiCommit) ProtoMessage()               {}
func (*MultiCommit) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func (m *MultiCommit) GetMultiCommitId() string {
	if m != nil {
		return m.MultiCommitId
	}
	return ""
}

func (m *MultiCommit) GetBizId() string {
	if m != nil {
		return m.BizId
	}
	return ""
}

func (m *MultiCommit) GetAppId() string {
	if m != nil {
		return m.AppId
	}
	return ""
}

func (m *MultiCommit) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

func (m *MultiCommit) GetMultiReleaseId() string {
	if m != nil {
		return m.MultiReleaseId
	}
	return ""
}

func (m *MultiCommit) GetMemo() string {
	if m != nil {
		return m.Memo
	}
	return ""
}

func (m *MultiCommit) GetState() int32 {
	if m != nil {
		return m.State
	}
	return 0
}

func (m *MultiCommit) GetCreatedAt() string {
	if m != nil {
		return m.CreatedAt
	}
	return ""
}

func (m *MultiCommit) GetUpdatedAt() string {
	if m != nil {
		return m.UpdatedAt
	}
	return ""
}

type Release struct {
	Id             uint64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	ReleaseId      string `protobuf:"bytes,2,opt,name=release_id,json=releaseId" json:"release_id,omitempty"`
	Name           string `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	BizId          string `protobuf:"bytes,4,opt,name=biz_id,json=bizId" json:"biz_id,omitempty"`
	AppId          string `protobuf:"bytes,5,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	CfgId          string `protobuf:"bytes,6,opt,name=cfg_id,json=cfgId" json:"cfg_id,omitempty"`
	CfgName        string `protobuf:"bytes,7,opt,name=cfg_name,json=cfgName" json:"cfg_name,omitempty"`
	CfgFpath       string `protobuf:"bytes,8,opt,name=cfg_fpath,json=cfgFpath" json:"cfg_fpath,omitempty"`
	User           string `protobuf:"bytes,9,opt,name=user" json:"user,omitempty"`
	UserGroup      string `protobuf:"bytes,10,opt,name=user_group,json=userGroup" json:"user_group,omitempty"`
	FilePrivilege  string `protobuf:"bytes,11,opt,name=file_privilege,json=filePrivilege" json:"file_privilege,omitempty"`
	FileFormat     string `protobuf:"bytes,12,opt,name=file_format,json=fileFormat" json:"file_format,omitempty"`
	FileMode       int32  `protobuf:"varint,13,opt,name=file_mode,json=fileMode" json:"file_mode,omitempty"`
	StrategyId     string `protobuf:"bytes,14,opt,name=strategy_id,json=strategyId" json:"strategy_id,omitempty"`
	Strategies     string `protobuf:"bytes,15,opt,name=strategies" json:"strategies,omitempty"`
	Creator        string `protobuf:"bytes,16,opt,name=creator" json:"creator,omitempty"`
	CommitId       string `protobuf:"bytes,17,opt,name=commit_id,json=commitId" json:"commit_id,omitempty"`
	MultiReleaseId string `protobuf:"bytes,18,opt,name=multi_release_id,json=multiReleaseId" json:"multi_release_id,omitempty"`
	LastModifyBy   string `protobuf:"bytes,19,opt,name=last_modify_by,json=lastModifyBy" json:"last_modify_by,omitempty"`
	Memo           string `protobuf:"bytes,20,opt,name=memo" json:"memo,omitempty"`
	State          int32  `protobuf:"varint,21,opt,name=state" json:"state,omitempty"`
	CreatedAt      string `protobuf:"bytes,22,opt,name=created_at,json=createdAt" json:"created_at,omitempty"`
	UpdatedAt      string `protobuf:"bytes,23,opt,name=updated_at,json=updatedAt" json:"updated_at,omitempty"`
	CfgType        int32  `protobuf:"varint,24,opt,name=cfg_type,json=cfgType" json:"cfg_type,omitempty"`
}

func (m *Release) Reset()                    { *m = Release{} }
func (m *Release) String() string            { return proto.CompactTextString(m) }
func (*Release) ProtoMessage()               {}
func (*Release) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

func (m *Release) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Release) GetReleaseId() string {
	if m != nil {
		return m.ReleaseId
	}
	return ""
}

func (m *Release) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Release) GetBizId() string {
	if m != nil {
		return m.BizId
	}
	return ""
}

func (m *Release) GetAppId() string {
	if m != nil {
		return m.AppId
	}
	return ""
}

func (m *Release) GetCfgId() string {
	if m != nil {
		return m.CfgId
	}
	return ""
}

func (m *Release) GetCfgName() string {
	if m != nil {
		return m.CfgName
	}
	return ""
}

func (m *Release) GetCfgFpath() string {
	if m != nil {
		return m.CfgFpath
	}
	return ""
}

func (m *Release) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

func (m *Release) GetUserGroup() string {
	if m != nil {
		return m.UserGroup
	}
	return ""
}

func (m *Release) GetFilePrivilege() string {
	if m != nil {
		return m.FilePrivilege
	}
	return ""
}

func (m *Release) GetFileFormat() string {
	if m != nil {
		return m.FileFormat
	}
	return ""
}

func (m *Release) GetFileMode() int32 {
	if m != nil {
		return m.FileMode
	}
	return 0
}

func (m *Release) GetStrategyId() string {
	if m != nil {
		return m.StrategyId
	}
	return ""
}

func (m *Release) GetStrategies() string {
	if m != nil {
		return m.Strategies
	}
	return ""
}

func (m *Release) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *Release) GetCommitId() string {
	if m != nil {
		return m.CommitId
	}
	return ""
}

func (m *Release) GetMultiReleaseId() string {
	if m != nil {
		return m.MultiReleaseId
	}
	return ""
}

func (m *Release) GetLastModifyBy() string {
	if m != nil {
		return m.LastModifyBy
	}
	return ""
}

func (m *Release) GetMemo() string {
	if m != nil {
		return m.Memo
	}
	return ""
}

func (m *Release) GetState() int32 {
	if m != nil {
		return m.State
	}
	return 0
}

func (m *Release) GetCreatedAt() string {
	if m != nil {
		return m.CreatedAt
	}
	return ""
}

func (m *Release) GetUpdatedAt() string {
	if m != nil {
		return m.UpdatedAt
	}
	return ""
}

func (m *Release) GetCfgType() int32 {
	if m != nil {
		return m.CfgType
	}
	return 0
}

type MultiRelease struct {
	Id             uint64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	MultiReleaseId string `protobuf:"bytes,2,opt,name=multi_release_id,json=multiReleaseId" json:"multi_release_id,omitempty"`
	Name           string `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	BizId          string `protobuf:"bytes,4,opt,name=biz_id,json=bizId" json:"biz_id,omitempty"`
	AppId          string `protobuf:"bytes,5,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	StrategyId     string `protobuf:"bytes,6,opt,name=strategy_id,json=strategyId" json:"strategy_id,omitempty"`
	Strategies     string `protobuf:"bytes,7,opt,name=strategies" json:"strategies,omitempty"`
	Creator        string `protobuf:"bytes,8,opt,name=creator" json:"creator,omitempty"`
	MultiCommitId  string `protobuf:"bytes,9,opt,name=multi_commit_id,json=multiCommitId" json:"multi_commit_id,omitempty"`
	LastModifyBy   string `protobuf:"bytes,10,opt,name=last_modify_by,json=lastModifyBy" json:"last_modify_by,omitempty"`
	Memo           string `protobuf:"bytes,11,opt,name=memo" json:"memo,omitempty"`
	State          int32  `protobuf:"varint,12,opt,name=state" json:"state,omitempty"`
	CreatedAt      string `protobuf:"bytes,13,opt,name=created_at,json=createdAt" json:"created_at,omitempty"`
	UpdatedAt      string `protobuf:"bytes,14,opt,name=updated_at,json=updatedAt" json:"updated_at,omitempty"`
}

func (m *MultiRelease) Reset()                    { *m = MultiRelease{} }
func (m *MultiRelease) String() string            { return proto.CompactTextString(m) }
func (*MultiRelease) ProtoMessage()               {}
func (*MultiRelease) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24} }

func (m *MultiRelease) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *MultiRelease) GetMultiReleaseId() string {
	if m != nil {
		return m.MultiReleaseId
	}
	return ""
}

func (m *MultiRelease) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MultiRelease) GetBizId() string {
	if m != nil {
		return m.BizId
	}
	return ""
}

func (m *MultiRelease) GetAppId() string {
	if m != nil {
		return m.AppId
	}
	return ""
}

func (m *MultiRelease) GetStrategyId() string {
	if m != nil {
		return m.StrategyId
	}
	return ""
}

func (m *MultiRelease) GetStrategies() string {
	if m != nil {
		return m.Strategies
	}
	return ""
}

func (m *MultiRelease) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MultiRelease) GetMultiCommitId() string {
	if m != nil {
		return m.MultiCommitId
	}
	return ""
}

func (m *MultiRelease) GetLastModifyBy() string {
	if m != nil {
		return m.LastModifyBy
	}
	return ""
}

func (m *MultiRelease) GetMemo() string {
	if m != nil {
		return m.Memo
	}
	return ""
}

func (m *MultiRelease) GetState() int32 {
	if m != nil {
		return m.State
	}
	return 0
}

func (m *MultiRelease) GetCreatedAt() string {
	if m != nil {
		return m.CreatedAt
	}
	return ""
}

func (m *MultiRelease) GetUpdatedAt() string {
	if m != nil {
		return m.UpdatedAt
	}
	return ""
}

type AppInstance struct {
	Id        uint64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	BizId     string `protobuf:"bytes,2,opt,name=biz_id,json=bizId" json:"biz_id,omitempty"`
	AppId     string `protobuf:"bytes,3,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	CloudId   string `protobuf:"bytes,4,opt,name=cloud_id,json=cloudId" json:"cloud_id,omitempty"`
	Ip        string `protobuf:"bytes,5,opt,name=ip" json:"ip,omitempty"`
	Path      string `protobuf:"bytes,6,opt,name=path" json:"path,omitempty"`
	Labels    string `protobuf:"bytes,7,opt,name=labels" json:"labels,omitempty"`
	State     int32  `protobuf:"varint,8,opt,name=state" json:"state,omitempty"`
	CreatedAt string `protobuf:"bytes,9,opt,name=created_at,json=createdAt" json:"created_at,omitempty"`
	UpdatedAt string `protobuf:"bytes,10,opt,name=updated_at,json=updatedAt" json:"updated_at,omitempty"`
}

func (m *AppInstance) Reset()                    { *m = AppInstance{} }
func (m *AppInstance) String() string            { return proto.CompactTextString(m) }
func (*AppInstance) ProtoMessage()               {}
func (*AppInstance) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{25} }

func (m *AppInstance) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *AppInstance) GetBizId() string {
	if m != nil {
		return m.BizId
	}
	return ""
}

func (m *AppInstance) GetAppId() string {
	if m != nil {
		return m.AppId
	}
	return ""
}

func (m *AppInstance) GetCloudId() string {
	if m != nil {
		return m.CloudId
	}
	return ""
}

func (m *AppInstance) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *AppInstance) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *AppInstance) GetLabels() string {
	if m != nil {
		return m.Labels
	}
	return ""
}

func (m *AppInstance) GetState() int32 {
	if m != nil {
		return m.State
	}
	return 0
}

func (m *AppInstance) GetCreatedAt() string {
	if m != nil {
		return m.CreatedAt
	}
	return ""
}

func (m *AppInstance) GetUpdatedAt() string {
	if m != nil {
		return m.UpdatedAt
	}
	return ""
}

type AppInstanceRelease struct {
	InstanceId uint64 `protobuf:"varint,1,opt,name=instance_id,json=instanceId" json:"instance_id,omitempty"`
	BizId      string `protobuf:"bytes,2,opt,name=biz_id,json=bizId" json:"biz_id,omitempty"`
	AppId      string `protobuf:"bytes,3,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	CloudId    string `protobuf:"bytes,4,opt,name=cloud_id,json=cloudId" json:"cloud_id,omitempty"`
	Ip         string `protobuf:"bytes,5,opt,name=ip" json:"ip,omitempty"`
	Path       string `protobuf:"bytes,6,opt,name=path" json:"path,omitempty"`
	Labels     string `protobuf:"bytes,7,opt,name=labels" json:"labels,omitempty"`
	CfgId      string `protobuf:"bytes,8,opt,name=cfg_id,json=cfgId" json:"cfg_id,omitempty"`
	ReleaseId  string `protobuf:"bytes,9,opt,name=release_id,json=releaseId" json:"release_id,omitempty"`
	EffectTime string `protobuf:"bytes,10,opt,name=effect_time,json=effectTime" json:"effect_time,omitempty"`
	EffectCode int32  `protobuf:"varint,11,opt,name=effect_code,json=effectCode" json:"effect_code,omitempty"`
	EffectMsg  string `protobuf:"bytes,12,opt,name=effect_msg,json=effectMsg" json:"effect_msg,omitempty"`
	ReloadTime string `protobuf:"bytes,13,opt,name=reload_time,json=reloadTime" json:"reload_time,omitempty"`
	ReloadCode int32  `protobuf:"varint,14,opt,name=reload_code,json=reloadCode" json:"reload_code,omitempty"`
	ReloadMsg  string `protobuf:"bytes,15,opt,name=reload_msg,json=reloadMsg" json:"reload_msg,omitempty"`
	CreatedAt  string `protobuf:"bytes,16,opt,name=created_at,json=createdAt" json:"created_at,omitempty"`
	UpdatedAt  string `protobuf:"bytes,17,opt,name=updated_at,json=updatedAt" json:"updated_at,omitempty"`
}

func (m *AppInstanceRelease) Reset()                    { *m = AppInstanceRelease{} }
func (m *AppInstanceRelease) String() string            { return proto.CompactTextString(m) }
func (*AppInstanceRelease) ProtoMessage()               {}
func (*AppInstanceRelease) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{26} }

func (m *AppInstanceRelease) GetInstanceId() uint64 {
	if m != nil {
		return m.InstanceId
	}
	return 0
}

func (m *AppInstanceRelease) GetBizId() string {
	if m != nil {
		return m.BizId
	}
	return ""
}

func (m *AppInstanceRelease) GetAppId() string {
	if m != nil {
		return m.AppId
	}
	return ""
}

func (m *AppInstanceRelease) GetCloudId() string {
	if m != nil {
		return m.CloudId
	}
	return ""
}

func (m *AppInstanceRelease) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *AppInstanceRelease) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *AppInstanceRelease) GetLabels() string {
	if m != nil {
		return m.Labels
	}
	return ""
}

func (m *AppInstanceRelease) GetCfgId() string {
	if m != nil {
		return m.CfgId
	}
	return ""
}

func (m *AppInstanceRelease) GetReleaseId() string {
	if m != nil {
		return m.ReleaseId
	}
	return ""
}

func (m *AppInstanceRelease) GetEffectTime() string {
	if m != nil {
		return m.EffectTime
	}
	return ""
}

func (m *AppInstanceRelease) GetEffectCode() int32 {
	if m != nil {
		return m.EffectCode
	}
	return 0
}

func (m *AppInstanceRelease) GetEffectMsg() string {
	if m != nil {
		return m.EffectMsg
	}
	return ""
}

func (m *AppInstanceRelease) GetReloadTime() string {
	if m != nil {
		return m.ReloadTime
	}
	return ""
}

func (m *AppInstanceRelease) GetReloadCode() int32 {
	if m != nil {
		return m.ReloadCode
	}
	return 0
}

func (m *AppInstanceRelease) GetReloadMsg() string {
	if m != nil {
		return m.ReloadMsg
	}
	return ""
}

func (m *AppInstanceRelease) GetCreatedAt() string {
	if m != nil {
		return m.CreatedAt
	}
	return ""
}

func (m *AppInstanceRelease) GetUpdatedAt() string {
	if m != nil {
		return m.UpdatedAt
	}
	return ""
}

type ReportInfo struct {
	CfgId          string `protobuf:"bytes,1,opt,name=cfg_id,json=cfgId" json:"cfg_id,omitempty"`
	ReleaseId      string `protobuf:"bytes,2,opt,name=release_id,json=releaseId" json:"release_id,omitempty"`
	MultiReleaseId string `protobuf:"bytes,3,opt,name=multi_release_id,json=multiReleaseId" json:"multi_release_id,omitempty"`
	EffectTime     string `protobuf:"bytes,4,opt,name=effect_time,json=effectTime" json:"effect_time,omitempty"`
	EffectCode     int32  `protobuf:"varint,5,opt,name=effect_code,json=effectCode" json:"effect_code,omitempty"`
	EffectMsg      string `protobuf:"bytes,6,opt,name=effect_msg,json=effectMsg" json:"effect_msg,omitempty"`
	ReloadTime     string `protobuf:"bytes,7,opt,name=reload_time,json=reloadTime" json:"reload_time,omitempty"`
	ReloadCode     int32  `protobuf:"varint,8,opt,name=reload_code,json=reloadCode" json:"reload_code,omitempty"`
	ReloadMsg      string `protobuf:"bytes,9,opt,name=reload_msg,json=reloadMsg" json:"reload_msg,omitempty"`
}

func (m *ReportInfo) Reset()                    { *m = ReportInfo{} }
func (m *ReportInfo) String() string            { return proto.CompactTextString(m) }
func (*ReportInfo) ProtoMessage()               {}
func (*ReportInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{27} }

func (m *ReportInfo) GetCfgId() string {
	if m != nil {
		return m.CfgId
	}
	return ""
}

func (m *ReportInfo) GetReleaseId() string {
	if m != nil {
		return m.ReleaseId
	}
	return ""
}

func (m *ReportInfo) GetMultiReleaseId() string {
	if m != nil {
		return m.MultiReleaseId
	}
	return ""
}

func (m *ReportInfo) GetEffectTime() string {
	if m != nil {
		return m.EffectTime
	}
	return ""
}

func (m *ReportInfo) GetEffectCode() int32 {
	if m != nil {
		return m.EffectCode
	}
	return 0
}

func (m *ReportInfo) GetEffectMsg() string {
	if m != nil {
		return m.EffectMsg
	}
	return ""
}

func (m *ReportInfo) GetReloadTime() string {
	if m != nil {
		return m.ReloadTime
	}
	return ""
}

func (m *ReportInfo) GetReloadCode() int32 {
	if m != nil {
		return m.ReloadCode
	}
	return 0
}

func (m *ReportInfo) GetReloadMsg() string {
	if m != nil {
		return m.ReloadMsg
	}
	return ""
}

type Strategy struct {
	StrategyId   string `protobuf:"bytes,1,opt,name=strategy_id,json=strategyId" json:"strategy_id,omitempty"`
	BizId        string `protobuf:"bytes,2,opt,name=biz_id,json=bizId" json:"biz_id,omitempty"`
	AppId        string `protobuf:"bytes,3,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	Name         string `protobuf:"bytes,4,opt,name=name" json:"name,omitempty"`
	Content      string `protobuf:"bytes,5,opt,name=content" json:"content,omitempty"`
	Creator      string `protobuf:"bytes,6,opt,name=creator" json:"creator,omitempty"`
	Memo         string `protobuf:"bytes,7,opt,name=memo" json:"memo,omitempty"`
	State        int32  `protobuf:"varint,8,opt,name=state" json:"state,omitempty"`
	LastModifyBy string `protobuf:"bytes,9,opt,name=last_modify_by,json=lastModifyBy" json:"last_modify_by,omitempty"`
	CreatedAt    string `protobuf:"bytes,10,opt,name=created_at,json=createdAt" json:"created_at,omitempty"`
	UpdatedAt    string `protobuf:"bytes,11,opt,name=updated_at,json=updatedAt" json:"updated_at,omitempty"`
}

func (m *Strategy) Reset()                    { *m = Strategy{} }
func (m *Strategy) String() string            { return proto.CompactTextString(m) }
func (*Strategy) ProtoMessage()               {}
func (*Strategy) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{28} }

func (m *Strategy) GetStrategyId() string {
	if m != nil {
		return m.StrategyId
	}
	return ""
}

func (m *Strategy) GetBizId() string {
	if m != nil {
		return m.BizId
	}
	return ""
}

func (m *Strategy) GetAppId() string {
	if m != nil {
		return m.AppId
	}
	return ""
}

func (m *Strategy) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Strategy) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *Strategy) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *Strategy) GetMemo() string {
	if m != nil {
		return m.Memo
	}
	return ""
}

func (m *Strategy) GetState() int32 {
	if m != nil {
		return m.State
	}
	return 0
}

func (m *Strategy) GetLastModifyBy() string {
	if m != nil {
		return m.LastModifyBy
	}
	return ""
}

func (m *Strategy) GetCreatedAt() string {
	if m != nil {
		return m.CreatedAt
	}
	return ""
}

func (m *Strategy) GetUpdatedAt() string {
	if m != nil {
		return m.UpdatedAt
	}
	return ""
}

type ProcAttr struct {
	CloudId      string `protobuf:"bytes,1,opt,name=cloud_id,json=cloudId" json:"cloud_id,omitempty"`
	Ip           string `protobuf:"bytes,2,opt,name=ip" json:"ip,omitempty"`
	BizId        string `protobuf:"bytes,3,opt,name=biz_id,json=bizId" json:"biz_id,omitempty"`
	AppId        string `protobuf:"bytes,4,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	Path         string `protobuf:"bytes,5,opt,name=path" json:"path,omitempty"`
	Labels       string `protobuf:"bytes,6,opt,name=labels" json:"labels,omitempty"`
	Creator      string `protobuf:"bytes,7,opt,name=creator" json:"creator,omitempty"`
	LastModifyBy string `protobuf:"bytes,8,opt,name=last_modify_by,json=lastModifyBy" json:"last_modify_by,omitempty"`
	Memo         string `protobuf:"bytes,9,opt,name=memo" json:"memo,omitempty"`
	State        int32  `protobuf:"varint,10,opt,name=state" json:"state,omitempty"`
	CreatedAt    string `protobuf:"bytes,11,opt,name=created_at,json=createdAt" json:"created_at,omitempty"`
	UpdatedAt    string `protobuf:"bytes,12,opt,name=updated_at,json=updatedAt" json:"updated_at,omitempty"`
}

func (m *ProcAttr) Reset()                    { *m = ProcAttr{} }
func (m *ProcAttr) String() string            { return proto.CompactTextString(m) }
func (*ProcAttr) ProtoMessage()               {}
func (*ProcAttr) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{29} }

func (m *ProcAttr) GetCloudId() string {
	if m != nil {
		return m.CloudId
	}
	return ""
}

func (m *ProcAttr) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *ProcAttr) GetBizId() string {
	if m != nil {
		return m.BizId
	}
	return ""
}

func (m *ProcAttr) GetAppId() string {
	if m != nil {
		return m.AppId
	}
	return ""
}

func (m *ProcAttr) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *ProcAttr) GetLabels() string {
	if m != nil {
		return m.Labels
	}
	return ""
}

func (m *ProcAttr) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *ProcAttr) GetLastModifyBy() string {
	if m != nil {
		return m.LastModifyBy
	}
	return ""
}

func (m *ProcAttr) GetMemo() string {
	if m != nil {
		return m.Memo
	}
	return ""
}

func (m *ProcAttr) GetState() int32 {
	if m != nil {
		return m.State
	}
	return 0
}

func (m *ProcAttr) GetCreatedAt() string {
	if m != nil {
		return m.CreatedAt
	}
	return ""
}

func (m *ProcAttr) GetUpdatedAt() string {
	if m != nil {
		return m.UpdatedAt
	}
	return ""
}

type ShardingDB struct {
	DbId      string `protobuf:"bytes,1,opt,name=db_id,json=dbId" json:"db_id,omitempty"`
	Host      string `protobuf:"bytes,2,opt,name=host" json:"host,omitempty"`
	Port      int32  `protobuf:"varint,3,opt,name=port" json:"port,omitempty"`
	User      string `protobuf:"bytes,4,opt,name=user" json:"user,omitempty"`
	Password  string `protobuf:"bytes,5,opt,name=password" json:"password,omitempty"`
	Memo      string `protobuf:"bytes,6,opt,name=memo" json:"memo,omitempty"`
	State     int32  `protobuf:"varint,7,opt,name=state" json:"state,omitempty"`
	CreatedAt string `protobuf:"bytes,8,opt,name=created_at,json=createdAt" json:"created_at,omitempty"`
	UpdatedAt string `protobuf:"bytes,9,opt,name=updated_at,json=updatedAt" json:"updated_at,omitempty"`
}

func (m *ShardingDB) Reset()                    { *m = ShardingDB{} }
func (m *ShardingDB) String() string            { return proto.CompactTextString(m) }
func (*ShardingDB) ProtoMessage()               {}
func (*ShardingDB) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{30} }

func (m *ShardingDB) GetDbId() string {
	if m != nil {
		return m.DbId
	}
	return ""
}

func (m *ShardingDB) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *ShardingDB) GetPort() int32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *ShardingDB) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

func (m *ShardingDB) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *ShardingDB) GetMemo() string {
	if m != nil {
		return m.Memo
	}
	return ""
}

func (m *ShardingDB) GetState() int32 {
	if m != nil {
		return m.State
	}
	return 0
}

func (m *ShardingDB) GetCreatedAt() string {
	if m != nil {
		return m.CreatedAt
	}
	return ""
}

func (m *ShardingDB) GetUpdatedAt() string {
	if m != nil {
		return m.UpdatedAt
	}
	return ""
}

type Sharding struct {
	Key       string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	DbId      string `protobuf:"bytes,2,opt,name=db_id,json=dbId" json:"db_id,omitempty"`
	DbName    string `protobuf:"bytes,3,opt,name=db_name,json=dbName" json:"db_name,omitempty"`
	Memo      string `protobuf:"bytes,4,opt,name=memo" json:"memo,omitempty"`
	State     int32  `protobuf:"varint,5,opt,name=state" json:"state,omitempty"`
	CreatedAt string `protobuf:"bytes,6,opt,name=created_at,json=createdAt" json:"created_at,omitempty"`
	UpdatedAt string `protobuf:"bytes,7,opt,name=updated_at,json=updatedAt" json:"updated_at,omitempty"`
}

func (m *Sharding) Reset()                    { *m = Sharding{} }
func (m *Sharding) String() string            { return proto.CompactTextString(m) }
func (*Sharding) ProtoMessage()               {}
func (*Sharding) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{31} }

func (m *Sharding) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *Sharding) GetDbId() string {
	if m != nil {
		return m.DbId
	}
	return ""
}

func (m *Sharding) GetDbName() string {
	if m != nil {
		return m.DbName
	}
	return ""
}

func (m *Sharding) GetMemo() string {
	if m != nil {
		return m.Memo
	}
	return ""
}

func (m *Sharding) GetState() int32 {
	if m != nil {
		return m.State
	}
	return 0
}

func (m *Sharding) GetCreatedAt() string {
	if m != nil {
		return m.CreatedAt
	}
	return ""
}

func (m *Sharding) GetUpdatedAt() string {
	if m != nil {
		return m.UpdatedAt
	}
	return ""
}

type Audit struct {
	Id         uint64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	SourceType int32  `protobuf:"varint,2,opt,name=source_type,json=sourceType" json:"source_type,omitempty"`
	OpType     int32  `protobuf:"varint,3,opt,name=op_type,json=opType" json:"op_type,omitempty"`
	BizId      string `protobuf:"bytes,4,opt,name=biz_id,json=bizId" json:"biz_id,omitempty"`
	SourceId   string `protobuf:"bytes,5,opt,name=source_id,json=sourceId" json:"source_id,omitempty"`
	Operator   string `protobuf:"bytes,6,opt,name=operator" json:"operator,omitempty"`
	Memo       string `protobuf:"bytes,7,opt,name=memo" json:"memo,omitempty"`
	State      int32  `protobuf:"varint,8,opt,name=state" json:"state,omitempty"`
	CreatedAt  string `protobuf:"bytes,9,opt,name=created_at,json=createdAt" json:"created_at,omitempty"`
	UpdatedAt  string `protobuf:"bytes,10,opt,name=updated_at,json=updatedAt" json:"updated_at,omitempty"`
}

func (m *Audit) Reset()                    { *m = Audit{} }
func (m *Audit) String() string            { return proto.CompactTextString(m) }
func (*Audit) ProtoMessage()               {}
func (*Audit) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{32} }

func (m *Audit) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Audit) GetSourceType() int32 {
	if m != nil {
		return m.SourceType
	}
	return 0
}

func (m *Audit) GetOpType() int32 {
	if m != nil {
		return m.OpType
	}
	return 0
}

func (m *Audit) GetBizId() string {
	if m != nil {
		return m.BizId
	}
	return ""
}

func (m *Audit) GetSourceId() string {
	if m != nil {
		return m.SourceId
	}
	return ""
}

func (m *Audit) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

func (m *Audit) GetMemo() string {
	if m != nil {
		return m.Memo
	}
	return ""
}

func (m *Audit) GetState() int32 {
	if m != nil {
		return m.State
	}
	return 0
}

func (m *Audit) GetCreatedAt() string {
	if m != nil {
		return m.CreatedAt
	}
	return ""
}

func (m *Audit) GetUpdatedAt() string {
	if m != nil {
		return m.UpdatedAt
	}
	return ""
}

func init() {
	proto.RegisterType((*Endpoint)(nil), "common.Endpoint")
	proto.RegisterType((*ComponentHealthzInfo)(nil), "common.ComponentHealthzInfo")
	proto.RegisterType((*ModuleHealthzInfo)(nil), "common.ModuleHealthzInfo")
	proto.RegisterType((*Page)(nil), "common.Page")
	proto.RegisterType((*LabelsMap)(nil), "common.LabelsMap")
	proto.RegisterType((*CommitContent)(nil), "common.CommitContent")
	proto.RegisterType((*CommitMetadataWithContent)(nil), "common.CommitMetadataWithContent")
	proto.RegisterType((*CommitMetadata)(nil), "common.CommitMetadata")
	proto.RegisterType((*ReleaseMetadata)(nil), "common.ReleaseMetadata")
	proto.RegisterType((*EffectInfo)(nil), "common.EffectInfo")
	proto.RegisterType((*ReloadSpec)(nil), "common.ReloadSpec")
	proto.RegisterType((*Publishing)(nil), "common.Publishing")
	proto.RegisterType((*Signalling)(nil), "common.Signalling")
	proto.RegisterType((*App)(nil), "common.App")
	proto.RegisterType((*TemplateBind)(nil), "common.TemplateBind")
	proto.RegisterType((*ConfigTemplate)(nil), "common.ConfigTemplate")
	proto.RegisterType((*ConfigTemplateVersion)(nil), "common.ConfigTemplateVersion")
	proto.RegisterType((*VariableGroup)(nil), "common.VariableGroup")
	proto.RegisterType((*Variable)(nil), "common.Variable")
	proto.RegisterType((*Config)(nil), "common.Config")
	proto.RegisterType((*Content)(nil), "common.Content")
	proto.RegisterType((*Commit)(nil), "common.Commit")
	proto.RegisterType((*MultiCommit)(nil), "common.MultiCommit")
	proto.RegisterType((*Release)(nil), "common.Release")
	proto.RegisterType((*MultiRelease)(nil), "common.MultiRelease")
	proto.RegisterType((*AppInstance)(nil), "common.AppInstance")
	proto.RegisterType((*AppInstanceRelease)(nil), "common.AppInstanceRelease")
	proto.RegisterType((*ReportInfo)(nil), "common.ReportInfo")
	proto.RegisterType((*Strategy)(nil), "common.Strategy")
	proto.RegisterType((*ProcAttr)(nil), "common.ProcAttr")
	proto.RegisterType((*ShardingDB)(nil), "common.ShardingDB")
	proto.RegisterType((*Sharding)(nil), "common.Sharding")
	proto.RegisterType((*Audit)(nil), "common.Audit")
	proto.RegisterEnum("common.ErrCode", ErrCode_name, ErrCode_value)
	proto.RegisterEnum("common.ConfigType", ConfigType_name, ConfigType_value)
	proto.RegisterEnum("common.TemplateEngineType", TemplateEngineType_name, TemplateEngineType_value)
	proto.RegisterEnum("common.ConfigFileMode", ConfigFileMode_name, ConfigFileMode_value)
	proto.RegisterEnum("common.CommonState", CommonState_name, CommonState_value)
	proto.RegisterEnum("common.ConfigState", ConfigState_name, ConfigState_value)
	proto.RegisterEnum("common.CommitState", CommitState_name, CommitState_value)
	proto.RegisterEnum("common.CommitMode", CommitMode_name, CommitMode_value)
	proto.RegisterEnum("common.ReleaseState", ReleaseState_name, ReleaseState_value)
	proto.RegisterEnum("common.AppInstanceState", AppInstanceState_name, AppInstanceState_value)
	proto.RegisterEnum("common.DeployType", DeployType_name, DeployType_value)
	proto.RegisterEnum("common.SourceType", SourceType_name, SourceType_value)
	proto.RegisterEnum("common.SourceOpType", SourceOpType_name, SourceOpType_value)
	proto.RegisterEnum("common.SignallingType", SignallingType_name, SignallingType_value)
}

func init() { proto.RegisterFile("common.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 6267 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x5c, 0x7b, 0x74, 0x13, 0xd7,
	0x99, 0x47, 0xb6, 0xac, 0xc7, 0x95, 0x6c, 0x0f, 0x13, 0x1e, 0x86, 0x84, 0x44, 0x28, 0x2f, 0x32,
	0x60, 0x1e, 0x13, 0x20, 0x89, 0x4e, 0xbb, 0xf5, 0x58, 0x1a, 0xdb, 0x2a, 0x7a, 0x38, 0x23, 0x99,
	0x84, 0x3d, 0xa7, 0x3b, 0x95, 0x2d, 0x61, 0x74, 0x2a, 0x4b, 0x5a, 0x49, 0x4e, 0x20, 0x67, 0xcf,
	0x59, 0xd3, 0x10, 0x70, 0x78, 0xc4, 0x64, 0x20, 0x21, 0x3c, 0x12, 0x20, 0x81, 0x84, 0xb4, 0x01,
	0x87, 0x26, 0x21, 0xc6, 0x36, 0x90, 0xee, 0xee, 0x1f, 0xfd, 0x63, 0x1f, 0xd9, 0xee, 0xa3, 0x8f,
	0xb3, 0xff, 0x55, 0x23, 0xd9, 0xbb, 0xdb, 0x4d, 0xdb, 0xd3, 0xfe, 0xd1, 0xd3, 0x3f, 0xba, 0xe7,
	0x3e, 0x66, 0x34, 0x23, 0x09, 0x2a, 0x8c, 0x95, 0x34, 0xbb, 0xe5, 0x70, 0x8e, 0x35, 0x73, 0xbf,
	0xfb, 0xdd, 0xef, 0x7e, 0xdf, 0xef, 0x7e, 0xf7, 0xfb, 0xee, 0x63, 0x80, 0x7d, 0x20, 0x35, 0x34,
	0x94, 0x4a, 0xae, 0x4d, 0x67, 0x52, 0xb9, 0x14, 0x6d, 0xc2, 0x4f, 0xcb, 0xd7, 0xa0, 0xc7, 0x81,
	0xf6, 0xc1, 0x58, 0xb2, 0x3d, 0xfb, 0x6c, 0x64, 0x70, 0x30, 0x96, 0x59, 0x97, 0x4a, 0xe7, 0xe2,
	0xa9, 0x64, 0x76, 0x5d, 0x24, 0x99, 0x4c, 0xe5, 0x22, 0xe8, 0x37, 0xae, 0xe5, 0x5c, 0x0b, 0x2c,
	0x7c, 0x32, 0x9a, 0x4e, 0xc5, 0x93, 0x39, 0xba, 0x05, 0x34, 0xc4, 0xd3, 0x6d, 0x06, 0x87, 0x61,
	0x95, 0x55, 0x68, 0x88, 0xa7, 0x69, 0x1a, 0x18, 0xd3, 0xa9, 0x4c, 0xae, 0xad, 0xc1, 0x61, 0x58,
	0xd5, 0x24, 0xa0, 0xdf, 0xce, 0x9f, 0x1a, 0xc0, 0x22, 0x77, 0x6a, 0x28, 0x9d, 0x4a, 0xc6, 0x92,
	0xb9, 0x9e, 0x58, 0x24, 0x91, 0xdb, 0xf1, 0x9c, 0x37, 0xb9, 0x3d, 0x45, 0xaf, 0x01, 0xd6, 0x01,
	0xe5, 0x3d, 0xe6, 0xd1, 0xd9, 0x22, 0x71, 0x36, 0xc6, 0x5a, 0x9c, 0xda, 0x93, 0x9f, 0xba, 0x22,
	0x1f, 0x3e, 0x24, 0x94, 0x08, 0xe8, 0xf5, 0x00, 0xc4, 0xb3, 0xe2, 0x0e, 0x54, 0x7f, 0x17, 0x6a,
	0xc0, 0xd2, 0xb9, 0x50, 0xe2, 0x5a, 0x18, 0xbb, 0xbc, 0xfb, 0xbc, 0x3c, 0xf9, 0x71, 0x71, 0xff,
	0x95, 0xc2, 0xc8, 0x6e, 0xc1, 0x1a, 0xcf, 0xe2, 0x36, 0x76, 0xd1, 0xab, 0x81, 0x79, 0x28, 0x96,
	0xcd, 0x46, 0x06, 0x63, 0x6d, 0x8d, 0x88, 0xbb, 0x96, 0x3c, 0x7f, 0xe3, 0x6c, 0x61, 0xf7, 0xb8,
	0xa0, 0x50, 0xb8, 0x36, 0x49, 0x1c, 0x0b, 0xd6, 0x33, 0x55, 0x25, 0x65, 0xdb, 0x88, 0x44, 0xa8,
	0x66, 0xe1, 0xad, 0x91, 0xc2, 0xe9, 0xf3, 0xb8, 0xbe, 0xf3, 0x7a, 0x23, 0x58, 0xe8, 0x4f, 0x45,
	0x87, 0x13, 0x31, 0x6d, 0xcf, 0x1e, 0x02, 0xa6, 0x21, 0xf4, 0x52, 0xd7, 0xad, 0xc2, 0x85, 0xb3,
	0xf2, 0xeb, 0xc7, 0x60, 0xb7, 0x48, 0x29, 0x94, 0xf0, 0x99, 0x58, 0x26, 0x1b, 0x4f, 0x25, 0x51,
	0x87, 0x14, 0x09, 0x31, 0x61, 0xf1, 0xc5, 0xd1, 0xc2, 0xa9, 0xf7, 0x04, 0x85, 0x82, 0xde, 0x0c,
	0x40, 0xff, 0x70, 0x3c, 0x11, 0x15, 0x73, 0xf1, 0x21, 0xa5, 0x47, 0x4b, 0x25, 0x6e, 0x11, 0x43,
	0x13, 0xfa, 0xe9, 0x57, 0x67, 0xc6, 0x5f, 0x2e, 0x1c, 0xbb, 0x32, 0x7b, 0xec, 0x43, 0xc1, 0x8a,
	0x48, 0xc3, 0xf1, 0xa1, 0x18, 0xfd, 0x38, 0xb0, 0x0c, 0xc6, 0x73, 0xe2, 0x8e, 0x48, 0x76, 0x47,
	0x9b, 0x11, 0xd5, 0x5a, 0x21, 0x71, 0xcb, 0x99, 0x36, 0x5c, 0x2b, 0x3f, 0xf5, 0x56, 0xf1, 0xcc,
	0xee, 0xfc, 0xd4, 0x11, 0x79, 0xf2, 0x48, 0xf1, 0xe2, 0x75, 0x28, 0x9d, 0x79, 0x30, 0x9e, 0xeb,
	0x89, 0x64, 0x77, 0x94, 0xa9, 0xbc, 0xe9, 0xf6, 0x54, 0x6e, 0xfa, 0x43, 0x2a, 0xa7, 0x83, 0x00,
	0xa8, 0xe6, 0xcd, 0xb6, 0x99, 0x1d, 0x8d, 0xab, 0x6c, 0xec, 0x3d, 0x6b, 0x09, 0x42, 0xab, 0xd9,
	0x81, 0x70, 0xc3, 0xc6, 0x20, 0xdc, 0x34, 0x2c, 0x5c, 0xac, 0xc4, 0xad, 0x03, 0xed, 0x4c, 0xa5,
	0x41, 0x58, 0xd2, 0xd9, 0x6a, 0x06, 0x34, 0x00, 0x63, 0x2f, 0x94, 0xa6, 0x03, 0xd8, 0x33, 0xb1,
	0xdc, 0x70, 0x26, 0x29, 0xe6, 0x52, 0xb9, 0x48, 0x02, 0x59, 0xce, 0xa2, 0xa8, 0xea, 0xb5, 0x71,
	0xf9, 0xf0, 0xdb, 0x33, 0x37, 0x8e, 0xca, 0x27, 0xdf, 0x28, 0xbc, 0xf2, 0x7e, 0xe1, 0xd0, 0xa5,
	0xc2, 0xc8, 0xd4, 0xec, 0xbe, 0x31, 0xc1, 0x86, 0xab, 0x84, 0x61, 0x0d, 0xba, 0x1d, 0x34, 0x65,
	0x73, 0x11, 0x05, 0xfd, 0xc4, 0x36, 0xf2, 0xe8, 0xde, 0xd9, 0xb3, 0x1f, 0xcd, 0x7c, 0xf4, 0xb1,
	0xfc, 0xce, 0x81, 0xc2, 0xc4, 0x44, 0xe1, 0xcc, 0x3e, 0x01, 0x53, 0xd1, 0x0c, 0x68, 0x4a, 0xc4,
	0x87, 0xe2, 0x39, 0x64, 0xca, 0xa6, 0xce, 0x45, 0x12, 0xb7, 0x90, 0x69, 0xc5, 0xe4, 0xb8, 0x0d,
	0xd8, 0x00, 0x26, 0x71, 0x2d, 0x93, 0xb8, 0x25, 0x60, 0x11, 0x83, 0x24, 0x65, 0xed, 0x84, 0xe7,
	0xa5, 0xeb, 0xc5, 0x6b, 0x97, 0x9c, 0x7f, 0x6f, 0x00, 0x56, 0x5f, 0xa4, 0x3f, 0x96, 0xc8, 0xfa,
	0x23, 0x69, 0xfa, 0x2f, 0x80, 0x29, 0x81, 0x1e, 0xda, 0x0c, 0x48, 0x9f, 0x2b, 0x14, 0x7d, 0xaa,
	0x24, 0xe4, 0x17, 0x9f, 0xcc, 0x65, 0x76, 0x75, 0x3e, 0x2c, 0x71, 0x0f, 0x30, 0xf6, 0xc2, 0x99,
	0x7d, 0xc5, 0x8b, 0xd7, 0x67, 0x4f, 0xee, 0x95, 0x0f, 0x8f, 0xb2, 0x8b, 0xe4, 0x73, 0x87, 0xe4,
	0xc3, 0xa3, 0xc1, 0xde, 0xbf, 0xda, 0xca, 0xf9, 0xfa, 0xf8, 0xc2, 0x99, 0x69, 0x79, 0x7a, 0x4c,
	0x20, 0x5c, 0x97, 0x3f, 0x01, 0x6c, 0x9a, 0xfa, 0x34, 0x05, 0x1a, 0xbf, 0x15, 0xdb, 0x45, 0x1c,
	0x00, 0xfc, 0x49, 0x2f, 0x02, 0x4d, 0xcf, 0x44, 0x12, 0xc3, 0x31, 0x0c, 0x68, 0x01, 0x3f, 0xb8,
	0x1a, 0x1e, 0x37, 0xb8, 0x1e, 0x90, 0xb8, 0x95, 0xe0, 0x3e, 0xa6, 0x24, 0x2c, 0x4b, 0xe3, 0x86,
	0x8b, 0x17, 0x5f, 0x2d, 0xbe, 0x72, 0x1e, 0x37, 0xef, 0xfc, 0x6d, 0x03, 0x68, 0x76, 0xa7, 0x86,
	0x86, 0xe2, 0x39, 0x77, 0x2a, 0x99, 0x83, 0x03, 0x7f, 0x23, 0x84, 0x09, 0xfa, 0x29, 0xc6, 0xa3,
	0x64, 0x40, 0x2d, 0x96, 0x38, 0x9a, 0x69, 0x91, 0xf7, 0xbe, 0x20, 0x5f, 0xba, 0x8a, 0x51, 0xeb,
	0xf5, 0xec, 0xec, 0x80, 0xee, 0x02, 0x11, 0x7a, 0xa3, 0xf4, 0x46, 0xe8, 0xeb, 0x70, 0xad, 0x6c,
	0xfc, 0x39, 0x2c, 0x4e, 0xb3, 0x02, 0x47, 0x54, 0x4f, 0x3e, 0xf7, 0x8e, 0xfc, 0xfe, 0x98, 0x60,
	0x23, 0x64, 0xa1, 0xf8, 0x73, 0x31, 0xfa, 0x29, 0x60, 0xc5, 0x1d, 0x15, 0x53, 0x99, 0xb6, 0x46,
	0xa4, 0xc1, 0x85, 0x15, 0x1a, 0x24, 0x5a, 0x23, 0xad, 0x7f, 0xf8, 0xa6, 0x3c, 0xfd, 0xca, 0x4d,
	0xb4, 0x66, 0xc1, 0xcc, 0x82, 0x19, 0x7a, 0x1b, 0x00, 0x84, 0x71, 0x24, 0x19, 0x6d, 0x33, 0xde,
	0x31, 0x67, 0x22, 0x26, 0x97, 0x8c, 0xba, 0x7a, 0x24, 0x8e, 0x07, 0x6e, 0x46, 0xaf, 0x35, 0x96,
	0x9d, 0x7d, 0xe1, 0x50, 0xf1, 0xda, 0x25, 0xd2, 0xd5, 0x17, 0x9e, 0xc7, 0x90, 0x5a, 0x35, 0x7b,
	0x7c, 0x8f, 0x3c, 0xf1, 0x36, 0x7e, 0x5b, 0x18, 0x3b, 0x9c, 0x9f, 0x3c, 0x57, 0x38, 0x76, 0x25,
	0x7f, 0xed, 0x46, 0xf1, 0xe8, 0x85, 0x47, 0x9c, 0xbf, 0x6b, 0x00, 0xcb, 0x30, 0x17, 0x7f, 0x2c,
	0x17, 0x89, 0x46, 0x72, 0x91, 0xa7, 0xe2, 0xb9, 0x1d, 0x8a, 0x1d, 0xd6, 0x00, 0xd3, 0xc0, 0xf6,
	0xc1, 0x72, 0x1b, 0x14, 0x4f, 0x5e, 0x2a, 0x9c, 0xd9, 0x87, 0x1b, 0x43, 0x36, 0x68, 0x1a, 0xd8,
	0x3e, 0xe8, 0x8d, 0xd2, 0x27, 0x0c, 0xc0, 0x42, 0x34, 0x9b, 0x6d, 0x6b, 0x40, 0xfd, 0x5d, 0xac,
	0x19, 0xdb, 0x25, 0x49, 0x3b, 0x07, 0x25, 0x2e, 0xca, 0xd8, 0xb5, 0xe2, 0xb2, 0x61, 0x2c, 0x5a,
	0xf1, 0xc4, 0x1e, 0xed, 0xeb, 0xcf, 0xa6, 0x0f, 0x16, 0x8e, 0x8e, 0x17, 0x0e, 0xee, 0x2e, 0x5c,
	0x38, 0x5b, 0x78, 0xfd, 0x46, 0x61, 0xe2, 0x7b, 0x85, 0xd3, 0x47, 0xf2, 0x13, 0x07, 0xf2, 0x13,
	0x23, 0xf9, 0x89, 0xef, 0x60, 0xca, 0xc2, 0xab, 0xfb, 0xa0, 0xa3, 0x3e, 0x77, 0x22, 0x3f, 0x75,
	0x8d, 0xa8, 0xf1, 0xc4, 0x1e, 0xf9, 0xd4, 0x64, 0xe1, 0xf8, 0xb8, 0xa0, 0xca, 0x43, 0xfb, 0xd0,
	0xcc, 0x33, 0x14, 0x47, 0x88, 0xc2, 0x9e, 0x74, 0x9d, 0xc4, 0xad, 0x61, 0x5a, 0x08, 0x13, 0xd4,
	0xba, 0xd7, 0xc3, 0xb6, 0x15, 0x4e, 0x9f, 0x9f, 0x19, 0x7f, 0xb3, 0x70, 0xec, 0x0a, 0x1e, 0xfb,
	0x90, 0xd7, 0xc5, 0x63, 0x85, 0x4b, 0x1f, 0xed, 0xec, 0x80, 0xdc, 0x20, 0x07, 0x6f, 0xd4, 0xc5,
	0x4b, 0x5c, 0x27, 0xe8, 0x60, 0x6e, 0xae, 0x3a, 0xf6, 0x7e, 0x2d, 0xdf, 0xea, 0xc6, 0x78, 0xc4,
	0x79, 0xbe, 0x01, 0xb4, 0xe8, 0x59, 0xdc, 0xa6, 0xca, 0xe3, 0xc0, 0x46, 0x7a, 0x35, 0x94, 0x8a,
	0xc6, 0x88, 0x17, 0x82, 0xe8, 0x60, 0xec, 0x44, 0x9f, 0x97, 0xa7, 0xe4, 0x37, 0x0e, 0xb0, 0x9b,
	0xb4, 0x4f, 0x6b, 0x1c, 0xb3, 0x53, 0xaf, 0xcd, 0x5c, 0x3a, 0xb7, 0xde, 0xe5, 0x98, 0x7d, 0xfd,
	0x0d, 0xa2, 0x59, 0x54, 0xee, 0xd8, 0xe0, 0xd2, 0x3e, 0x22, 0x4f, 0x0b, 0x85, 0x4b, 0x45, 0x63,
	0xf3, 0xac, 0xc0, 0x35, 0x12, 0xf7, 0x08, 0x78, 0x98, 0x29, 0xeb, 0x3d, 0xbb, 0xb8, 0xaa, 0xd6,
	0x9c, 0x3f, 0x36, 0x80, 0x56, 0x21, 0x96, 0x88, 0x45, 0xb2, 0xb1, 0x39, 0x2a, 0x6a, 0x23, 0x00,
	0x19, 0xcc, 0x00, 0xd6, 0x68, 0xd0, 0x7a, 0x94, 0xb1, 0x97, 0xe5, 0x89, 0xe7, 0xf1, 0xcc, 0x8b,
	0x3d, 0x0a, 0x21, 0xf4, 0x46, 0x69, 0xb6, 0xb2, 0xcf, 0xb8, 0x92, 0xbe, 0xcf, 0xba, 0x9e, 0xb5,
	0x4b, 0x1c, 0x03, 0x56, 0x31, 0xe5, 0xf2, 0x2a, 0x5d, 0xc3, 0x0d, 0x95, 0xba, 0xf6, 0xb2, 0x01,
	0x00, 0x7e, 0xfb, 0xf6, 0xd8, 0x40, 0x4e, 0x09, 0x23, 0x74, 0xbd, 0x6a, 0x95, 0x38, 0x3b, 0x63,
	0x99, 0xa7, 0xfe, 0xb8, 0x1e, 0x94, 0x38, 0x27, 0x70, 0x30, 0x9a, 0x06, 0x59, 0xba, 0x78, 0xf4,
	0x74, 0xe1, 0x95, 0xd1, 0xc2, 0xd8, 0xd8, 0xcc, 0x8d, 0xf7, 0xc9, 0x04, 0x79, 0xa0, 0x01, 0x00,
	0x21, 0x96, 0x48, 0x45, 0xa2, 0xa1, 0x74, 0x6c, 0x80, 0xee, 0x01, 0xd4, 0xd0, 0x70, 0x22, 0x17,
	0x17, 0x35, 0x2d, 0x62, 0xe9, 0xee, 0x95, 0xb8, 0xbb, 0x99, 0xa5, 0xc5, 0xa9, 0x3d, 0x70, 0xae,
	0x9d, 0x1e, 0xab, 0x68, 0xba, 0x05, 0xd5, 0x13, 0x54, 0x7d, 0x7e, 0x0d, 0x18, 0xe3, 0xc9, 0xed,
	0x29, 0xe2, 0x1c, 0x68, 0xc5, 0x39, 0x94, 0xc4, 0x21, 0x33, 0x68, 0xa5, 0x4c, 0x02, 0xaa, 0x48,
	0x6f, 0x01, 0x96, 0x4c, 0x2a, 0x91, 0xe8, 0x8f, 0x0c, 0x7c, 0x0b, 0xd9, 0xc3, 0x82, 0x31, 0xc8,
	0xe0, 0xd9, 0x3a, 0x3f, 0x31, 0x59, 0x38, 0xb8, 0x4f, 0xbe, 0x74, 0x02, 0x8b, 0x00, 0x91, 0x77,
	0xf2, 0x8d, 0xc2, 0xd4, 0x89, 0x0c, 0xea, 0x4b, 0xe1, 0xc8, 0xa1, 0xfc, 0xb5, 0x53, 0x82, 0xca,
	0x40, 0xd5, 0x46, 0xa9, 0xab, 0x2c, 0x8d, 0x7f, 0x17, 0x5e, 0x7c, 0x67, 0xe6, 0xec, 0x41, 0xdc,
	0xbe, 0x73, 0xdc, 0x08, 0x40, 0xef, 0x70, 0x7f, 0x22, 0x9e, 0xdd, 0x11, 0x4f, 0x0e, 0x42, 0x0b,
	0xf5, 0xc7, 0x9f, 0x2b, 0xb7, 0x50, 0x7e, 0xe2, 0x84, 0xbc, 0xff, 0x2c, 0xb6, 0x50, 0x7f, 0xfc,
	0x39, 0x6f, 0x14, 0xd2, 0x45, 0xd2, 0xe9, 0x92, 0x75, 0x30, 0x9d, 0x3c, 0x79, 0xb4, 0x78, 0xf4,
	0x02, 0xa6, 0x8b, 0xa4, 0xd3, 0xde, 0xa8, 0x06, 0xc7, 0x5a, 0x80, 0xc9, 0x2f, 0x9d, 0x96, 0x2f,
	0x1e, 0xae, 0xb4, 0xfb, 0x5a, 0x60, 0x81, 0xd4, 0xc9, 0xc8, 0x50, 0x8c, 0x44, 0x76, 0x77, 0x49,
	0x1c, 0xa5, 0xfa, 0xd2, 0xc3, 0x87, 0x8a, 0xef, 0xbc, 0xbf, 0xb3, 0x43, 0x30, 0x0f, 0x6c, 0x1f,
	0x0c, 0x44, 0x86, 0x62, 0xf4, 0x46, 0x60, 0x85, 0xf4, 0xdb, 0xd3, 0x91, 0xdc, 0x0e, 0x14, 0xce,
	0x91, 0x00, 0xb2, 0x95, 0x54, 0xb8, 0x78, 0x78, 0xe6, 0xe3, 0x71, 0xf9, 0xfa, 0x9e, 0x9d, 0x23,
	0x16, 0x01, 0x72, 0xee, 0x82, 0x84, 0xf4, 0xa3, 0xc0, 0x92, 0x8d, 0x65, 0xe2, 0x91, 0x44, 0x32,
	0x85, 0x82, 0x3a, 0x23, 0xa9, 0x44, 0xc0, 0x3b, 0x39, 0x26, 0x8f, 0x1e, 0x93, 0xc7, 0x3e, 0x46,
	0x95, 0x14, 0x42, 0x7a, 0xad, 0x0e, 0x92, 0x66, 0x4d, 0xa7, 0xab, 0x0f, 0xae, 0xcd, 0x00, 0x64,
	0x73, 0x99, 0x48, 0x2e, 0x36, 0x18, 0x8f, 0x65, 0xdb, 0x2c, 0x88, 0x7e, 0x89, 0xc4, 0xdd, 0xc5,
	0xd8, 0x71, 0x74, 0x80, 0x9d, 0xe4, 0xce, 0x91, 0x91, 0x11, 0x83, 0xa0, 0xa1, 0xa4, 0x7d, 0xc0,
	0x86, 0x0d, 0x2a, 0x66, 0xd3, 0xb1, 0x81, 0x36, 0xab, 0xc3, 0xa0, 0xc5, 0x52, 0xc9, 0x98, 0x4a,
	0x34, 0x86, 0x20, 0x90, 0xbf, 0x71, 0x36, 0x3f, 0x75, 0x0e, 0x5b, 0x54, 0x00, 0x99, 0x12, 0xb8,
	0x1f, 0x04, 0xc6, 0x64, 0x7c, 0x20, 0xd6, 0x06, 0x1c, 0x86, 0x55, 0x06, 0x12, 0x2c, 0x60, 0xe2,
	0x99, 0x0f, 0x4f, 0xcf, 0x5c, 0xbb, 0x26, 0xa0, 0x62, 0xd7, 0x6a, 0x89, 0x5b, 0x05, 0x1e, 0x62,
	0x34, 0x40, 0x60, 0xdb, 0xf2, 0x13, 0x07, 0x66, 0xce, 0x1e, 0xc4, 0xa0, 0xc7, 0x55, 0xb0, 0xc8,
	0xce, 0x1b, 0x06, 0x00, 0x42, 0xf1, 0xc1, 0x64, 0x24, 0x91, 0x80, 0x88, 0x71, 0x03, 0x63, 0x6e,
	0x57, 0x1a, 0x27, 0x06, 0x2d, 0xec, 0x12, 0x45, 0xd2, 0x12, 0x45, 0x78, 0x57, 0x3a, 0x46, 0xa4,
	0xc5, 0x3c, 0x31, 0x37, 0xec, 0xad, 0x05, 0x54, 0x99, 0xde, 0x02, 0x40, 0x5a, 0x6d, 0x1b, 0x41,
	0x4a, 0xd3, 0xe9, 0x92, 0x54, 0x55, 0xd8, 0x60, 0xa1, 0x04, 0x4d, 0x75, 0xd7, 0x7d, 0x12, 0x77,
	0x0f, 0x58, 0xce, 0x68, 0x84, 0x64, 0xed, 0xda, 0x2a, 0xce, 0x7f, 0x6c, 0x02, 0x8d, 0x5c, 0x3a,
	0xad, 0x01, 0xb1, 0xe1, 0x96, 0x20, 0x7e, 0x18, 0x18, 0x11, 0x24, 0x1b, 0x34, 0x90, 0xc4, 0x54,
	0x2a, 0x24, 0x11, 0x81, 0x66, 0xf4, 0x34, 0xde, 0x72, 0xf4, 0x48, 0x06, 0x60, 0x8b, 0xc6, 0xd2,
	0x89, 0xd4, 0x2e, 0x11, 0xe9, 0xce, 0x88, 0x66, 0xb6, 0xbf, 0x94, 0xb8, 0x24, 0x43, 0xcf, 0x3e,
	0x7f, 0xa1, 0x78, 0xed, 0x7b, 0xc5, 0x97, 0xc6, 0xe5, 0x37, 0x9f, 0x27, 0xf3, 0x5b, 0x50, 0xfb,
	0xf4, 0xd9, 0xf4, 0x41, 0xc7, 0x7a, 0x97, 0xa3, 0xd3, 0x1d, 0x82, 0x71, 0xd0, 0xf1, 0x0b, 0xb8,
	0xcc, 0xe1, 0xd8, 0xe0, 0x72, 0x74, 0x87, 0xf8, 0x99, 0x1b, 0x27, 0x8b, 0x17, 0x0e, 0x28, 0xef,
	0x58, 0x57, 0x77, 0x88, 0x2f, 0x8c, 0x49, 0x30, 0x82, 0x40, 0xc4, 0xd8, 0x93, 0x6d, 0x5b, 0x80,
	0xfe, 0xfd, 0xe2, 0x6b, 0x02, 0xc0, 0x52, 0x40, 0x13, 0xd1, 0xeb, 0x81, 0x79, 0x20, 0x13, 0x8b,
	0xe4, 0x52, 0x19, 0x32, 0x94, 0x10, 0x5c, 0x5b, 0xe5, 0xd1, 0x93, 0xf2, 0xd4, 0xe4, 0xcc, 0xc8,
	0x0b, 0x9a, 0xe1, 0x87, 0xc9, 0xe8, 0x1e, 0xd0, 0x92, 0x88, 0x64, 0xd1, 0xec, 0x1c, 0xdf, 0xbe,
	0x4b, 0xec, 0xdf, 0x45, 0x72, 0x24, 0xa7, 0xc4, 0xdd, 0xc7, 0xdc, 0x5d, 0x38, 0x35, 0x32, 0x73,
	0xe3, 0xe5, 0xfc, 0xc4, 0x48, 0xe1, 0xbd, 0xb3, 0xf9, 0x1b, 0x97, 0x0a, 0x47, 0xaf, 0x6a, 0x99,
	0xd8, 0x61, 0x4d, 0x3f, 0xaa, 0xd8, 0xb9, 0x0b, 0x6a, 0x78, 0x28, 0x36, 0x94, 0x22, 0xe3, 0x8a,
	0x68, 0xf8, 0xdc, 0xbe, 0xc2, 0x07, 0x17, 0xb0, 0x83, 0x84, 0x1a, 0x86, 0x04, 0xf4, 0x57, 0x50,
	0x4a, 0x92, 0x8b, 0xa1, 0x11, 0xd5, 0xd4, 0xf9, 0x90, 0xc4, 0xdd, 0xcf, 0x98, 0x70, 0xda, 0xc6,
	0x52, 0x64, 0xe2, 0xff, 0x6c, 0xfa, 0x44, 0xe1, 0xe2, 0x5b, 0xf2, 0xc4, 0x44, 0xa9, 0x9f, 0xb8,
	0x12, 0x1d, 0x06, 0x00, 0xc9, 0x1e, 0x8b, 0x8a, 0x91, 0x1c, 0x1a, 0x5b, 0xd6, 0x4e, 0x98, 0x27,
	0x33, 0x76, 0xdc, 0x4b, 0x9c, 0x6b, 0xb2, 0x4e, 0xed, 0xd3, 0x67, 0xd3, 0x07, 0xd9, 0xf5, 0x1b,
	0x9e, 0x68, 0x5f, 0xff, 0x78, 0x3b, 0xfb, 0x84, 0x63, 0xc3, 0x63, 0xae, 0x0d, 0x8f, 0xbb, 0x58,
	0x56, 0xb0, 0x12, 0x46, 0x5c, 0x8e, 0x4e, 0x00, 0x30, 0x9c, 0x8e, 0x2a, 0x5c, 0x01, 0xe2, 0xea,
	0x97, 0xb8, 0xaf, 0x33, 0x6d, 0x95, 0x2a, 0x20, 0x2d, 0xac, 0xbd, 0x59, 0xc9, 0xcd, 0x5a, 0x23,
	0x0d, 0x70, 0x39, 0x17, 0x2d, 0x71, 0xad, 0xa0, 0x99, 0x81, 0x00, 0x66, 0x4d, 0x18, 0x85, 0xce,
	0x5f, 0x19, 0x81, 0x3d, 0x1c, 0x1b, 0x4a, 0x27, 0x22, 0xb9, 0x58, 0x67, 0x3c, 0x19, 0xad, 0xd9,
	0x8d, 0xaf, 0x07, 0xb6, 0x1c, 0xa9, 0x57, 0xee, 0xcb, 0x71, 0xa8, 0x84, 0x88, 0x81, 0x42, 0xa3,
	0x73, 0xfc, 0x8d, 0x35, 0x3a, 0x7e, 0x63, 0x0d, 0x8e, 0x5f, 0x35, 0x6b, 0xd3, 0x5c, 0xcc, 0xaa,
	0x41, 0xae, 0x69, 0xae, 0xc8, 0x35, 0xcf, 0x11, 0xb9, 0x7a, 0x48, 0x59, 0xea, 0x02, 0x29, 0x6b,
	0x9d, 0x21, 0xb5, 0x51, 0xe2, 0x36, 0x80, 0x75, 0x8c, 0x0e, 0x42, 0xec, 0x7d, 0xd8, 0x4a, 0xeb,
	0x30, 0x0e, 0xb0, 0xe1, 0x8a, 0x53, 0x2f, 0xcb, 0x97, 0x4e, 0xc8, 0x2f, 0x7c, 0x50, 0xfc, 0x60,
	0xca, 0xf9, 0x77, 0x56, 0x18, 0xde, 0x27, 0xb7, 0xc7, 0x07, 0x95, 0x7a, 0xe5, 0x70, 0x32, 0xd4,
	0x04, 0x27, 0x02, 0xd4, 0x86, 0x5b, 0x02, 0x55, 0x71, 0xc1, 0x8d, 0x1a, 0x07, 0x41, 0x24, 0xd3,
	0xbb, 0xe0, 0xd5, 0x15, 0x21, 0x04, 0x25, 0x71, 0xcd, 0x8c, 0x55, 0x0d, 0x21, 0xb4, 0xf1, 0xc3,
	0x86, 0xca, 0xf8, 0x01, 0xad, 0x5a, 0x90, 0x80, 0xa3, 0x5a, 0xf0, 0x10, 0xc5, 0xfc, 0x91, 0xdb,
	0x36, 0x21, 0xb0, 0x7a, 0x25, 0xae, 0x8b, 0xf1, 0x90, 0xf8, 0x97, 0xb8, 0xe8, 0xd1, 0x2d, 0x5b,
	0xdb, 0xbf, 0x9e, 0x4d, 0x25, 0x7f, 0x36, 0xb2, 0x7b, 0xcb, 0xd6, 0xf6, 0xa7, 0xfd, 0x3e, 0xfc,
	0x63, 0x5b, 0x64, 0x28, 0x81, 0x7f, 0x85, 0x72, 0x99, 0x78, 0x72, 0xf0, 0x67, 0x23, 0xbb, 0x71,
	0x7e, 0x57, 0xbc, 0xf8, 0xe2, 0x67, 0xd3, 0x2f, 0x22, 0xc1, 0x90, 0x2f, 0x7e, 0x18, 0x18, 0x87,
	0xb3, 0xb1, 0x8c, 0xce, 0x1f, 0x12, 0xca, 0xa3, 0x17, 0x0a, 0xa3, 0x1f, 0xc3, 0xee, 0x42, 0x02,
	0x7a, 0x13, 0x00, 0xf0, 0xaf, 0x38, 0x98, 0x49, 0x0d, 0xa7, 0xb5, 0x61, 0x46, 0xab, 0x96, 0xbc,
	0x38, 0xb5, 0x07, 0x46, 0x27, 0x90, 0xb2, 0x1b, 0x12, 0x42, 0xfc, 0x6f, 0x8f, 0x27, 0x62, 0x62,
	0x3a, 0x13, 0x7f, 0x26, 0x9e, 0x88, 0x0d, 0xc6, 0x08, 0xc6, 0x56, 0x4a, 0xdc, 0xbd, 0x4a, 0x4b,
	0x85, 0xd7, 0x9f, 0x9f, 0x3d, 0x7e, 0x98, 0xb5, 0xe7, 0xaf, 0x1f, 0x90, 0xdf, 0xfe, 0xb6, 0xcb,
	0xb1, 0xfe, 0xb1, 0x4d, 0x9b, 0x76, 0x76, 0x08, 0xcd, 0xb0, 0x62, 0xaf, 0x52, 0x8f, 0x7e, 0x12,
	0xd8, 0x10, 0xa7, 0xed, 0xa9, 0xcc, 0x90, 0xea, 0xfd, 0xd6, 0x4b, 0x5c, 0x3b, 0x43, 0x13, 0x09,
	0x3e, 0x98, 0x2a, 0x4e, 0x9d, 0xc6, 0x59, 0x3e, 0xbb, 0x58, 0x61, 0x36, 0x9c, 0x8c, 0xef, 0x74,
	0x38, 0x9e, 0x8d, 0x27, 0xa3, 0xa9, 0x67, 0xb3, 0x10, 0x13, 0x90, 0x49, 0x17, 0xe2, 0x41, 0x7f,
	0x13, 0x58, 0x11, 0x4b, 0x94, 0xf4, 0xd9, 0x90, 0x8e, 0xdd, 0x12, 0xd7, 0xc1, 0x7c, 0x85, 0x30,
	0x44, 0x3a, 0x86, 0xc9, 0xdc, 0xab, 0xfb, 0x0a, 0xa7, 0xde, 0xc3, 0x2f, 0x1d, 0xac, 0x2b, 0x3f,
	0x79, 0x70, 0xe6, 0xc6, 0x49, 0x79, 0xf4, 0x0a, 0x79, 0xf3, 0xa8, 0x92, 0xed, 0xa1, 0x47, 0x98,
	0xc5, 0x40, 0xae, 0x28, 0xdb, 0xfb, 0x33, 0x60, 0x8b, 0x25, 0x07, 0xe3, 0xc9, 0x18, 0xb6, 0xa3,
	0x1d, 0xb5, 0xa1, 0x2e, 0x22, 0xaa, 0xa9, 0xb8, 0x3c, 0xfd, 0x4a, 0xe1, 0xc8, 0x4b, 0x24, 0x50,
	0x01, 0xb8, 0x86, 0x62, 0x1e, 0x34, 0x5d, 0x35, 0xd7, 0x3c, 0x5d, 0xb5, 0xdc, 0xa1, 0x5f, 0x6b,
	0x9d, 0xab, 0x5f, 0xa3, 0xe6, 0xc5, 0xaf, 0x2d, 0xac, 0x8b, 0x5f, 0xa3, 0xeb, 0xec, 0xd7, 0xee,
	0x97, 0x38, 0x07, 0xb8, 0x97, 0x29, 0xf3, 0x52, 0x2c, 0x19, 0xdd, 0xd8, 0xd2, 0xce, 0x0f, 0x4d,
	0x60, 0xb1, 0x9e, 0x60, 0x2b, 0x59, 0x9f, 0xde, 0x08, 0x00, 0x59, 0xaa, 0x2e, 0xcf, 0xc3, 0x71,
	0x55, 0x6d, 0xe0, 0x4f, 0x08, 0x6f, 0xc3, 0xa3, 0x95, 0xf9, 0xca, 0xc6, 0x3f, 0xec, 0x2b, 0xbb,
	0x80, 0x4d, 0x91, 0x27, 0x17, 0x19, 0x24, 0xde, 0x0d, 0xa6, 0x79, 0x8c, 0x95, 0xa4, 0x2e, 0x63,
	0x1f, 0xb3, 0x8b, 0xe5, 0x53, 0x17, 0x66, 0x47, 0x4e, 0x60, 0x16, 0xf9, 0x89, 0x03, 0xf2, 0xd1,
	0xf1, 0xfc, 0xc4, 0x88, 0xa0, 0xf4, 0x24, 0x1c, 0x19, 0x2c, 0x5b, 0x7f, 0x6c, 0x9a, 0xe3, 0xfa,
	0xa3, 0xa9, 0xa6, 0xf5, 0xc7, 0xcf, 0x29, 0xb0, 0xd3, 0x8c, 0x14, 0xeb, 0x5c, 0x47, 0x0a, 0x98,
	0x97, 0x91, 0x62, 0xab, 0xcb, 0x48, 0xb1, 0xd7, 0x79, 0xa4, 0x40, 0x87, 0x0d, 0x56, 0x33, 0xd5,
	0x07, 0x02, 0x4b, 0x6b, 0x07, 0x0c, 0x86, 0x9a, 0xf3, 0xe7, 0x46, 0xd0, 0xbc, 0x35, 0x92, 0x89,
	0x47, 0xfa, 0x13, 0x31, 0x3c, 0xa7, 0x3c, 0x06, 0xec, 0xcf, 0x44, 0xc8, 0x4c, 0x54, 0xb1, 0xb0,
	0x3d, 0xf6, 0xda, 0xec, 0xbe, 0x31, 0x79, 0x74, 0x6f, 0x71, 0x6a, 0x0f, 0xc6, 0xf5, 0x33, 0x11,
	0x3c, 0x15, 0xdd, 0xc6, 0x88, 0x61, 0x74, 0x31, 0x00, 0xb1, 0xb0, 0x86, 0x31, 0x9e, 0xdc, 0x71,
	0x18, 0xa0, 0xe0, 0xce, 0x58, 0x33, 0xee, 0xfe, 0x14, 0x79, 0x7e, 0x01, 0x91, 0xe7, 0x2a, 0x89,
	0x7b, 0x10, 0xdc, 0xcf, 0xe8, 0x91, 0xc4, 0xd2, 0x24, 0xb2, 0xd3, 0xd8, 0xd6, 0x79, 0xa1, 0x09,
	0x58, 0x14, 0x2a, 0x88, 0x18, 0x08, 0xb5, 0xf2, 0xc4, 0x1d, 0xd1, 0x63, 0xc4, 0x3c, 0x13, 0xc9,
	0xdc, 0x06, 0xb2, 0xca, 0xa1, 0xdb, 0x58, 0x2b, 0x74, 0x1f, 0x20, 0x90, 0xd4, 0x46, 0x9a, 0xa4,
	0x82, 0x0e, 0x8c, 0x64, 0x0b, 0xa9, 0xa9, 0xb4, 0x85, 0xa8, 0x90, 0x8d, 0x4c, 0xc3, 0xf8, 0x12,
	0x97, 0xab, 0xa8, 0x35, 0xd5, 0x8c, 0x5a, 0xf3, 0x1d, 0xa2, 0xd6, 0x32, 0x57, 0xd4, 0x5a, 0xe7,
	0x05, 0xb5, 0xa0, 0x2e, 0xa8, 0xb5, 0xd5, 0x19, 0xb5, 0x30, 0x52, 0x04, 0x6d, 0x8c, 0x8a, 0x47,
	0xd6, 0xae, 0x05, 0xac, 0xf3, 0x53, 0x0b, 0x30, 0x61, 0x47, 0x5a, 0xf3, 0x82, 0x77, 0xb5, 0x15,
	0xa6, 0xb2, 0x45, 0x4f, 0x0c, 0x25, 0x06, 0x34, 0xe1, 0x6c, 0xa5, 0xf1, 0x16, 0xd9, 0x0a, 0x26,
	0xd1, 0xa0, 0xdf, 0x58, 0xe3, 0x5a, 0x6e, 0xd3, 0x1f, 0x5a, 0x06, 0x43, 0x49, 0x89, 0xe9, 0xf6,
	0x92, 0x12, 0x73, 0xad, 0x49, 0x49, 0x77, 0x45, 0x52, 0x82, 0xd1, 0xe9, 0x90, 0xb8, 0x15, 0x65,
	0x49, 0x89, 0x4d, 0xc9, 0x23, 0x6a, 0xc9, 0x49, 0xac, 0xf3, 0x9d, 0x93, 0x80, 0x7a, 0xe4, 0x24,
	0x9a, 0x41, 0x69, 0x9b, 0xeb, 0xa0, 0xb4, 0xdf, 0xe1, 0xf2, 0x5b, 0x9d, 0xf3, 0x19, 0xfd, 0xd8,
	0x6f, 0xad, 0xcb, 0xd8, 0xa7, 0xea, 0x3b, 0xf6, 0xe9, 0x6f, 0x90, 0xe5, 0xee, 0x85, 0xf3, 0x9d,
	0xfb, 0x23, 0xb6, 0x2e, 0x38, 0xe7, 0x00, 0x8a, 0x21, 0xfe, 0x83, 0x35, 0x61, 0xd6, 0xce, 0x31,
	0x13, 0x30, 0x2b, 0xdb, 0xd6, 0xb5, 0xfa, 0x94, 0x5a, 0x27, 0xbf, 0x5a, 0x57, 0xf4, 0x74, 0xdb,
	0x85, 0xda, 0x45, 0xbd, 0xc2, 0xd1, 0xab, 0xf2, 0xfe, 0x0b, 0xd5, 0xb6, 0x0b, 0xe9, 0x95, 0xa0,
	0x29, 0x9e, 0x8c, 0xc6, 0x76, 0x12, 0xcf, 0x62, 0x93, 0x38, 0x0b, 0x63, 0xc2, 0xe7, 0x00, 0x04,
	0x5c, 0x42, 0xbb, 0x74, 0xd9, 0x08, 0xf6, 0x2d, 0x77, 0x4b, 0x5c, 0x1b, 0xb3, 0x48, 0xbb, 0x55,
	0x5e, 0x5b, 0x4e, 0x62, 0xae, 0x29, 0x27, 0xf9, 0x22, 0xa7, 0x3f, 0x65, 0xa4, 0x81, 0x9a, 0x47,
	0x9a, 0xed, 0xce, 0x47, 0x9a, 0xbd, 0x2e, 0x23, 0xad, 0xb9, 0xce, 0xb3, 0xec, 0x3d, 0x12, 0xb7,
	0x0c, 0x2c, 0x65, 0x14, 0xdc, 0xb3, 0xba, 0x13, 0x15, 0xce, 0x23, 0x26, 0x38, 0xc9, 0x42, 0x98,
	0x91, 0x63, 0x77, 0x04, 0x98, 0xba, 0x35, 0xc7, 0x6a, 0x90, 0x9c, 0xef, 0x61, 0x51, 0x7d, 0xa1,
	0x1b, 0xcb, 0x8a, 0x8f, 0x00, 0xdd, 0xe2, 0x48, 0x43, 0x53, 0x1d, 0x8f, 0x34, 0xb0, 0xc0, 0x92,
	0x4a, 0xc7, 0x32, 0x15, 0xc9, 0x09, 0xde, 0x29, 0xd6, 0x42, 0x54, 0xa5, 0x2b, 0xdb, 0x78, 0x37,
	0xd7, 0x78, 0x90, 0xa0, 0x03, 0xb4, 0xe2, 0x2d, 0xf4, 0x92, 0x19, 0xf0, 0xc0, 0x6a, 0x93, 0xb8,
	0xc5, 0xcc, 0x42, 0x75, 0x07, 0x5d, 0x63, 0x8f, 0x66, 0x54, 0xc1, 0xad, 0x18, 0x45, 0x19, 0x16,
	0xd6, 0x9a, 0x87, 0x05, 0xa8, 0x7d, 0x58, 0x2c, 0xe8, 0xa8, 0x3e, 0x2c, 0xbe, 0x9c, 0xa9, 0x3a,
	0xf4, 0x8d, 0x60, 0x09, 0x43, 0xc0, 0xaf, 0x2e, 0x66, 0x21, 0xd5, 0x3a, 0x7f, 0x63, 0x04, 0x36,
	0x7f, 0x49, 0xb3, 0xd5, 0x2c, 0x63, 0xb8, 0x3d, 0xcb, 0xcc, 0xff, 0x2c, 0x52, 0x42, 0xa5, 0xb1,
	0x46, 0x54, 0x56, 0x3b, 0xa2, 0xd1, 0x34, 0xa7, 0x23, 0x1a, 0x75, 0x4d, 0xb0, 0x6e, 0x86, 0xb3,
	0x2f, 0x67, 0x6a, 0x4e, 0xce, 0x04, 0x68, 0xe1, 0xc4, 0x2e, 0xd5, 0x82, 0x6d, 0x95, 0xaa, 0xf6,
	0x47, 0x9c, 0xb3, 0x36, 0x60, 0x26, 0x5a, 0xa6, 0x1f, 0x00, 0x0d, 0x04, 0x66, 0x46, 0x72, 0x06,
	0xb4, 0xec, 0x60, 0x85, 0xd0, 0x10, 0x9f, 0xeb, 0x91, 0xa5, 0x76, 0xdd, 0x12, 0xd0, 0x32, 0x89,
	0x5b, 0xc2, 0xd0, 0x5a, 0xfa, 0x9b, 0xee, 0xc7, 0xcf, 0x4f, 0x06, 0x54, 0x0a, 0xbd, 0x4c, 0xb7,
	0x0c, 0xbd, 0xb4, 0xe7, 0x58, 0xcc, 0x35, 0x9c, 0x63, 0xd1, 0xed, 0x43, 0x59, 0x6a, 0xda, 0x87,
	0x52, 0x92, 0x31, 0xeb, 0xed, 0x25, 0x63, 0x60, 0xee, 0xc9, 0x98, 0x6d, 0x5e, 0x92, 0x31, 0xfb,
	0x7c, 0x27, 0x63, 0xcd, 0xf5, 0x48, 0xc6, 0x36, 0x03, 0x1b, 0x39, 0x93, 0xb3, 0x0b, 0x5a, 0xbb,
	0xa5, 0x12, 0x9e, 0xe8, 0x10, 0x0f, 0x5e, 0x0f, 0x52, 0x28, 0xbd, 0x51, 0xfa, 0x09, 0xdd, 0xa9,
	0x9f, 0xd6, 0x4a, 0x94, 0x6a, 0xcf, 0xfe, 0x74, 0xe8, 0x0e, 0xfe, 0x68, 0xa2, 0x52, 0xaa, 0xb6,
	0xa8, 0x54, 0x17, 0x90, 0x2f, 0xac, 0x2d, 0x20, 0xaf, 0xe6, 0x4a, 0xe9, 0x39, 0xb9, 0xd2, 0xca,
	0x98, 0xf8, 0xae, 0x3b, 0x8c, 0x89, 0x17, 0xd5, 0xec, 0x94, 0x17, 0xdf, 0xb9, 0x53, 0x5e, 0x52,
	0x17, 0xa7, 0xbc, 0xb4, 0xce, 0xd9, 0xa7, 0x76, 0xf7, 0xb9, 0xad, 0x5e, 0xbb, 0xcf, 0x6a, 0xe4,
	0x4d, 0x8c, 0xcd, 0xda, 0xb5, 0x60, 0x70, 0x8e, 0x99, 0x81, 0xdd, 0xaf, 0xc1, 0x42, 0x8d, 0x0e,
	0xbf, 0x1a, 0xf2, 0x1a, 0xe6, 0x84, 0xbc, 0x2f, 0x78, 0x12, 0x28, 0xf3, 0x0d, 0xa6, 0xb9, 0xf9,
	0x06, 0xf3, 0x1c, 0x7d, 0x43, 0xcd, 0x19, 0x6b, 0x45, 0xe0, 0x67, 0x2d, 0xf9, 0xef, 0x65, 0x7a,
	0x0f, 0xa1, 0x99, 0xc9, 0x2b, 0x03, 0xc0, 0xf9, 0xdb, 0x28, 0x53, 0xc6, 0xb9, 0xad, 0xe6, 0x71,
	0x6e, 0xbf, 0xf3, 0x71, 0xde, 0x5c, 0x97, 0x71, 0xde, 0x52, 0xe7, 0xe0, 0x8b, 0x1c, 0x20, 0xd7,
	0x8d, 0x33, 0x76, 0xa9, 0x16, 0xe4, 0xda, 0xe8, 0xeb, 0x9f, 0x8c, 0xc0, 0xc6, 0xa5, 0xd3, 0xde,
	0x64, 0x36, 0x17, 0x49, 0x0e, 0xc4, 0xe8, 0x15, 0x9a, 0x01, 0xd9, 0x2c, 0x71, 0x80, 0xb1, 0xc8,
	0x97, 0xde, 0xc8, 0x5f, 0x3f, 0xe0, 0xf5, 0xa0, 0x91, 0x38, 0xdf, 0x21, 0x3d, 0x8c, 0x76, 0x12,
	0xa9, 0xe1, 0x68, 0x69, 0x88, 0x11, 0xdb, 0x1e, 0x9c, 0x94, 0x4f, 0x9f, 0x2e, 0x9c, 0xd9, 0x37,
	0x33, 0xbe, 0x17, 0x61, 0x13, 0x12, 0x79, 0xa3, 0xf4, 0x32, 0x74, 0xc7, 0x0e, 0x0f, 0x32, 0xab,
	0xc4, 0x99, 0x98, 0x06, 0x6f, 0xef, 0x4e, 0x07, 0xba, 0x6e, 0xb7, 0x16, 0x18, 0x51, 0x0c, 0x84,
	0x07, 0xd5, 0x72, 0x89, 0x5b, 0xca, 0x90, 0xcd, 0xc7, 0xe2, 0xf4, 0x11, 0xf9, 0xe2, 0x6b, 0x4a,
	0x24, 0x64, 0x14, 0x10, 0x1d, 0xcd, 0xaa, 0xb7, 0x83, 0xcc, 0x9a, 0x1a, 0xe4, 0x6c, 0x26, 0xea,
	0x33, 0x2e, 0x86, 0xb1, 0x13, 0xa1, 0xfc, 0xd3, 0x11, 0x42, 0x17, 0xf4, 0x01, 0xe0, 0x6e, 0x46,
	0x8b, 0x19, 0xd6, 0xae, 0x55, 0x9a, 0xf3, 0x55, 0x1b, 0xa0, 0x35, 0xa5, 0x8a, 0xa7, 0xdf, 0x08,
	0x6c, 0x71, 0xf2, 0x4a, 0x54, 0x11, 0x86, 0x8c, 0xdd, 0xa2, 0xad, 0xee, 0xf5, 0x08, 0x40, 0xa1,
	0xf3, 0xfe, 0xbf, 0xc7, 0x5b, 0x29, 0x69, 0xb0, 0xdc, 0xc6, 0xa5, 0x07, 0x6b, 0x8d, 0x19, 0x51,
	0x04, 0xd8, 0x62, 0xe8, 0x82, 0x01, 0xbe, 0x45, 0x89, 0xa1, 0xd3, 0x21, 0x71, 0x5f, 0x65, 0x68,
	0x72, 0x4f, 0x00, 0xdf, 0x36, 0xc0, 0xa0, 0x79, 0xb8, 0xf2, 0xdd, 0x1a, 0x47, 0x35, 0xb4, 0x00,
	0xcc, 0x14, 0xdd, 0xb7, 0x4c, 0xa8, 0x4d, 0x0c, 0x94, 0x4e, 0x64, 0x6d, 0x91, 0xb8, 0x1e, 0xa6,
	0x15, 0x33, 0x9a, 0x3d, 0x7a, 0x7c, 0x66, 0x7c, 0xbc, 0x78, 0x66, 0x37, 0xbb, 0x69, 0xbd, 0x0b,
	0xbf, 0xca, 0x4f, 0x5c, 0x74, 0xc0, 0x08, 0x7c, 0xf4, 0xb0, 0xbc, 0xff, 0xb4, 0xc3, 0xd1, 0xbe,
	0xc1, 0x25, 0x9f, 0xbb, 0x3c, 0xf3, 0xe1, 0x79, 0x87, 0xa3, 0x9d, 0x75, 0xcd, 0x5c, 0x79, 0xa1,
	0x70, 0xec, 0x8a, 0xa3, 0xfd, 0x51, 0x57, 0xf1, 0xed, 0xa9, 0xe2, 0xe4, 0x0d, 0xa5, 0x35, 0x37,
	0x0c, 0xbd, 0xff, 0x1a, 0x90, 0x27, 0x71, 0x28, 0x3b, 0x48, 0xd2, 0x85, 0x6f, 0x4a, 0xdc, 0x37,
	0x94, 0x7b, 0x13, 0xb8, 0x31, 0x3c, 0x63, 0xb0, 0xdd, 0x6a, 0x6b, 0xae, 0x5e, 0x3e, 0xe0, 0xf1,
	0x06, 0xba, 0x1d, 0x0e, 0xdc, 0xa6, 0x2b, 0xd4, 0xe7, 0x76, 0xf3, 0xa1, 0x90, 0xc3, 0x81, 0x49,
	0x70, 0x9b, 0xae, 0xb0, 0xd7, 0xcf, 0x07, 0xfb, 0xc2, 0x0e, 0x07, 0x6e, 0xd9, 0x15, 0xec, 0xea,
	0xf2, 0x79, 0x03, 0xbc, 0x60, 0xc5, 0x6d, 0xfa, 0xb3, 0x83, 0x50, 0xa3, 0xe4, 0x04, 0x3e, 0xd2,
	0x68, 0x73, 0x85, 0x46, 0xc9, 0x85, 0x0b, 0x9d, 0x46, 0xb5, 0xef, 0x6e, 0xa2, 0x51, 0x4c, 0x82,
	0x34, 0x7a, 0xd0, 0xa0, 0xb6, 0x81, 0x54, 0x8a, 0x77, 0x53, 0xbe, 0x25, 0x71, 0x3b, 0x98, 0x56,
	0xfc, 0xbe, 0xa4, 0xd2, 0xbe, 0xf5, 0xae, 0xc2, 0xa9, 0xef, 0xe0, 0x3b, 0x1b, 0x50, 0xa5, 0xa4,
	0x25, 0xa2, 0x58, 0xd6, 0xa5, 0x5c, 0xf8, 0x70, 0xe8, 0x0b, 0xaa, 0x6a, 0x5c, 0xab, 0x72, 0x4c,
	0x8e, 0x54, 0x3e, 0x6e, 0x00, 0xe4, 0x11, 0xe9, 0x1c, 0xa7, 0x2d, 0x63, 0x06, 0x89, 0x3b, 0x60,
	0x60, 0x68, 0xad, 0x3c, 0x44, 0xeb, 0xc3, 0xaa, 0x40, 0x25, 0xad, 0x6b, 0x5b, 0x2f, 0xe9, 0xbe,
	0xaa, 0x70, 0x2e, 0x21, 0xe8, 0xf3, 0x75, 0x72, 0xee, 0x2d, 0x8e, 0xdb, 0xb4, 0x11, 0x66, 0x02,
	0x6d, 0xa4, 0xf7, 0xc2, 0x54, 0x5d, 0xbc, 0xf0, 0xc2, 0x3a, 0x7b, 0xe1, 0x47, 0x25, 0x6e, 0x3d,
	0x58, 0xcb, 0x54, 0xf1, 0xb3, 0x6c, 0x9b, 0xd6, 0xa3, 0x60, 0x80, 0x91, 0xcb, 0x4b, 0x3f, 0x34,
	0x03, 0x20, 0xc4, 0xd2, 0xa9, 0xcc, 0xe7, 0x70, 0xa1, 0xaa, 0x6a, 0xc8, 0xde, 0x38, 0xa7, 0x90,
	0xbd, 0xcc, 0x4b, 0x19, 0xeb, 0xe0, 0xa5, 0x86, 0xf4, 0x5e, 0x0a, 0xaf, 0xac, 0xfb, 0x24, 0xce,
	0x5b, 0xe9, 0xa5, 0x36, 0xdf, 0x8e, 0x97, 0xaa, 0xc9, 0x4d, 0x99, 0xbe, 0x70, 0x37, 0x65, 0xfe,
	0x1c, 0xdc, 0x94, 0xe5, 0x8f, 0xca, 0x4d, 0x59, 0xff, 0xe8, 0xdd, 0x94, 0xe6, 0x0e, 0x9e, 0x32,
	0x62, 0x59, 0x1a, 0x0f, 0xea, 0xfc, 0xc4, 0xfe, 0xc2, 0x7e, 0xe5, 0xca, 0xfe, 0xd5, 0x26, 0x60,
	0x09, 0x91, 0x44, 0xb1, 0x3c, 0xbd, 0x34, 0xd4, 0x9a, 0x5e, 0xce, 0x77, 0x94, 0xd5, 0xae, 0x3b,
	0xda, 0x54, 0x25, 0x51, 0xd5, 0x67, 0xd9, 0x9b, 0x81, 0x99, 0xec, 0xb1, 0x92, 0x48, 0xeb, 0x1e,
	0x89, 0x5b, 0x56, 0x35, 0xb5, 0x45, 0x57, 0xde, 0x14, 0xe2, 0x39, 0x9c, 0xa0, 0x5b, 0xa9, 0x3b,
	0x52, 0x8a, 0xf2, 0x1b, 0x13, 0x4e, 0x23, 0xe7, 0xe9, 0x30, 0xe9, 0x9f, 0x0e, 0x3b, 0x55, 0x3b,
	0xec, 0xa4, 0x00, 0x54, 0x5d, 0x0d, 0x42, 0x36, 0x75, 0xfe, 0xae, 0x09, 0x58, 0x7a, 0x33, 0xa9,
	0x01, 0x2e, 0x97, 0xcb, 0xd0, 0x9b, 0x35, 0x91, 0xb9, 0x41, 0xb3, 0x93, 0xaf, 0xbd, 0x95, 0x26,
	0x5f, 0x3c, 0x5c, 0xbc, 0xf6, 0x32, 0x42, 0x9a, 0x1a, 0xa1, 0xaf, 0x46, 0x11, 0x7a, 0xc3, 0x4d,
	0x6a, 0xe4, 0x27, 0xa6, 0x0a, 0xa7, 0x26, 0xd5, 0x98, 0xbd, 0xd6, 0x4b, 0x76, 0x25, 0xa0, 0x1b,
	0x6f, 0x09, 0xf4, 0x8d, 0x24, 0x07, 0x68, 0x2a, 0xad, 0x8f, 0xb4, 0x55, 0xe6, 0x00, 0xf8, 0xe3,
	0x14, 0x3b, 0x47, 0x0c, 0x15, 0x99, 0x80, 0xa9, 0xe6, 0x4c, 0x40, 0x83, 0x75, 0xf3, 0x5c, 0x0f,
	0x1e, 0x58, 0xe6, 0x08, 0xc5, 0x95, 0xba, 0x1d, 0xd6, 0x5b, 0x8f, 0x1a, 0x70, 0xe7, 0x89, 0xf1,
	0x97, 0x73, 0x6f, 0x75, 0x9d, 0xc4, 0xad, 0x01, 0x0c, 0xa3, 0x02, 0x9a, 0xbd, 0x57, 0x87, 0x5c,
	0x6c, 0xdc, 0x6b, 0x92, 0x7c, 0xf9, 0x0d, 0xe2, 0xb9, 0xff, 0xc3, 0x08, 0x40, 0x68, 0x47, 0x24,
	0x13, 0x8d, 0x27, 0x07, 0x3d, 0x9d, 0xf4, 0x63, 0xa0, 0x29, 0xda, 0x5f, 0x02, 0x3f, 0xb6, 0x92,
	0x3c, 0xba, 0xb7, 0xf8, 0xe2, 0x3e, 0x7c, 0x21, 0x5e, 0x9e, 0x3c, 0x82, 0xc1, 0xa1, 0x66, 0xa9,
	0xc6, 0x68, 0x3f, 0x4a, 0x69, 0x8d, 0x3b, 0x52, 0xd9, 0x1c, 0x19, 0x02, 0x08, 0x4b, 0x77, 0x95,
	0xd5, 0x80, 0xe5, 0x90, 0x1e, 0xfe, 0x45, 0x79, 0x6b, 0x2a, 0xa3, 0x7c, 0x69, 0x05, 0xd1, 0x2f,
	0x2e, 0xa3, 0x2f, 0x7e, 0x77, 0x5c, 0x1e, 0x7b, 0x0b, 0x7f, 0xb2, 0x88, 0xde, 0x40, 0x76, 0x8b,
	0x74, 0x9f, 0xcb, 0x29, 0xa3, 0x47, 0xfb, 0x40, 0xf2, 0xe1, 0x43, 0x64, 0xdf, 0x68, 0x33, 0xb0,
	0xa4, 0x23, 0xd9, 0xec, 0xb3, 0xa9, 0x8c, 0xb2, 0x20, 0x5a, 0xb5, 0x19, 0x79, 0x7c, 0x6f, 0xf1,
	0xcc, 0x6e, 0x41, 0xa5, 0x55, 0x81, 0x66, 0xaa, 0x01, 0x68, 0xe6, 0x3b, 0x07, 0xda, 0x97, 0x73,
	0x73, 0x55, 0x09, 0x0c, 0x4a, 0xd8, 0x61, 0x69, 0x8c, 0x13, 0xf9, 0xe2, 0x6b, 0xf2, 0xb7, 0x95,
	0x65, 0x98, 0xdf, 0x36, 0x02, 0x8b, 0x42, 0x42, 0xaf, 0xd5, 0x7c, 0x9a, 0x06, 0xcf, 0xae, 0x8b,
	0xb5, 0x55, 0x66, 0xde, 0xd9, 0x23, 0x8f, 0x1e, 0xdf, 0xc2, 0x6f, 0xdb, 0xd9, 0x81, 0x3f, 0x5c,
	0xa3, 0x82, 0xb1, 0xe1, 0x36, 0xc1, 0xe8, 0x02, 0xe6, 0x68, 0xbf, 0xa8, 0x59, 0x62, 0x47, 0xb7,
	0xc2, 0x96, 0x6b, 0x1b, 0xf3, 0xef, 0x0a, 0x3d, 0xe9, 0x73, 0x44, 0x23, 0xb9, 0x48, 0x7f, 0x24,
	0x1b, 0xdb, 0xd9, 0x21, 0x98, 0xa2, 0xfd, 0x68, 0x27, 0x73, 0xa5, 0xee, 0xdc, 0xfd, 0xad, 0xad,
	0xdf, 0x74, 0xe7, 0xd6, 0x37, 0xd5, 0xc5, 0xfa, 0xe6, 0xcf, 0xe7, 0x5e, 0x92, 0x6a, 0x5a, 0xbd,
	0xed, 0xb1, 0x21, 0x9d, 0x3f, 0x32, 0x82, 0x26, 0x6e, 0x38, 0x1a, 0xcf, 0xd1, 0x8f, 0x68, 0x96,
	0x73, 0x51, 0x1c, 0xb6, 0x48, 0xbe, 0x74, 0x76, 0x06, 0xfe, 0x7f, 0x5f, 0xbe, 0xf6, 0x0a, 0xbe,
	0xe0, 0x43, 0x96, 0x76, 0x59, 0x60, 0xcb, 0xa6, 0x86, 0x33, 0x03, 0xe4, 0x62, 0x1b, 0xfe, 0x62,
	0x0a, 0x3e, 0x0f, 0x37, 0xf3, 0xd1, 0x9e, 0xc2, 0xe4, 0x61, 0xe5, 0x32, 0x1b, 0xa6, 0x42, 0x97,
	0xd9, 0x18, 0x60, 0x4e, 0xa5, 0x31, 0x7d, 0xa3, 0x86, 0x1e, 0x1f, 0xc8, 0x20, 0xf4, 0xa6, 0x54,
	0x1a, 0xd1, 0xd6, 0xba, 0x97, 0xb2, 0x06, 0x58, 0x89, 0x1c, 0x65, 0xdb, 0x29, 0x58, 0x0a, 0xbc,
	0x29, 0x89, 0x29, 0x10, 0x75, 0xf9, 0x49, 0x25, 0x7c, 0x92, 0x1e, 0x8b, 0x90, 0x9f, 0x9c, 0xd4,
	0x9d, 0x06, 0xa9, 0x7b, 0xfc, 0xf7, 0x7f, 0x61, 0x89, 0x17, 0xfa, 0x6a, 0xb0, 0x98, 0xc1, 0x08,
	0x62, 0xed, 0x18, 0x30, 0x78, 0xd2, 0x62, 0xfe, 0x81, 0x02, 0x66, 0x3e, 0x93, 0x41, 0x39, 0x95,
	0x05, 0x18, 0x79, 0x31, 0xb8, 0x85, 0x5a, 0x40, 0x2f, 0x01, 0x56, 0x5e, 0x24, 0x39, 0x0d, 0xf5,
	0x7b, 0xe5, 0x9f, 0x81, 0x5e, 0x0a, 0x28, 0x5e, 0x0c, 0x04, 0xc3, 0x22, 0xd7, 0x17, 0xee, 0x09,
	0x0a, 0xde, 0x3f, 0xe7, 0x3d, 0xd4, 0xdf, 0xfe, 0xfe, 0x37, 0x06, 0xfa, 0x6e, 0xb0, 0x88, 0x17,
	0xb9, 0x5e, 0xaf, 0x18, 0xda, 0x16, 0x0a, 0xf3, 0x7e, 0xb1, 0x2f, 0xb0, 0x25, 0x10, 0x7c, 0x2a,
	0x40, 0x8d, 0x48, 0xbf, 0xd6, 0x14, 0xf6, 0x72, 0x02, 0xe7, 0x0f, 0x89, 0xde, 0xc0, 0x56, 0xce,
	0xe7, 0xf5, 0x50, 0xbb, 0x61, 0xe1, 0x3d, 0x60, 0x31, 0x8f, 0xd8, 0x95, 0x57, 0x9d, 0x39, 0xae,
	0x2b, 0x2d, 0xab, 0x3b, 0x0b, 0x4b, 0xef, 0x05, 0x4b, 0x49, 0xa9, 0x2a, 0x8f, 0xd8, 0xc5, 0x79,
	0x7d, 0xbc, 0x87, 0xfa, 0x4f, 0x58, 0xfe, 0x00, 0x58, 0x41, 0xca, 0x7d, 0x41, 0x37, 0xe7, 0xab,
	0xa4, 0xfa, 0x2f, 0x3d, 0x55, 0xe7, 0x16, 0x2f, 0xe7, 0xaf, 0xa4, 0xfa, 0x6f, 0xbd, 0x24, 0x65,
	0xfd, 0xff, 0x39, 0x2c, 0x7d, 0x10, 0xdc, 0xab, 0x6f, 0xc9, 0xe3, 0x11, 0x7b, 0x83, 0x3e, 0xaf,
	0x7b, 0x9b, 0xc2, 0xe4, 0x7f, 0xf4, 0x64, 0xa4, 0xa9, 0x0a, 0xb2, 0xcf, 0xaa, 0x71, 0x13, 0x78,
	0x7f, 0x19, 0xd9, 0x2f, 0xaa, 0x71, 0xab, 0x24, 0xfb, 0xe5, 0x71, 0x45, 0xfd, 0xe1, 0x5e, 0x5f,
	0xb9, 0x82, 0x3f, 0x3d, 0xab, 0x2d, 0x2c, 0xd3, 0xef, 0x3f, 0xc3, 0xc2, 0x25, 0xa0, 0x15, 0x17,
	0xc2, 0x2e, 0x77, 0x05, 0xfb, 0x02, 0x1e, 0xea, 0x87, 0xba, 0x4a, 0x9c, 0x4f, 0xe0, 0x39, 0xcf,
	0x36, 0x91, 0x7f, 0xda, 0x1b, 0x0a, 0x87, 0xa8, 0x7f, 0x81, 0x85, 0x0f, 0x03, 0x07, 0x2e, 0x14,
	0xf8, 0x80, 0x87, 0x17, 0xc4, 0x5e, 0x5f, 0x5f, 0xb7, 0x37, 0x20, 0xba, 0x7b, 0x78, 0xf7, 0x16,
	0x45, 0xae, 0x7f, 0x85, 0x84, 0xcb, 0xc1, 0x5d, 0x0a, 0xf7, 0x00, 0xcf, 0x7b, 0x08, 0x3d, 0xf5,
	0x6f, 0xb0, 0xcc, 0x01, 0x96, 0xe1, 0x32, 0x22, 0xac, 0xc8, 0x07, 0xba, 0xbd, 0x01, 0x5e, 0x0c,
	0x6f, 0xeb, 0xe5, 0xa9, 0x7f, 0x87, 0x14, 0xf7, 0x81, 0x36, 0x5d, 0x33, 0x98, 0x3f, 0x2f, 0x08,
	0x41, 0x81, 0xfa, 0x91, 0x8e, 0x3d, 0x21, 0x20, 0x4d, 0xff, 0xf8, 0xac, 0x62, 0x72, 0x58, 0x16,
	0xee, 0xf5, 0x75, 0x7a, 0x03, 0x1e, 0xde, 0x23, 0xba, 0xb9, 0x00, 0xec, 0xa5, 0x87, 0xf7, 0xf1,
	0x61, 0x9e, 0xfa, 0x89, 0xca, 0xc1, 0x1d, 0x2a, 0xd7, 0xdb, 0xc4, 0xbb, 0x9a, 0xb2, 0x32, 0xb5,
	0x5d, 0x85, 0x65, 0x2c, 0x58, 0x8d, 0xca, 0xdc, 0x02, 0xcf, 0x85, 0x79, 0x51, 0xe0, 0x7d, 0x3c,
	0x17, 0xe2, 0xc5, 0xa7, 0xbc, 0xe1, 0x1e, 0xb1, 0x2f, 0xe0, 0x0e, 0x06, 0xba, 0xbc, 0x82, 0x1f,
	0x36, 0x19, 0xf4, 0xfb, 0xbd, 0x61, 0x6a, 0x12, 0xd6, 0xb9, 0x1f, 0xdc, 0x83, 0xeb, 0xa0, 0x77,
	0xaa, 0x62, 0xdd, 0x5c, 0xc0, 0xcd, 0x43, 0xb1, 0xa7, 0xde, 0x55, 0xc4, 0xae, 0x42, 0xa4, 0x70,
	0xa4, 0xa6, 0xb5, 0xa2, 0x95, 0x19, 0xe7, 0x1a, 0x2c, 0x5b, 0x05, 0x56, 0xa2, 0x32, 0x65, 0x39,
	0x43, 0xec, 0x0b, 0xf4, 0xf6, 0x75, 0xfa, 0xbc, 0xa1, 0x1e, 0x64, 0x00, 0x24, 0x28, 0x75, 0x1d,
	0x52, 0x3e, 0x04, 0xee, 0xc3, 0x1d, 0x54, 0x8b, 0xa1, 0x7a, 0xbc, 0x01, 0x6f, 0x58, 0xa5, 0xbb,
	0xf1, 0xae, 0x02, 0x42, 0xc8, 0x91, 0xf4, 0x52, 0x69, 0x55, 0xad, 0x47, 0x7d, 0xa2, 0x65, 0x57,
	0x4e, 0xa6, 0x08, 0xc2, 0x7b, 0xa8, 0xef, 0x97, 0xd1, 0x05, 0x39, 0x4f, 0x55, 0xf1, 0xfe, 0x46,
	0xed, 0xa4, 0xc7, 0x5f, 0x6e, 0x9b, 0x33, 0x97, 0x35, 0x65, 0x65, 0xb6, 0x39, 0x0b, 0xcb, 0x16,
	0x83, 0x16, 0x54, 0x56, 0x42, 0xf4, 0x9b, 0xda, 0x2a, 0x65, 0x3a, 0x7b, 0x4b, 0x5b, 0xc6, 0x0b,
	0x82, 0xe8, 0xe9, 0x0c, 0xf5, 0x70, 0x82, 0xc7, 0x1b, 0xe8, 0xa6, 0xce, 0xc1, 0x32, 0xe4, 0x10,
	0x3d, 0x7e, 0xd1, 0xd3, 0x29, 0xf2, 0x4f, 0xf3, 0x6e, 0x48, 0x43, 0x9d, 0x87, 0x05, 0xcb, 0x00,
	0xad, 0x14, 0xf4, 0xf5, 0x7a, 0x20, 0x0c, 0x60, 0xd1, 0xdb, 0x97, 0x15, 0xe4, 0xe2, 0x22, 0x21,
	0xf8, 0x94, 0xc8, 0x75, 0x75, 0xf1, 0xee, 0x30, 0xef, 0x41, 0x04, 0xef, 0x5c, 0x56, 0xdc, 0x9a,
	0xc7, 0x2f, 0xba, 0xbb, 0xba, 0x43, 0x7c, 0x18, 0xfa, 0x00, 0x75, 0xe0, 0x5c, 0xb8, 0xac, 0x0c,
	0x8e, 0x52, 0x79, 0x5f, 0x40, 0x4b, 0xf1, 0x2e, 0xa4, 0x70, 0x82, 0xbb, 0xb1, 0x06, 0xb0, 0xf2,
	0x54, 0xad, 0x13, 0x9a, 0xef, 0x40, 0x9a, 0x76, 0xf0, 0x50, 0x95, 0x2e, 0x57, 0x03, 0xe8, 0x77,
	0x21, 0xf9, 0x4a, 0xb0, 0x1c, 0x37, 0x8a, 0xb1, 0xa7, 0x82, 0x21, 0x14, 0xe6, 0xc2, 0x3c, 0xf5,
	0xde, 0x65, 0x05, 0x0a, 0x1e, 0xbf, 0xda, 0x9a, 0x3b, 0x18, 0x08, 0xf3, 0x81, 0xb0, 0x46, 0xd7,
	0x17, 0x2f, 0x2b, 0xde, 0xa3, 0x3b, 0xc4, 0x97, 0xdb, 0x6e, 0xf4, 0xaa, 0xb6, 0xb0, 0xcc, 0x78,
	0x2f, 0x5e, 0x55, 0xc0, 0x01, 0x0b, 0xfd, 0x9c, 0x10, 0xea, 0xe1, 0x7c, 0x4a, 0xff, 0xbc, 0x81,
	0x6e, 0xa5, 0x6b, 0xfb, 0xaf, 0x2a, 0x83, 0x09, 0x31, 0xa9, 0xde, 0xff, 0x03, 0x57, 0x15, 0x2d,
	0x77, 0x57, 0x45, 0xec, 0x41, 0x58, 0xbe, 0x02, 0x2c, 0xd1, 0x97, 0xab, 0x63, 0xf1, 0xd0, 0x55,
	0xc5, 0x8a, 0xdd, 0xd5, 0x91, 0xfc, 0x92, 0x5a, 0xdf, 0x1d, 0x0c, 0x04, 0x2a, 0x1c, 0xc8, 0x2f,
	0x3e, 0xd1, 0x17, 0x97, 0x75, 0xf5, 0x97, 0x9f, 0x28, 0x16, 0x24, 0xb5, 0xdd, 0x3d, 0xbc, 0xa7,
	0xcf, 0x07, 0x1d, 0x49, 0x48, 0xe9, 0xc1, 0xaf, 0x3e, 0x51, 0x3d, 0x5c, 0x05, 0xfb, 0x1f, 0xff,
	0x40, 0x53, 0x56, 0xc6, 0xfb, 0x27, 0x3f, 0x50, 0x78, 0x87, 0x43, 0x37, 0xd3, 0xce, 0x4f, 0xd5,
	0xfa, 0xde, 0x0a, 0xde, 0x9f, 0x7c, 0xaa, 0x29, 0x2b, 0xe3, 0xfd, 0xfd, 0x4f, 0x7f, 0x6d, 0x60,
	0x3a, 0x01, 0x20, 0xf7, 0x86, 0x61, 0x88, 0x68, 0x03, 0x66, 0x77, 0x58, 0xec, 0xf2, 0xfa, 0x78,
	0x6a, 0x01, 0xdd, 0x0c, 0xac, 0x6e, 0x88, 0x17, 0x01, 0x8e, 0x1e, 0x03, 0x29, 0xfb, 0x7a, 0x28,
	0x18, 0xa0, 0x1a, 0xc8, 0xc3, 0x36, 0xce, 0xef, 0xa3, 0x1a, 0x99, 0xa7, 0x01, 0xad, 0xdc, 0x3a,
	0xe6, 0x4b, 0xdf, 0x59, 0xb0, 0x03, 0x4b, 0x98, 0x0f, 0xa3, 0xc9, 0x82, 0x5a, 0x40, 0xb7, 0x00,
	0x00, 0x9f, 0xba, 0x83, 0x3e, 0x0e, 0x71, 0xa3, 0x41, 0x0b, 0x7c, 0xee, 0xdd, 0x16, 0xee, 0x09,
	0x06, 0xfc, 0xdc, 0x96, 0x20, 0xd5, 0x40, 0x53, 0xc0, 0x0e, 0xdf, 0xf1, 0x4f, 0x87, 0x79, 0x21,
	0xc0, 0x41, 0xce, 0x1d, 0xca, 0x57, 0x4a, 0xba, 0x94, 0xc3, 0x7d, 0x76, 0x60, 0x71, 0x77, 0xf9,
	0xc5, 0x30, 0xff, 0x74, 0x18, 0x73, 0x85, 0x4f, 0x9d, 0xde, 0x00, 0x27, 0x6c, 0xa3, 0x0c, 0x90,
	0x03, 0x2e, 0xf5, 0xf7, 0xfa, 0x20, 0xcc, 0x1b, 0x98, 0xd5, 0xc0, 0xe6, 0x46, 0x5f, 0xa2, 0x0a,
	0xa1, 0xf0, 0x10, 0x56, 0x0f, 0x89, 0xb8, 0xff, 0xb8, 0x7a, 0x49, 0x1f, 0x06, 0xa6, 0x1d, 0x12,
	0xc3, 0xe6, 0x30, 0x31, 0x54, 0x40, 0x48, 0x0c, 0x04, 0x05, 0x3f, 0xe7, 0xa3, 0x16, 0xd0, 0xad,
	0xc0, 0x56, 0x72, 0x88, 0x90, 0xfc, 0xab, 0x98, 0x77, 0x3c, 0x87, 0xc9, 0xa1, 0x4e, 0x42, 0x68,
	0x90, 0x51, 0x0b, 0x90, 0x24, 0x21, 0x8d, 0xa7, 0x37, 0x90, 0xea, 0x2a, 0x28, 0x1b, 0x98, 0x76,
	0xa8, 0x7a, 0xf5, 0xc4, 0x3f, 0x94, 0xc5, 0x8f, 0x2b, 0x74, 0x87, 0x48, 0x6b, 0x9a, 0x9e, 0x18,
	0x98, 0x27, 0x81, 0x9d, 0xec, 0xc9, 0xa8, 0xcd, 0x09, 0xda, 0xe6, 0x04, 0x8d, 0xef, 0xc7, 0xcd,
	0x09, 0xda, 0xe6, 0xe8, 0x85, 0xa0, 0x59, 0x08, 0x69, 0x51, 0xdf, 0xc8, 0x6c, 0x02, 0x94, 0x66,
	0x03, 0x0b, 0xb3, 0xa5, 0x80, 0xdd, 0x1b, 0x08, 0x85, 0x44, 0xb2, 0x22, 0x8e, 0x25, 0xc1, 0x6f,
	0x02, 0xe8, 0x85, 0x81, 0x79, 0x00, 0x00, 0x4f, 0xe9, 0xd3, 0x53, 0x00, 0x98, 0x3c, 0x61, 0xb1,
	0xd3, 0x0d, 0x85, 0xc6, 0xbf, 0xbb, 0x43, 0x90, 0xea, 0xa5, 0x06, 0x00, 0x42, 0xa5, 0x4c, 0x05,
	0x00, 0x53, 0x28, 0x2c, 0x72, 0xbd, 0xbd, 0x98, 0x63, 0x28, 0xac, 0xe9, 0x1b, 0xbd, 0x08, 0x50,
	0x9a, 0x17, 0xd0, 0x9e, 0x50, 0xe2, 0xa5, 0xe0, 0x2e, 0xed, 0xdb, 0xad, 0xbc, 0x10, 0xf2, 0x06,
	0x03, 0x54, 0x23, 0x34, 0x4c, 0x28, 0x4c, 0x74, 0x45, 0x19, 0xd5, 0x47, 0xe4, 0xfc, 0x9a, 0xa0,
	0x26, 0x71, 0x29, 0x74, 0x66, 0x94, 0x89, 0x3c, 0x2b, 0xb3, 0x91, 0x99, 0xb4, 0x1e, 0x0a, 0x0b,
	0x5c, 0x98, 0xef, 0xde, 0x46, 0x59, 0xe8, 0xbb, 0x40, 0x6b, 0x28, 0x2c, 0xfa, 0xfb, 0x7c, 0x61,
	0xaf, 0xc2, 0xc5, 0x4a, 0x44, 0xc2, 0x2f, 0x95, 0xba, 0x00, 0x6a, 0x27, 0x14, 0x16, 0x7b, 0x85,
	0xa0, 0x5b, 0xe4, 0xc2, 0x61, 0x81, 0xb2, 0x91, 0x37, 0x5b, 0x39, 0x41, 0xec, 0x16, 0x82, 0x7d,
	0xbd, 0x94, 0x9d, 0xf4, 0x74, 0x2b, 0x27, 0x50, 0xcd, 0xe4, 0x37, 0x1f, 0xf0, 0x50, 0x2d, 0xcc,
	0xb4, 0x01, 0xd8, 0xb1, 0x42, 0x82, 0x38, 0x21, 0x83, 0x82, 0x05, 0xc3, 0x24, 0xec, 0xc0, 0x70,
	0x84, 0xcf, 0x78, 0xfe, 0xa1, 0x0c, 0xa8, 0x5f, 0xc1, 0xb0, 0xf8, 0x64, 0x1f, 0x2f, 0x6c, 0xa3,
	0x1a, 0x20, 0x76, 0xe1, 0xa3, 0xcf, 0x1b, 0x0a, 0x53, 0x8d, 0x0a, 0x31, 0x89, 0x7f, 0x8c, 0x2a,
	0x33, 0x64, 0x70, 0xaa, 0x09, 0xf5, 0x32, 0x18, 0x56, 0x10, 0x48, 0x99, 0x94, 0x17, 0x04, 0x23,
	0x94, 0x19, 0x49, 0x1e, 0x0c, 0xab, 0x88, 0xa0, 0x2c, 0x0a, 0x0f, 0x3c, 0x97, 0x53, 0x56, 0x08,
	0x31, 0xf8, 0x0c, 0xc5, 0x07, 0xcc, 0x1e, 0x03, 0x68, 0xd1, 0x7f, 0x18, 0x8e, 0xbe, 0x07, 0xb4,
	0x41, 0x4d, 0xea, 0x5e, 0x92, 0x0f, 0xbe, 0x51, 0x0b, 0xe8, 0x15, 0x60, 0x59, 0x45, 0xa9, 0x40,
	0x36, 0x6b, 0x28, 0x38, 0x73, 0x2c, 0xad, 0x2c, 0x46, 0xbb, 0x2f, 0x54, 0x03, 0xdd, 0x06, 0x16,
	0x55, 0x14, 0xf2, 0xc9, 0x28, 0xd5, 0xd8, 0x6f, 0x42, 0xdf, 0xfd, 0x7e, 0xf4, 0x7f, 0x03, 0x00,
	0x00, 0xff, 0xff, 0x7e, 0xd0, 0x5a, 0x4c, 0x3d, 0x5c, 0x00, 0x00,
}
