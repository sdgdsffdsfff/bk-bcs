// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: clustermanager.proto

package clustermanager

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// define the regex for a UUID once up-front
var _clustermanager_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on Cluster with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Cluster) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ClusterID

	// no validation rules for ClusterName

	// no validation rules for FederationClusterID

	// no validation rules for Provider

	// no validation rules for Region

	// no validation rules for VpcID

	// no validation rules for ProjectID

	// no validation rules for BusinessID

	// no validation rules for Environment

	// no validation rules for EngineType

	// no validation rules for IsExclusive

	// no validation rules for ClusterType

	// no validation rules for Labels

	// no validation rules for CreateTime

	// no validation rules for UpdateTime

	return nil
}

// ClusterValidationError is the validation error returned by Cluster.Validate
// if the designated constraints aren't met.
type ClusterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ClusterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ClusterValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ClusterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ClusterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ClusterValidationError) ErrorName() string { return "ClusterValidationError" }

// Error satisfies the builtin error interface
func (e ClusterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCluster.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ClusterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ClusterValidationError{}

// Validate checks the field values on ClusterCredential with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ClusterCredential) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ServerKey

	// no validation rules for ClusterID

	// no validation rules for ClientModule

	// no validation rules for ServerAddress

	// no validation rules for CaCertData

	// no validation rules for UserToken

	// no validation rules for ClusterDomain

	// no validation rules for ConnectMode

	// no validation rules for CreateTime

	// no validation rules for UpdateTime

	return nil
}

// ClusterCredentialValidationError is the validation error returned by
// ClusterCredential.Validate if the designated constraints aren't met.
type ClusterCredentialValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ClusterCredentialValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ClusterCredentialValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ClusterCredentialValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ClusterCredentialValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ClusterCredentialValidationError) ErrorName() string {
	return "ClusterCredentialValidationError"
}

// Error satisfies the builtin error interface
func (e ClusterCredentialValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sClusterCredential.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ClusterCredentialValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ClusterCredentialValidationError{}

// Validate checks the field values on Namespace with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Namespace) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	// no validation rules for FederationClusterID

	// no validation rules for ProjectID

	// no validation rules for BusinessID

	// no validation rules for Labels

	// no validation rules for MaxQuota

	// no validation rules for CreateTime

	// no validation rules for UpdateTime

	for idx, item := range m.GetQuotaList() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return NamespaceValidationError{
					field:  fmt.Sprintf("QuotaList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// NamespaceValidationError is the validation error returned by
// Namespace.Validate if the designated constraints aren't met.
type NamespaceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NamespaceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NamespaceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NamespaceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NamespaceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NamespaceValidationError) ErrorName() string { return "NamespaceValidationError" }

// Error satisfies the builtin error interface
func (e NamespaceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNamespace.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NamespaceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NamespaceValidationError{}

// Validate checks the field values on ResourceQuota with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ResourceQuota) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Namespace

	// no validation rules for FederationClusterID

	// no validation rules for ClusterID

	// no validation rules for ResourceQuota

	// no validation rules for Region

	// no validation rules for CreateTime

	// no validation rules for UpdateTime

	return nil
}

// ResourceQuotaValidationError is the validation error returned by
// ResourceQuota.Validate if the designated constraints aren't met.
type ResourceQuotaValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResourceQuotaValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResourceQuotaValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResourceQuotaValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResourceQuotaValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResourceQuotaValidationError) ErrorName() string { return "ResourceQuotaValidationError" }

// Error satisfies the builtin error interface
func (e ResourceQuotaValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResourceQuota.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResourceQuotaValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResourceQuotaValidationError{}

// Validate checks the field values on CreateClusterReq with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *CreateClusterReq) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetClusterID()); l < 2 || l > 100 {
		return CreateClusterReqValidationError{
			field:  "ClusterID",
			reason: "value length must be between 2 and 100 runes, inclusive",
		}
	}

	if !_CreateClusterReq_ClusterID_Pattern.MatchString(m.GetClusterID()) {
		return CreateClusterReqValidationError{
			field:  "ClusterID",
			reason: "value does not match regex pattern \"^[0-9a-zA-Z-_]+$\"",
		}
	}

	if l := utf8.RuneCountInString(m.GetClusterName()); l < 2 || l > 100 {
		return CreateClusterReqValidationError{
			field:  "ClusterName",
			reason: "value length must be between 2 and 100 runes, inclusive",
		}
	}

	if utf8.RuneCountInString(m.GetProvider()) > 100 {
		return CreateClusterReqValidationError{
			field:  "Provider",
			reason: "value length must be at most 100 runes",
		}
	}

	if l := utf8.RuneCountInString(m.GetRegion()); l < 2 || l > 100 {
		return CreateClusterReqValidationError{
			field:  "Region",
			reason: "value length must be between 2 and 100 runes, inclusive",
		}
	}

	if !_CreateClusterReq_Region_Pattern.MatchString(m.GetRegion()) {
		return CreateClusterReqValidationError{
			field:  "Region",
			reason: "value does not match regex pattern \"^[0-9a-zA-Z-_]+$\"",
		}
	}

	if utf8.RuneCountInString(m.GetVpcID()) > 100 {
		return CreateClusterReqValidationError{
			field:  "VpcID",
			reason: "value length must be at most 100 runes",
		}
	}

	if utf8.RuneCountInString(m.GetProjectID()) > 100 {
		return CreateClusterReqValidationError{
			field:  "ProjectID",
			reason: "value length must be at most 100 runes",
		}
	}

	if !_CreateClusterReq_ProjectID_Pattern.MatchString(m.GetProjectID()) {
		return CreateClusterReqValidationError{
			field:  "ProjectID",
			reason: "value does not match regex pattern \"^[0-9a-zA-Z-_]+$\"",
		}
	}

	if utf8.RuneCountInString(m.GetBusinessID()) > 100 {
		return CreateClusterReqValidationError{
			field:  "BusinessID",
			reason: "value length must be at most 100 runes",
		}
	}

	if !_CreateClusterReq_BusinessID_Pattern.MatchString(m.GetBusinessID()) {
		return CreateClusterReqValidationError{
			field:  "BusinessID",
			reason: "value does not match regex pattern \"^[0-9a-zA-Z-_]+$\"",
		}
	}

	if l := utf8.RuneCountInString(m.GetEnvironment()); l < 2 || l > 100 {
		return CreateClusterReqValidationError{
			field:  "Environment",
			reason: "value length must be between 2 and 100 runes, inclusive",
		}
	}

	if !_CreateClusterReq_Environment_Pattern.MatchString(m.GetEnvironment()) {
		return CreateClusterReqValidationError{
			field:  "Environment",
			reason: "value does not match regex pattern \"^[0-9a-zA-Z-_]+$\"",
		}
	}

	if l := utf8.RuneCountInString(m.GetEngineType()); l < 2 || l > 100 {
		return CreateClusterReqValidationError{
			field:  "EngineType",
			reason: "value length must be between 2 and 100 runes, inclusive",
		}
	}

	if !_CreateClusterReq_EngineType_Pattern.MatchString(m.GetEngineType()) {
		return CreateClusterReqValidationError{
			field:  "EngineType",
			reason: "value does not match regex pattern \"^[0-9a-zA-Z-_]+$\"",
		}
	}

	// no validation rules for IsExclusive

	if l := utf8.RuneCountInString(m.GetClusterType()); l < 2 || l > 100 {
		return CreateClusterReqValidationError{
			field:  "ClusterType",
			reason: "value length must be between 2 and 100 runes, inclusive",
		}
	}

	if !_CreateClusterReq_ClusterType_Pattern.MatchString(m.GetClusterType()) {
		return CreateClusterReqValidationError{
			field:  "ClusterType",
			reason: "value does not match regex pattern \"^[0-9a-zA-Z-_]+$\"",
		}
	}

	if len(m.GetLabels()) > 20 {
		return CreateClusterReqValidationError{
			field:  "Labels",
			reason: "value must contain no more than 20 pair(s)",
		}
	}

	if len(m.GetOperators()) > 100 {
		return CreateClusterReqValidationError{
			field:  "Operators",
			reason: "value must contain no more than 100 item(s)",
		}
	}

	return nil
}

// CreateClusterReqValidationError is the validation error returned by
// CreateClusterReq.Validate if the designated constraints aren't met.
type CreateClusterReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateClusterReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateClusterReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateClusterReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateClusterReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateClusterReqValidationError) ErrorName() string { return "CreateClusterReqValidationError" }

// Error satisfies the builtin error interface
func (e CreateClusterReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateClusterReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateClusterReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateClusterReqValidationError{}

var _CreateClusterReq_ClusterID_Pattern = regexp.MustCompile("^[0-9a-zA-Z-_]+$")

var _CreateClusterReq_Region_Pattern = regexp.MustCompile("^[0-9a-zA-Z-_]+$")

var _CreateClusterReq_ProjectID_Pattern = regexp.MustCompile("^[0-9a-zA-Z-_]+$")

var _CreateClusterReq_BusinessID_Pattern = regexp.MustCompile("^[0-9a-zA-Z-_]+$")

var _CreateClusterReq_Environment_Pattern = regexp.MustCompile("^[0-9a-zA-Z-_]+$")

var _CreateClusterReq_EngineType_Pattern = regexp.MustCompile("^[0-9a-zA-Z-_]+$")

var _CreateClusterReq_ClusterType_Pattern = regexp.MustCompile("^[0-9a-zA-Z-_]+$")

// Validate checks the field values on CreateClusterResp with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *CreateClusterResp) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Result

	return nil
}

// CreateClusterRespValidationError is the validation error returned by
// CreateClusterResp.Validate if the designated constraints aren't met.
type CreateClusterRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateClusterRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateClusterRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateClusterRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateClusterRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateClusterRespValidationError) ErrorName() string {
	return "CreateClusterRespValidationError"
}

// Error satisfies the builtin error interface
func (e CreateClusterRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateClusterResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateClusterRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateClusterRespValidationError{}

// Validate checks the field values on DeleteClusterReq with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *DeleteClusterReq) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetClusterID()); l < 2 || l > 100 {
		return DeleteClusterReqValidationError{
			field:  "ClusterID",
			reason: "value length must be between 2 and 100 runes, inclusive",
		}
	}

	if !_DeleteClusterReq_ClusterID_Pattern.MatchString(m.GetClusterID()) {
		return DeleteClusterReqValidationError{
			field:  "ClusterID",
			reason: "value does not match regex pattern \"^[0-9a-zA-Z-_]+$\"",
		}
	}

	// no validation rules for IsForced

	return nil
}

// DeleteClusterReqValidationError is the validation error returned by
// DeleteClusterReq.Validate if the designated constraints aren't met.
type DeleteClusterReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteClusterReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteClusterReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteClusterReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteClusterReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteClusterReqValidationError) ErrorName() string { return "DeleteClusterReqValidationError" }

// Error satisfies the builtin error interface
func (e DeleteClusterReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteClusterReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteClusterReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteClusterReqValidationError{}

var _DeleteClusterReq_ClusterID_Pattern = regexp.MustCompile("^[0-9a-zA-Z-_]+$")

// Validate checks the field values on DeleteClusterResp with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *DeleteClusterResp) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Result

	return nil
}

// DeleteClusterRespValidationError is the validation error returned by
// DeleteClusterResp.Validate if the designated constraints aren't met.
type DeleteClusterRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteClusterRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteClusterRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteClusterRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteClusterRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteClusterRespValidationError) ErrorName() string {
	return "DeleteClusterRespValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteClusterRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteClusterResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteClusterRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteClusterRespValidationError{}

// Validate checks the field values on UpdateClusterReq with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *UpdateClusterReq) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetClusterID()); l < 2 || l > 100 {
		return UpdateClusterReqValidationError{
			field:  "ClusterID",
			reason: "value length must be between 2 and 100 runes, inclusive",
		}
	}

	if !_UpdateClusterReq_ClusterID_Pattern.MatchString(m.GetClusterID()) {
		return UpdateClusterReqValidationError{
			field:  "ClusterID",
			reason: "value does not match regex pattern \"^[0-9a-zA-Z-_]+$\"",
		}
	}

	if l := utf8.RuneCountInString(m.GetClusterName()); l < 2 || l > 100 {
		return UpdateClusterReqValidationError{
			field:  "ClusterName",
			reason: "value length must be between 2 and 100 runes, inclusive",
		}
	}

	if utf8.RuneCountInString(m.GetProvider()) > 100 {
		return UpdateClusterReqValidationError{
			field:  "Provider",
			reason: "value length must be at most 100 runes",
		}
	}

	if l := utf8.RuneCountInString(m.GetRegion()); l < 2 || l > 100 {
		return UpdateClusterReqValidationError{
			field:  "Region",
			reason: "value length must be between 2 and 100 runes, inclusive",
		}
	}

	if !_UpdateClusterReq_Region_Pattern.MatchString(m.GetRegion()) {
		return UpdateClusterReqValidationError{
			field:  "Region",
			reason: "value does not match regex pattern \"^[0-9a-zA-Z-_]+$\"",
		}
	}

	if utf8.RuneCountInString(m.GetVpcID()) > 100 {
		return UpdateClusterReqValidationError{
			field:  "VpcID",
			reason: "value length must be at most 100 runes",
		}
	}

	if utf8.RuneCountInString(m.GetProjectID()) > 100 {
		return UpdateClusterReqValidationError{
			field:  "ProjectID",
			reason: "value length must be at most 100 runes",
		}
	}

	if !_UpdateClusterReq_ProjectID_Pattern.MatchString(m.GetProjectID()) {
		return UpdateClusterReqValidationError{
			field:  "ProjectID",
			reason: "value does not match regex pattern \"^[0-9a-zA-Z-_]+$\"",
		}
	}

	if utf8.RuneCountInString(m.GetBusinessID()) > 100 {
		return UpdateClusterReqValidationError{
			field:  "BusinessID",
			reason: "value length must be at most 100 runes",
		}
	}

	if !_UpdateClusterReq_BusinessID_Pattern.MatchString(m.GetBusinessID()) {
		return UpdateClusterReqValidationError{
			field:  "BusinessID",
			reason: "value does not match regex pattern \"^[0-9a-zA-Z-_]+$\"",
		}
	}

	if l := utf8.RuneCountInString(m.GetEnvironment()); l < 2 || l > 100 {
		return UpdateClusterReqValidationError{
			field:  "Environment",
			reason: "value length must be between 2 and 100 runes, inclusive",
		}
	}

	if !_UpdateClusterReq_Environment_Pattern.MatchString(m.GetEnvironment()) {
		return UpdateClusterReqValidationError{
			field:  "Environment",
			reason: "value does not match regex pattern \"^[0-9a-zA-Z-_]+$\"",
		}
	}

	if l := utf8.RuneCountInString(m.GetEngineType()); l < 2 || l > 100 {
		return UpdateClusterReqValidationError{
			field:  "EngineType",
			reason: "value length must be between 2 and 100 runes, inclusive",
		}
	}

	if !_UpdateClusterReq_EngineType_Pattern.MatchString(m.GetEngineType()) {
		return UpdateClusterReqValidationError{
			field:  "EngineType",
			reason: "value does not match regex pattern \"^[0-9a-zA-Z-_]+$\"",
		}
	}

	// no validation rules for IsExclusive

	if l := utf8.RuneCountInString(m.GetClusterType()); l < 2 || l > 100 {
		return UpdateClusterReqValidationError{
			field:  "ClusterType",
			reason: "value length must be between 2 and 100 runes, inclusive",
		}
	}

	if !_UpdateClusterReq_ClusterType_Pattern.MatchString(m.GetClusterType()) {
		return UpdateClusterReqValidationError{
			field:  "ClusterType",
			reason: "value does not match regex pattern \"^[0-9a-zA-Z-_]+$\"",
		}
	}

	if len(m.GetLabels()) > 20 {
		return UpdateClusterReqValidationError{
			field:  "Labels",
			reason: "value must contain no more than 20 pair(s)",
		}
	}

	if len(m.GetOperators()) > 100 {
		return UpdateClusterReqValidationError{
			field:  "Operators",
			reason: "value must contain no more than 100 item(s)",
		}
	}

	return nil
}

// UpdateClusterReqValidationError is the validation error returned by
// UpdateClusterReq.Validate if the designated constraints aren't met.
type UpdateClusterReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateClusterReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateClusterReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateClusterReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateClusterReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateClusterReqValidationError) ErrorName() string { return "UpdateClusterReqValidationError" }

// Error satisfies the builtin error interface
func (e UpdateClusterReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateClusterReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateClusterReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateClusterReqValidationError{}

var _UpdateClusterReq_ClusterID_Pattern = regexp.MustCompile("^[0-9a-zA-Z-_]+$")

var _UpdateClusterReq_Region_Pattern = regexp.MustCompile("^[0-9a-zA-Z-_]+$")

var _UpdateClusterReq_ProjectID_Pattern = regexp.MustCompile("^[0-9a-zA-Z-_]+$")

var _UpdateClusterReq_BusinessID_Pattern = regexp.MustCompile("^[0-9a-zA-Z-_]+$")

var _UpdateClusterReq_Environment_Pattern = regexp.MustCompile("^[0-9a-zA-Z-_]+$")

var _UpdateClusterReq_EngineType_Pattern = regexp.MustCompile("^[0-9a-zA-Z-_]+$")

var _UpdateClusterReq_ClusterType_Pattern = regexp.MustCompile("^[0-9a-zA-Z-_]+$")

// Validate checks the field values on UpdateClusterResp with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *UpdateClusterResp) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Result

	return nil
}

// UpdateClusterRespValidationError is the validation error returned by
// UpdateClusterResp.Validate if the designated constraints aren't met.
type UpdateClusterRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateClusterRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateClusterRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateClusterRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateClusterRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateClusterRespValidationError) ErrorName() string {
	return "UpdateClusterRespValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateClusterRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateClusterResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateClusterRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateClusterRespValidationError{}

// Validate checks the field values on GetClusterReq with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *GetClusterReq) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetClusterID()); l < 2 || l > 100 {
		return GetClusterReqValidationError{
			field:  "ClusterID",
			reason: "value length must be between 2 and 100 runes, inclusive",
		}
	}

	if !_GetClusterReq_ClusterID_Pattern.MatchString(m.GetClusterID()) {
		return GetClusterReqValidationError{
			field:  "ClusterID",
			reason: "value does not match regex pattern \"^[0-9a-zA-Z-_]+$\"",
		}
	}

	return nil
}

// GetClusterReqValidationError is the validation error returned by
// GetClusterReq.Validate if the designated constraints aren't met.
type GetClusterReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetClusterReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetClusterReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetClusterReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetClusterReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetClusterReqValidationError) ErrorName() string { return "GetClusterReqValidationError" }

// Error satisfies the builtin error interface
func (e GetClusterReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetClusterReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetClusterReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetClusterReqValidationError{}

var _GetClusterReq_ClusterID_Pattern = regexp.MustCompile("^[0-9a-zA-Z-_]+$")

// Validate checks the field values on GetClusterResp with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *GetClusterResp) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Result

	if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetClusterRespValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetClusterRespValidationError is the validation error returned by
// GetClusterResp.Validate if the designated constraints aren't met.
type GetClusterRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetClusterRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetClusterRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetClusterRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetClusterRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetClusterRespValidationError) ErrorName() string { return "GetClusterRespValidationError" }

// Error satisfies the builtin error interface
func (e GetClusterRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetClusterResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetClusterRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetClusterRespValidationError{}

// Validate checks the field values on ListClusterReq with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ListClusterReq) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetClusterName()) > 100 {
		return ListClusterReqValidationError{
			field:  "ClusterName",
			reason: "value length must be at most 100 runes",
		}
	}

	// no validation rules for Provider

	if utf8.RuneCountInString(m.GetRegion()) > 100 {
		return ListClusterReqValidationError{
			field:  "Region",
			reason: "value length must be at most 100 runes",
		}
	}

	if utf8.RuneCountInString(m.GetVpcID()) > 100 {
		return ListClusterReqValidationError{
			field:  "VpcID",
			reason: "value length must be at most 100 runes",
		}
	}

	if utf8.RuneCountInString(m.GetProjectID()) > 100 {
		return ListClusterReqValidationError{
			field:  "ProjectID",
			reason: "value length must be at most 100 runes",
		}
	}

	if utf8.RuneCountInString(m.GetBusinessID()) > 100 {
		return ListClusterReqValidationError{
			field:  "BusinessID",
			reason: "value length must be at most 100 runes",
		}
	}

	if utf8.RuneCountInString(m.GetEnvironment()) > 100 {
		return ListClusterReqValidationError{
			field:  "Environment",
			reason: "value length must be at most 100 runes",
		}
	}

	if utf8.RuneCountInString(m.GetEngineType()) > 100 {
		return ListClusterReqValidationError{
			field:  "EngineType",
			reason: "value length must be at most 100 runes",
		}
	}

	if m.GetOffset() < 0 {
		return ListClusterReqValidationError{
			field:  "Offset",
			reason: "value must be greater than or equal to 0",
		}
	}

	if m.GetLimit() > 1000 {
		return ListClusterReqValidationError{
			field:  "Limit",
			reason: "value must be less than or equal to 1000",
		}
	}

	return nil
}

// ListClusterReqValidationError is the validation error returned by
// ListClusterReq.Validate if the designated constraints aren't met.
type ListClusterReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListClusterReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListClusterReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListClusterReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListClusterReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListClusterReqValidationError) ErrorName() string { return "ListClusterReqValidationError" }

// Error satisfies the builtin error interface
func (e ListClusterReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListClusterReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListClusterReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListClusterReqValidationError{}

// Validate checks the field values on ListClusterResp with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ListClusterResp) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Result

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListClusterRespValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListClusterRespValidationError is the validation error returned by
// ListClusterResp.Validate if the designated constraints aren't met.
type ListClusterRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListClusterRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListClusterRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListClusterRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListClusterRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListClusterRespValidationError) ErrorName() string { return "ListClusterRespValidationError" }

// Error satisfies the builtin error interface
func (e ListClusterRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListClusterResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListClusterRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListClusterRespValidationError{}

// Validate checks the field values on GetClusterCredentialReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetClusterCredentialReq) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetServerKey()); l < 2 || l > 100 {
		return GetClusterCredentialReqValidationError{
			field:  "ServerKey",
			reason: "value length must be between 2 and 100 runes, inclusive",
		}
	}

	return nil
}

// GetClusterCredentialReqValidationError is the validation error returned by
// GetClusterCredentialReq.Validate if the designated constraints aren't met.
type GetClusterCredentialReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetClusterCredentialReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetClusterCredentialReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetClusterCredentialReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetClusterCredentialReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetClusterCredentialReqValidationError) ErrorName() string {
	return "GetClusterCredentialReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetClusterCredentialReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetClusterCredentialReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetClusterCredentialReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetClusterCredentialReqValidationError{}

// Validate checks the field values on GetClusterCredentialResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetClusterCredentialResp) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Result

	if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetClusterCredentialRespValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetClusterCredentialRespValidationError is the validation error returned by
// GetClusterCredentialResp.Validate if the designated constraints aren't met.
type GetClusterCredentialRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetClusterCredentialRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetClusterCredentialRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetClusterCredentialRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetClusterCredentialRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetClusterCredentialRespValidationError) ErrorName() string {
	return "GetClusterCredentialRespValidationError"
}

// Error satisfies the builtin error interface
func (e GetClusterCredentialRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetClusterCredentialResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetClusterCredentialRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetClusterCredentialRespValidationError{}

// Validate checks the field values on UpdateClusterCredentialReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateClusterCredentialReq) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetServerKey()); l < 2 || l > 100 {
		return UpdateClusterCredentialReqValidationError{
			field:  "ServerKey",
			reason: "value length must be between 2 and 100 runes, inclusive",
		}
	}

	if l := utf8.RuneCountInString(m.GetClusterID()); l < 2 || l > 100 {
		return UpdateClusterCredentialReqValidationError{
			field:  "ClusterID",
			reason: "value length must be between 2 and 100 runes, inclusive",
		}
	}

	if l := utf8.RuneCountInString(m.GetClientModule()); l < 2 || l > 100 {
		return UpdateClusterCredentialReqValidationError{
			field:  "ClientModule",
			reason: "value length must be between 2 and 100 runes, inclusive",
		}
	}

	if l := utf8.RuneCountInString(m.GetServerAddress()); l < 2 || l > 2048 {
		return UpdateClusterCredentialReqValidationError{
			field:  "ServerAddress",
			reason: "value length must be between 2 and 2048 runes, inclusive",
		}
	}

	if utf8.RuneCountInString(m.GetCaCertData()) > 4096 {
		return UpdateClusterCredentialReqValidationError{
			field:  "CaCertData",
			reason: "value length must be at most 4096 runes",
		}
	}

	if utf8.RuneCountInString(m.GetUserToken()) > 2048 {
		return UpdateClusterCredentialReqValidationError{
			field:  "UserToken",
			reason: "value length must be at most 2048 runes",
		}
	}

	if utf8.RuneCountInString(m.GetClusterDomain()) > 2048 {
		return UpdateClusterCredentialReqValidationError{
			field:  "ClusterDomain",
			reason: "value length must be at most 2048 runes",
		}
	}

	return nil
}

// UpdateClusterCredentialReqValidationError is the validation error returned
// by UpdateClusterCredentialReq.Validate if the designated constraints aren't met.
type UpdateClusterCredentialReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateClusterCredentialReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateClusterCredentialReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateClusterCredentialReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateClusterCredentialReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateClusterCredentialReqValidationError) ErrorName() string {
	return "UpdateClusterCredentialReqValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateClusterCredentialReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateClusterCredentialReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateClusterCredentialReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateClusterCredentialReqValidationError{}

// Validate checks the field values on UpdateClusterCredentialResp with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateClusterCredentialResp) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Result

	return nil
}

// UpdateClusterCredentialRespValidationError is the validation error returned
// by UpdateClusterCredentialResp.Validate if the designated constraints
// aren't met.
type UpdateClusterCredentialRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateClusterCredentialRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateClusterCredentialRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateClusterCredentialRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateClusterCredentialRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateClusterCredentialRespValidationError) ErrorName() string {
	return "UpdateClusterCredentialRespValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateClusterCredentialRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateClusterCredentialResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateClusterCredentialRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateClusterCredentialRespValidationError{}

// Validate checks the field values on DeleteClusterCredentialReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteClusterCredentialReq) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetServerKey()); l < 2 || l > 100 {
		return DeleteClusterCredentialReqValidationError{
			field:  "ServerKey",
			reason: "value length must be between 2 and 100 runes, inclusive",
		}
	}

	return nil
}

// DeleteClusterCredentialReqValidationError is the validation error returned
// by DeleteClusterCredentialReq.Validate if the designated constraints aren't met.
type DeleteClusterCredentialReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteClusterCredentialReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteClusterCredentialReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteClusterCredentialReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteClusterCredentialReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteClusterCredentialReqValidationError) ErrorName() string {
	return "DeleteClusterCredentialReqValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteClusterCredentialReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteClusterCredentialReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteClusterCredentialReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteClusterCredentialReqValidationError{}

// Validate checks the field values on DeleteClusterCredentialResp with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteClusterCredentialResp) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Result

	return nil
}

// DeleteClusterCredentialRespValidationError is the validation error returned
// by DeleteClusterCredentialResp.Validate if the designated constraints
// aren't met.
type DeleteClusterCredentialRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteClusterCredentialRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteClusterCredentialRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteClusterCredentialRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteClusterCredentialRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteClusterCredentialRespValidationError) ErrorName() string {
	return "DeleteClusterCredentialRespValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteClusterCredentialRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteClusterCredentialResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteClusterCredentialRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteClusterCredentialRespValidationError{}

// Validate checks the field values on ListClusterCredentialReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListClusterCredentialReq) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetServerKey()) > 100 {
		return ListClusterCredentialReqValidationError{
			field:  "ServerKey",
			reason: "value length must be at most 100 runes",
		}
	}

	if utf8.RuneCountInString(m.GetClusterID()) > 100 {
		return ListClusterCredentialReqValidationError{
			field:  "ClusterID",
			reason: "value length must be at most 100 runes",
		}
	}

	if utf8.RuneCountInString(m.GetClientMode()) > 100 {
		return ListClusterCredentialReqValidationError{
			field:  "ClientMode",
			reason: "value length must be at most 100 runes",
		}
	}

	if utf8.RuneCountInString(m.GetConnectMode()) > 100 {
		return ListClusterCredentialReqValidationError{
			field:  "ConnectMode",
			reason: "value length must be at most 100 runes",
		}
	}

	if m.GetOffset() < 0 {
		return ListClusterCredentialReqValidationError{
			field:  "Offset",
			reason: "value must be greater than or equal to 0",
		}
	}

	if m.GetLimit() > 1000 {
		return ListClusterCredentialReqValidationError{
			field:  "Limit",
			reason: "value must be less than or equal to 1000",
		}
	}

	return nil
}

// ListClusterCredentialReqValidationError is the validation error returned by
// ListClusterCredentialReq.Validate if the designated constraints aren't met.
type ListClusterCredentialReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListClusterCredentialReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListClusterCredentialReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListClusterCredentialReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListClusterCredentialReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListClusterCredentialReqValidationError) ErrorName() string {
	return "ListClusterCredentialReqValidationError"
}

// Error satisfies the builtin error interface
func (e ListClusterCredentialReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListClusterCredentialReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListClusterCredentialReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListClusterCredentialReqValidationError{}

// Validate checks the field values on ListClusterCredentialResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListClusterCredentialResp) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Result

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListClusterCredentialRespValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListClusterCredentialRespValidationError is the validation error returned by
// ListClusterCredentialResp.Validate if the designated constraints aren't met.
type ListClusterCredentialRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListClusterCredentialRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListClusterCredentialRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListClusterCredentialRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListClusterCredentialRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListClusterCredentialRespValidationError) ErrorName() string {
	return "ListClusterCredentialRespValidationError"
}

// Error satisfies the builtin error interface
func (e ListClusterCredentialRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListClusterCredentialResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListClusterCredentialRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListClusterCredentialRespValidationError{}

// Validate checks the field values on InitFederationClusterReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *InitFederationClusterReq) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// InitFederationClusterReqValidationError is the validation error returned by
// InitFederationClusterReq.Validate if the designated constraints aren't met.
type InitFederationClusterReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InitFederationClusterReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InitFederationClusterReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InitFederationClusterReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InitFederationClusterReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InitFederationClusterReqValidationError) ErrorName() string {
	return "InitFederationClusterReqValidationError"
}

// Error satisfies the builtin error interface
func (e InitFederationClusterReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInitFederationClusterReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InitFederationClusterReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InitFederationClusterReqValidationError{}

// Validate checks the field values on InitFederationClusterResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *InitFederationClusterResp) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// InitFederationClusterRespValidationError is the validation error returned by
// InitFederationClusterResp.Validate if the designated constraints aren't met.
type InitFederationClusterRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InitFederationClusterRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InitFederationClusterRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InitFederationClusterRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InitFederationClusterRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InitFederationClusterRespValidationError) ErrorName() string {
	return "InitFederationClusterRespValidationError"
}

// Error satisfies the builtin error interface
func (e InitFederationClusterRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInitFederationClusterResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InitFederationClusterRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InitFederationClusterRespValidationError{}

// Validate checks the field values on AddFederatedClusterReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *AddFederatedClusterReq) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for FederationClusterID

	// no validation rules for ClusterID

	return nil
}

// AddFederatedClusterReqValidationError is the validation error returned by
// AddFederatedClusterReq.Validate if the designated constraints aren't met.
type AddFederatedClusterReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddFederatedClusterReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddFederatedClusterReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddFederatedClusterReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddFederatedClusterReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddFederatedClusterReqValidationError) ErrorName() string {
	return "AddFederatedClusterReqValidationError"
}

// Error satisfies the builtin error interface
func (e AddFederatedClusterReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddFederatedClusterReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddFederatedClusterReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddFederatedClusterReqValidationError{}

// Validate checks the field values on AddFederatedClusterResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *AddFederatedClusterResp) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Result

	return nil
}

// AddFederatedClusterRespValidationError is the validation error returned by
// AddFederatedClusterResp.Validate if the designated constraints aren't met.
type AddFederatedClusterRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddFederatedClusterRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddFederatedClusterRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddFederatedClusterRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddFederatedClusterRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddFederatedClusterRespValidationError) ErrorName() string {
	return "AddFederatedClusterRespValidationError"
}

// Error satisfies the builtin error interface
func (e AddFederatedClusterRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddFederatedClusterResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddFederatedClusterRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddFederatedClusterRespValidationError{}

// Validate checks the field values on CreateNamespaceReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateNamespaceReq) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetName()); l < 2 || l > 100 {
		return CreateNamespaceReqValidationError{
			field:  "Name",
			reason: "value length must be between 2 and 100 runes, inclusive",
		}
	}

	if utf8.RuneCountInString(m.GetFederationClusterID()) > 100 {
		return CreateNamespaceReqValidationError{
			field:  "FederationClusterID",
			reason: "value length must be at most 100 runes",
		}
	}

	if utf8.RuneCountInString(m.GetProjectID()) > 100 {
		return CreateNamespaceReqValidationError{
			field:  "ProjectID",
			reason: "value length must be at most 100 runes",
		}
	}

	if utf8.RuneCountInString(m.GetBusinessID()) > 100 {
		return CreateNamespaceReqValidationError{
			field:  "BusinessID",
			reason: "value length must be at most 100 runes",
		}
	}

	// no validation rules for Labels

	// no validation rules for MaxQuota

	return nil
}

// CreateNamespaceReqValidationError is the validation error returned by
// CreateNamespaceReq.Validate if the designated constraints aren't met.
type CreateNamespaceReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateNamespaceReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateNamespaceReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateNamespaceReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateNamespaceReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateNamespaceReqValidationError) ErrorName() string {
	return "CreateNamespaceReqValidationError"
}

// Error satisfies the builtin error interface
func (e CreateNamespaceReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateNamespaceReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateNamespaceReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateNamespaceReqValidationError{}

// Validate checks the field values on CreateNamespaceResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateNamespaceResp) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Result

	return nil
}

// CreateNamespaceRespValidationError is the validation error returned by
// CreateNamespaceResp.Validate if the designated constraints aren't met.
type CreateNamespaceRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateNamespaceRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateNamespaceRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateNamespaceRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateNamespaceRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateNamespaceRespValidationError) ErrorName() string {
	return "CreateNamespaceRespValidationError"
}

// Error satisfies the builtin error interface
func (e CreateNamespaceRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateNamespaceResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateNamespaceRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateNamespaceRespValidationError{}

// Validate checks the field values on DeleteNamespaceReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteNamespaceReq) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetName()); l < 2 || l > 100 {
		return DeleteNamespaceReqValidationError{
			field:  "Name",
			reason: "value length must be between 2 and 100 runes, inclusive",
		}
	}

	if utf8.RuneCountInString(m.GetFederationClusterID()) > 100 {
		return DeleteNamespaceReqValidationError{
			field:  "FederationClusterID",
			reason: "value length must be at most 100 runes",
		}
	}

	// no validation rules for IsForced

	return nil
}

// DeleteNamespaceReqValidationError is the validation error returned by
// DeleteNamespaceReq.Validate if the designated constraints aren't met.
type DeleteNamespaceReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteNamespaceReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteNamespaceReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteNamespaceReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteNamespaceReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteNamespaceReqValidationError) ErrorName() string {
	return "DeleteNamespaceReqValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteNamespaceReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteNamespaceReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteNamespaceReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteNamespaceReqValidationError{}

// Validate checks the field values on DeleteNamespaceResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteNamespaceResp) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Result

	return nil
}

// DeleteNamespaceRespValidationError is the validation error returned by
// DeleteNamespaceResp.Validate if the designated constraints aren't met.
type DeleteNamespaceRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteNamespaceRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteNamespaceRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteNamespaceRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteNamespaceRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteNamespaceRespValidationError) ErrorName() string {
	return "DeleteNamespaceRespValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteNamespaceRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteNamespaceResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteNamespaceRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteNamespaceRespValidationError{}

// Validate checks the field values on UpdateNamespaceReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateNamespaceReq) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetName()); l < 2 || l > 100 {
		return UpdateNamespaceReqValidationError{
			field:  "Name",
			reason: "value length must be between 2 and 100 runes, inclusive",
		}
	}

	if utf8.RuneCountInString(m.GetFederationClusterID()) > 100 {
		return UpdateNamespaceReqValidationError{
			field:  "FederationClusterID",
			reason: "value length must be at most 100 runes",
		}
	}

	// no validation rules for Labels

	// no validation rules for MaxQuota

	return nil
}

// UpdateNamespaceReqValidationError is the validation error returned by
// UpdateNamespaceReq.Validate if the designated constraints aren't met.
type UpdateNamespaceReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateNamespaceReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateNamespaceReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateNamespaceReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateNamespaceReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateNamespaceReqValidationError) ErrorName() string {
	return "UpdateNamespaceReqValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateNamespaceReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateNamespaceReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateNamespaceReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateNamespaceReqValidationError{}

// Validate checks the field values on UpdateNamespaceResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateNamespaceResp) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Result

	return nil
}

// UpdateNamespaceRespValidationError is the validation error returned by
// UpdateNamespaceResp.Validate if the designated constraints aren't met.
type UpdateNamespaceRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateNamespaceRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateNamespaceRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateNamespaceRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateNamespaceRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateNamespaceRespValidationError) ErrorName() string {
	return "UpdateNamespaceRespValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateNamespaceRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateNamespaceResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateNamespaceRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateNamespaceRespValidationError{}

// Validate checks the field values on GetNamespaceReq with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *GetNamespaceReq) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetName()); l < 2 || l > 100 {
		return GetNamespaceReqValidationError{
			field:  "Name",
			reason: "value length must be between 2 and 100 runes, inclusive",
		}
	}

	if utf8.RuneCountInString(m.GetFederationClusterID()) > 100 {
		return GetNamespaceReqValidationError{
			field:  "FederationClusterID",
			reason: "value length must be at most 100 runes",
		}
	}

	return nil
}

// GetNamespaceReqValidationError is the validation error returned by
// GetNamespaceReq.Validate if the designated constraints aren't met.
type GetNamespaceReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetNamespaceReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetNamespaceReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetNamespaceReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetNamespaceReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetNamespaceReqValidationError) ErrorName() string { return "GetNamespaceReqValidationError" }

// Error satisfies the builtin error interface
func (e GetNamespaceReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetNamespaceReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetNamespaceReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetNamespaceReqValidationError{}

// Validate checks the field values on GetNamespaceResp with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *GetNamespaceResp) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Result

	if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetNamespaceRespValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetNamespaceRespValidationError is the validation error returned by
// GetNamespaceResp.Validate if the designated constraints aren't met.
type GetNamespaceRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetNamespaceRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetNamespaceRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetNamespaceRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetNamespaceRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetNamespaceRespValidationError) ErrorName() string { return "GetNamespaceRespValidationError" }

// Error satisfies the builtin error interface
func (e GetNamespaceRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetNamespaceResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetNamespaceRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetNamespaceRespValidationError{}

// Validate checks the field values on ListNamespaceReq with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ListNamespaceReq) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetFederationClusterID()) > 100 {
		return ListNamespaceReqValidationError{
			field:  "FederationClusterID",
			reason: "value length must be at most 100 runes",
		}
	}

	if utf8.RuneCountInString(m.GetProjectID()) > 100 {
		return ListNamespaceReqValidationError{
			field:  "ProjectID",
			reason: "value length must be at most 100 runes",
		}
	}

	if utf8.RuneCountInString(m.GetBusinessID()) > 100 {
		return ListNamespaceReqValidationError{
			field:  "BusinessID",
			reason: "value length must be at most 100 runes",
		}
	}

	// no validation rules for Offset

	// no validation rules for Limit

	return nil
}

// ListNamespaceReqValidationError is the validation error returned by
// ListNamespaceReq.Validate if the designated constraints aren't met.
type ListNamespaceReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListNamespaceReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListNamespaceReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListNamespaceReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListNamespaceReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListNamespaceReqValidationError) ErrorName() string { return "ListNamespaceReqValidationError" }

// Error satisfies the builtin error interface
func (e ListNamespaceReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListNamespaceReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListNamespaceReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListNamespaceReqValidationError{}

// Validate checks the field values on ListNamespaceResp with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ListNamespaceResp) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Result

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListNamespaceRespValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListNamespaceRespValidationError is the validation error returned by
// ListNamespaceResp.Validate if the designated constraints aren't met.
type ListNamespaceRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListNamespaceRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListNamespaceRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListNamespaceRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListNamespaceRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListNamespaceRespValidationError) ErrorName() string {
	return "ListNamespaceRespValidationError"
}

// Error satisfies the builtin error interface
func (e ListNamespaceRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListNamespaceResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListNamespaceRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListNamespaceRespValidationError{}

// Validate checks the field values on CreateNamespaceQuotaReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateNamespaceQuotaReq) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetNamespace()); l < 2 || l > 100 {
		return CreateNamespaceQuotaReqValidationError{
			field:  "Namespace",
			reason: "value length must be between 2 and 100 runes, inclusive",
		}
	}

	if utf8.RuneCountInString(m.GetFederationClusterID()) > 100 {
		return CreateNamespaceQuotaReqValidationError{
			field:  "FederationClusterID",
			reason: "value length must be at most 100 runes",
		}
	}

	if utf8.RuneCountInString(m.GetClusterID()) > 100 {
		return CreateNamespaceQuotaReqValidationError{
			field:  "ClusterID",
			reason: "value length must be at most 100 runes",
		}
	}

	if utf8.RuneCountInString(m.GetRegion()) > 100 {
		return CreateNamespaceQuotaReqValidationError{
			field:  "Region",
			reason: "value length must be at most 100 runes",
		}
	}

	// no validation rules for ResourceQuota

	return nil
}

// CreateNamespaceQuotaReqValidationError is the validation error returned by
// CreateNamespaceQuotaReq.Validate if the designated constraints aren't met.
type CreateNamespaceQuotaReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateNamespaceQuotaReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateNamespaceQuotaReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateNamespaceQuotaReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateNamespaceQuotaReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateNamespaceQuotaReqValidationError) ErrorName() string {
	return "CreateNamespaceQuotaReqValidationError"
}

// Error satisfies the builtin error interface
func (e CreateNamespaceQuotaReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateNamespaceQuotaReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateNamespaceQuotaReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateNamespaceQuotaReqValidationError{}

// Validate checks the field values on CreateNamespaceQuotaResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateNamespaceQuotaResp) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Result

	if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateNamespaceQuotaRespValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CreateNamespaceQuotaRespValidationError is the validation error returned by
// CreateNamespaceQuotaResp.Validate if the designated constraints aren't met.
type CreateNamespaceQuotaRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateNamespaceQuotaRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateNamespaceQuotaRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateNamespaceQuotaRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateNamespaceQuotaRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateNamespaceQuotaRespValidationError) ErrorName() string {
	return "CreateNamespaceQuotaRespValidationError"
}

// Error satisfies the builtin error interface
func (e CreateNamespaceQuotaRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateNamespaceQuotaResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateNamespaceQuotaRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateNamespaceQuotaRespValidationError{}

// Validate checks the field values on DeleteNamespaceQuotaReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteNamespaceQuotaReq) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetNamespace()); l < 2 || l > 100 {
		return DeleteNamespaceQuotaReqValidationError{
			field:  "Namespace",
			reason: "value length must be between 2 and 100 runes, inclusive",
		}
	}

	if utf8.RuneCountInString(m.GetFederationClusterID()) > 100 {
		return DeleteNamespaceQuotaReqValidationError{
			field:  "FederationClusterID",
			reason: "value length must be at most 100 runes",
		}
	}

	if utf8.RuneCountInString(m.GetClusterID()) > 100 {
		return DeleteNamespaceQuotaReqValidationError{
			field:  "ClusterID",
			reason: "value length must be at most 100 runes",
		}
	}

	// no validation rules for IsForced

	return nil
}

// DeleteNamespaceQuotaReqValidationError is the validation error returned by
// DeleteNamespaceQuotaReq.Validate if the designated constraints aren't met.
type DeleteNamespaceQuotaReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteNamespaceQuotaReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteNamespaceQuotaReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteNamespaceQuotaReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteNamespaceQuotaReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteNamespaceQuotaReqValidationError) ErrorName() string {
	return "DeleteNamespaceQuotaReqValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteNamespaceQuotaReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteNamespaceQuotaReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteNamespaceQuotaReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteNamespaceQuotaReqValidationError{}

// Validate checks the field values on DeleteNamespaceQuotaResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteNamespaceQuotaResp) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Result

	return nil
}

// DeleteNamespaceQuotaRespValidationError is the validation error returned by
// DeleteNamespaceQuotaResp.Validate if the designated constraints aren't met.
type DeleteNamespaceQuotaRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteNamespaceQuotaRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteNamespaceQuotaRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteNamespaceQuotaRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteNamespaceQuotaRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteNamespaceQuotaRespValidationError) ErrorName() string {
	return "DeleteNamespaceQuotaRespValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteNamespaceQuotaRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteNamespaceQuotaResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteNamespaceQuotaRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteNamespaceQuotaRespValidationError{}

// Validate checks the field values on UpdateNamespaceQuotaReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateNamespaceQuotaReq) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetNamespace()); l < 2 || l > 100 {
		return UpdateNamespaceQuotaReqValidationError{
			field:  "Namespace",
			reason: "value length must be between 2 and 100 runes, inclusive",
		}
	}

	if utf8.RuneCountInString(m.GetFederationClusterID()) > 100 {
		return UpdateNamespaceQuotaReqValidationError{
			field:  "FederationClusterID",
			reason: "value length must be at most 100 runes",
		}
	}

	if utf8.RuneCountInString(m.GetClusterID()) > 100 {
		return UpdateNamespaceQuotaReqValidationError{
			field:  "ClusterID",
			reason: "value length must be at most 100 runes",
		}
	}

	// no validation rules for ResourceQuota

	return nil
}

// UpdateNamespaceQuotaReqValidationError is the validation error returned by
// UpdateNamespaceQuotaReq.Validate if the designated constraints aren't met.
type UpdateNamespaceQuotaReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateNamespaceQuotaReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateNamespaceQuotaReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateNamespaceQuotaReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateNamespaceQuotaReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateNamespaceQuotaReqValidationError) ErrorName() string {
	return "UpdateNamespaceQuotaReqValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateNamespaceQuotaReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateNamespaceQuotaReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateNamespaceQuotaReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateNamespaceQuotaReqValidationError{}

// Validate checks the field values on UpdateNamespaceQuotaResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateNamespaceQuotaResp) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Result

	return nil
}

// UpdateNamespaceQuotaRespValidationError is the validation error returned by
// UpdateNamespaceQuotaResp.Validate if the designated constraints aren't met.
type UpdateNamespaceQuotaRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateNamespaceQuotaRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateNamespaceQuotaRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateNamespaceQuotaRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateNamespaceQuotaRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateNamespaceQuotaRespValidationError) ErrorName() string {
	return "UpdateNamespaceQuotaRespValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateNamespaceQuotaRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateNamespaceQuotaResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateNamespaceQuotaRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateNamespaceQuotaRespValidationError{}

// Validate checks the field values on GetNamespaceQuotaReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetNamespaceQuotaReq) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetNamespace()); l < 2 || l > 100 {
		return GetNamespaceQuotaReqValidationError{
			field:  "Namespace",
			reason: "value length must be between 2 and 100 runes, inclusive",
		}
	}

	if utf8.RuneCountInString(m.GetFederationClusterID()) > 100 {
		return GetNamespaceQuotaReqValidationError{
			field:  "FederationClusterID",
			reason: "value length must be at most 100 runes",
		}
	}

	if utf8.RuneCountInString(m.GetClusterID()) > 100 {
		return GetNamespaceQuotaReqValidationError{
			field:  "ClusterID",
			reason: "value length must be at most 100 runes",
		}
	}

	return nil
}

// GetNamespaceQuotaReqValidationError is the validation error returned by
// GetNamespaceQuotaReq.Validate if the designated constraints aren't met.
type GetNamespaceQuotaReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetNamespaceQuotaReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetNamespaceQuotaReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetNamespaceQuotaReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetNamespaceQuotaReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetNamespaceQuotaReqValidationError) ErrorName() string {
	return "GetNamespaceQuotaReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetNamespaceQuotaReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetNamespaceQuotaReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetNamespaceQuotaReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetNamespaceQuotaReqValidationError{}

// Validate checks the field values on GetNamespaceQuotaResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetNamespaceQuotaResp) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Result

	if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetNamespaceQuotaRespValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetNamespaceQuotaRespValidationError is the validation error returned by
// GetNamespaceQuotaResp.Validate if the designated constraints aren't met.
type GetNamespaceQuotaRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetNamespaceQuotaRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetNamespaceQuotaRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetNamespaceQuotaRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetNamespaceQuotaRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetNamespaceQuotaRespValidationError) ErrorName() string {
	return "GetNamespaceQuotaRespValidationError"
}

// Error satisfies the builtin error interface
func (e GetNamespaceQuotaRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetNamespaceQuotaResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetNamespaceQuotaRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetNamespaceQuotaRespValidationError{}

// Validate checks the field values on ListNamespaceQuotaReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListNamespaceQuotaReq) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetNamespace()) > 100 {
		return ListNamespaceQuotaReqValidationError{
			field:  "Namespace",
			reason: "value length must be at most 100 runes",
		}
	}

	if utf8.RuneCountInString(m.GetFederationClusterID()) > 100 {
		return ListNamespaceQuotaReqValidationError{
			field:  "FederationClusterID",
			reason: "value length must be at most 100 runes",
		}
	}

	// no validation rules for Offset

	// no validation rules for Limit

	return nil
}

// ListNamespaceQuotaReqValidationError is the validation error returned by
// ListNamespaceQuotaReq.Validate if the designated constraints aren't met.
type ListNamespaceQuotaReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListNamespaceQuotaReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListNamespaceQuotaReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListNamespaceQuotaReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListNamespaceQuotaReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListNamespaceQuotaReqValidationError) ErrorName() string {
	return "ListNamespaceQuotaReqValidationError"
}

// Error satisfies the builtin error interface
func (e ListNamespaceQuotaReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListNamespaceQuotaReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListNamespaceQuotaReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListNamespaceQuotaReqValidationError{}

// Validate checks the field values on ListNamespaceQuotaResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListNamespaceQuotaResp) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Result

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListNamespaceQuotaRespValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListNamespaceQuotaRespValidationError is the validation error returned by
// ListNamespaceQuotaResp.Validate if the designated constraints aren't met.
type ListNamespaceQuotaRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListNamespaceQuotaRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListNamespaceQuotaRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListNamespaceQuotaRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListNamespaceQuotaRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListNamespaceQuotaRespValidationError) ErrorName() string {
	return "ListNamespaceQuotaRespValidationError"
}

// Error satisfies the builtin error interface
func (e ListNamespaceQuotaRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListNamespaceQuotaResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListNamespaceQuotaRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListNamespaceQuotaRespValidationError{}

// Validate checks the field values on CreateNamespaceWithQuotaReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateNamespaceWithQuotaReq) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	// no validation rules for FederationClusterID

	// no validation rules for ProjectID

	// no validation rules for BusinessID

	// no validation rules for Labels

	// no validation rules for ClusterID

	// no validation rules for Region

	// no validation rules for MaxQuota

	// no validation rules for ResourceQuota

	return nil
}

// CreateNamespaceWithQuotaReqValidationError is the validation error returned
// by CreateNamespaceWithQuotaReq.Validate if the designated constraints
// aren't met.
type CreateNamespaceWithQuotaReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateNamespaceWithQuotaReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateNamespaceWithQuotaReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateNamespaceWithQuotaReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateNamespaceWithQuotaReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateNamespaceWithQuotaReqValidationError) ErrorName() string {
	return "CreateNamespaceWithQuotaReqValidationError"
}

// Error satisfies the builtin error interface
func (e CreateNamespaceWithQuotaReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateNamespaceWithQuotaReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateNamespaceWithQuotaReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateNamespaceWithQuotaReqValidationError{}

// Validate checks the field values on CreateNamespaceWithQuotaResp with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateNamespaceWithQuotaResp) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Result

	if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateNamespaceWithQuotaRespValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CreateNamespaceWithQuotaRespValidationError is the validation error returned
// by CreateNamespaceWithQuotaResp.Validate if the designated constraints
// aren't met.
type CreateNamespaceWithQuotaRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateNamespaceWithQuotaRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateNamespaceWithQuotaRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateNamespaceWithQuotaRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateNamespaceWithQuotaRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateNamespaceWithQuotaRespValidationError) ErrorName() string {
	return "CreateNamespaceWithQuotaRespValidationError"
}

// Error satisfies the builtin error interface
func (e CreateNamespaceWithQuotaRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateNamespaceWithQuotaResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateNamespaceWithQuotaRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateNamespaceWithQuotaRespValidationError{}

// Validate checks the field values on
// CreateNamespaceQuotaResp_CreateNamespaceQuotaRespData with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateNamespaceQuotaResp_CreateNamespaceQuotaRespData) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ClusterID

	return nil
}

// CreateNamespaceQuotaResp_CreateNamespaceQuotaRespDataValidationError is the
// validation error returned by
// CreateNamespaceQuotaResp_CreateNamespaceQuotaRespData.Validate if the
// designated constraints aren't met.
type CreateNamespaceQuotaResp_CreateNamespaceQuotaRespDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateNamespaceQuotaResp_CreateNamespaceQuotaRespDataValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e CreateNamespaceQuotaResp_CreateNamespaceQuotaRespDataValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e CreateNamespaceQuotaResp_CreateNamespaceQuotaRespDataValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e CreateNamespaceQuotaResp_CreateNamespaceQuotaRespDataValidationError) Key() bool {
	return e.key
}

// ErrorName returns error name.
func (e CreateNamespaceQuotaResp_CreateNamespaceQuotaRespDataValidationError) ErrorName() string {
	return "CreateNamespaceQuotaResp_CreateNamespaceQuotaRespDataValidationError"
}

// Error satisfies the builtin error interface
func (e CreateNamespaceQuotaResp_CreateNamespaceQuotaRespDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateNamespaceQuotaResp_CreateNamespaceQuotaRespData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateNamespaceQuotaResp_CreateNamespaceQuotaRespDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateNamespaceQuotaResp_CreateNamespaceQuotaRespDataValidationError{}

// Validate checks the field values on
// CreateNamespaceWithQuotaResp_CreateNamespaceWithQuotaRespData with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateNamespaceWithQuotaResp_CreateNamespaceWithQuotaRespData) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ClusterID

	return nil
}

// CreateNamespaceWithQuotaResp_CreateNamespaceWithQuotaRespDataValidationError
// is the validation error returned by
// CreateNamespaceWithQuotaResp_CreateNamespaceWithQuotaRespData.Validate if
// the designated constraints aren't met.
type CreateNamespaceWithQuotaResp_CreateNamespaceWithQuotaRespDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateNamespaceWithQuotaResp_CreateNamespaceWithQuotaRespDataValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e CreateNamespaceWithQuotaResp_CreateNamespaceWithQuotaRespDataValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e CreateNamespaceWithQuotaResp_CreateNamespaceWithQuotaRespDataValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e CreateNamespaceWithQuotaResp_CreateNamespaceWithQuotaRespDataValidationError) Key() bool {
	return e.key
}

// ErrorName returns error name.
func (e CreateNamespaceWithQuotaResp_CreateNamespaceWithQuotaRespDataValidationError) ErrorName() string {
	return "CreateNamespaceWithQuotaResp_CreateNamespaceWithQuotaRespDataValidationError"
}

// Error satisfies the builtin error interface
func (e CreateNamespaceWithQuotaResp_CreateNamespaceWithQuotaRespDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateNamespaceWithQuotaResp_CreateNamespaceWithQuotaRespData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateNamespaceWithQuotaResp_CreateNamespaceWithQuotaRespDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateNamespaceWithQuotaResp_CreateNamespaceWithQuotaRespDataValidationError{}
